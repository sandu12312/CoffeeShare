APLICAȚIA MOBILĂ COFFEESHARE
DEZVOLTAREA UNEI SOLUȚII DIGITALE PENTRU INDUSTRIA CAFELEI DIN ROMÂNIA

CUPRINS

1. INTRODUCERE
   1.1 Contextul și fundamentarea temei de cercetare
   1.2 Justificarea necesității soluției digitale propuse
   1.3 Obiectivele strategice și contribuțiile științifice
   1.4 Metodologia de cercetare și structura documentului

2. ANALIZA STADIULUI ACTUAL ÎN DOMENIUL PROBLEMEI
   2.1 Ecosistemul digital al aplicațiilor de fidelizare în industria HoReCa
   2.2 Starbucks Mobile App - Benchmark-ul tehnologic pentru soluții enterprise
   2.3 Costa Coffee Club App - Modelul simplificat de engagement digital
   2.4 Pret A Manger App - Paradigma subscription-based în retail alimentar
   2.5 ESX (Edenred) - Arhitectura integrată de benefits și loyalty management
   2.6 7card – Platformă multiservicii pentru abonamente digitale în România
       2.6.1 Arhitectura sistemului și modelul de business
       2.6.2 Stack tehnologic și infrastructura cloud
       2.6.3 Avantaje competitive și diferențiatori de piață
       2.6.4 Limitări funcționale în segmentul cafenelelor
       2.6.5 Analiza relevanței pentru ecosistemul CoffeeShare
   2.7 Soluții universale de loyalty management - Stocard și Fidme
   2.8 Analiza comparativă tehnologică și identificarea gap-urilor de piață

3. FUNDAMENTELE TEORETICE ȘI TEHNOLOGICE
   3.1 Metodologia de selecție a tehnologiilor și framework-urilor
   3.2 React Native și Expo SDK - Arhitectura cross-platform modernă
   3.3 TypeScript - Paradigma type-safe pentru dezvoltarea scalabilă
   3.4 Firebase - Backend-as-a-Service și ecosistemul Google Cloud
   3.5 Principiile UX/UI design pentru aplicații mobile native
   3.6 Implementarea măsurilor de securitate enterprise-grade
   3.7 Strategii de monitoring, analytics și optimizare continuă
   3.8 Specificități tehnologice pentru domeniul HoReCa
   3.9 Evaluarea critică a deciziilor arhitecturale

4. ARHITECTURA SOLUȚIEI ȘI METODOLOGIA DE DEZVOLTARE
   4.1 Designul arhitectural al sistemului distribuit
   4.2 Modelarea funcționalităților prin diagramele UML
   4.3 Arhitectura orientată pe obiecte și design patterns
   4.4 Specificarea cazurilor de utilizare și scenariilor de interacțiune
   4.5 Designul bazei de date NoSQL și optimizarea colecțiilor

5. IMPLEMENTAREA TEHNICĂ A SOLUȚIEI
   5.1 Interfața de onboarding și experiența primei utilizări
   5.2 Sistemul de autentificare multi-factor și securitate avansată
   5.3 Dashboard-ul principal și centralizarea informațiilor utilizatorului
   5.4 Integrarea serviciilor de geolocalizare și mapping
   5.5 Implementarea sistemului QR pentru validarea securizată a tranzacțiilor
   5.6 Modulul de e-commerce și gestionarea coșului de cumpărături
   5.7 Sistemul de subscription management și economia digitală (beans)
   5.8 Procesul de checkout și integrarea gateway-urilor de plată
   5.9 Workflow-ul complet de abonamente între utilizatori și administratori
   5.10 Modulul de profile management și personalizarea experienței
        5.10.1 Sistemul de editare a profilului și gestionarea identității digitale
        5.10.2 Implementarea multilingvismului și localizării avansate
        5.10.3 Sistemul inteligent de notificări push și comunicare proactivă
   5.11 Arhitectura de navigație și optimizarea user experience
   5.12 Aplicația dedicată partenerilor - Coffee Partners Dashboard
   5.13 Panoul administrativ - Sistemul de management și control

6. VALIDAREA SOLUȚIEI PRIN TESTARE AUTOMATĂ
   6.1 Strategia de testare și metodologia quality assurance
   6.2 Configurarea infrastructurii de testare end-to-end
       6.2.1 Implementarea framework-ului Cypress pentru React Native
       6.2.2 Dezvoltarea comenzilor personalizate și helper functions
       6.2.3 Organizarea arhitecturală a suite-urilor de teste
   6.3 Testarea sistemului de generare și validare QR
       6.3.1 Validarea algoritmilor de criptare și securitate QR
   6.4 Validarea sistemului de subscription și business logic
       6.4.1 Testarea restricțiilor și validărilor de abonament
   6.5 Integrarea cu Cypress Cloud și continuous integration
       6.5.1 Configurarea pentru cloud recording și reporting
       6.5.2 Implementarea mock data și fixture management
   6.6 Analiza rezultatelor și metrici de performanță
       6.6.1 KPI-uri de testare și rata de succes a automatizării
       6.6.2 Analiza detaliată a coverage-ului funcțional
   6.7 Rezolvarea provocărilor tehnice și optimizări implementate
       6.7.1 Compatibilitatea React Native cu framework-urile de testare
       6.7.2 State management și mockarea serviciilor externe
   6.8 Impactul business al implementării testării automate
   6.9 Evaluarea critică a strategiei de quality assurance

7. CONCLUZII ȘI CONTRIBUȚII ȘTIINȚIFICE
   7.1 Sinteza realizărilor tehnice și contribuțiilor inovatoare
   7.2 Analiza provocărilor tehnice și soluțiilor arhitecturale implementate
   7.3 Contribuții originale la domeniul aplicațiilor mobile HoReCa
   7.4 Limitări actuale și roadmap pentru dezvoltarea viitoare
   7.5 Impactul potențial asupra digitalizării industriei cafelei din România
   7.6 Reflecții asupra procesului de cercetare și dezvoltare tehnologică

BIBLIOGRAFIE

1. INTRODUCERE
1.1 Enunțarea temei proiectului
Noile tehnologii au revoluționat felul în care afacerile î-și prestează serviciile pentru oameni, în special aplicațiile mobile care au ajuns să înlocuiască metodele tradiționale de administare a unei afaceri. Modelul de subscribții lunare sau săptămânale au ajutat la standardizarea multor servicii care a dus la simplificarea acestor procese pentru consumatori. În sectorul economic terțiar s-a înregistrat o creștere semnficativă de clienți în baza sistemelor de abonamente digitale.

Lucrarea de licență denumită  „CoffeeShare" prezintă o soluție modernă pentru gestionarea sistemelor de abonamente în industria serviciilor de cafea, este dedicată digitalizării experienței utilizatorului printr-un sistem loialitate, credite și scanare QR. Proiectul se încadrează în domeniul dezvoltării aplicațiilor mobile și se raportează la interacțiunea dintre utilizatori/clienți și cafenele partenere. Aplicația vine ca răspuns a unei lipse identificate dar cât și pentru optimizarea experienței clientului prin tehnologii de plăți digitale, contorizare resurse pentru piața din România, implementate într-o arhitectură complexă definită cu ajutorul tehnologiilor moderne precum  React Native, Firebase și TypeScript. Totodată se încadrează în domeniul soluțiilor digitale pentru sectorul comercial, plăți și marketing personalizat.

1.2 Morivarea realizării aplicației
În fiecare an se inregistreză creșteri semnficative în afaceri o dată ce apare digitalizarea, prin urmare m-am gândit o metodă prin care orice om î-și poate lua cafea doar cu un abonamet de la orice cafenea parteneră în orice moment și de a uita de plata clasică de cash sau card la fiecare intrare în cafenea. În context, aplicațiile care susțin o interacțiune ușoară între consummator și furnizor capătă o nouă valoare, aceea de a ușura și a reda o experiță cât mai plăcută ambelor părți.
În comparație cu Statele ale Americii, România nu dispune aproape de nici o platformă digitală pentru standardizarea abonamentelor în domeniul HoReCa, în ciuda faptului creșterii semnficative a consumului de cafea. CoffeShare vine să acopere această nișă atât pentru cosumatori/utilizatori cât și pentru cafenele.
Motivația dezvoltării acestui proiect include:
•	Dorința de a trasforma o plăcere zilnică intr-o experiență digitală unică;
•	Învățarea tehnologiilor utlizate în dezvoltarea aplicațiilor mobile;
•	Explorarea unei idei de afaceri care ar putea prinde amploare în piața din România.

1.3	 Obiectivele proiectului
Acest proiect a avut scopul dezvoltării ideii de interconectare dintre client - cafenea care reflectă atât scopul didactic, cât și potențialul lui de a fi aplicat în viața cotidiană. Iar ca obiective am avut:

**Învățarea de noi tehnologii** – am avut ocazia să învăț și să-mi aprofundez cunoștințele în React Native cu Expo, Firebase, Stripe pentru plăți, Google Maps API. Am avut posibilitatea să învăț cum să integrez servicii cloud moderne, să implementez autentificare securizată și să gestionez baze de date în timp real. Această experiență mi-a permis să înțeleg arhitectura aplicațiilor mobile moderne și să dobândesc competențe practice în dezvoltarea cross-platform.

**Dezvoltarea unei soluții inovatoare** – am creat o aplicație unică pe piața din România care combină sistemul de abonamente cu tehnologia QR pentru validare rapidă și securizată. Spre deosebire de aplicațiile existente care se limitează la carduri de fidelitate simple, CoffeeShare oferă un ecosistem complet care include gestionarea creditelor (beans), comenzi în avans, analiză în timp real și un dashboard administrativ avansat. Această inovație adresează o nevoie reală a pieței locale și demonstrează potențialul tehnologiei în transformarea industriei HoReCa.

**Implementarea securității avansate** – am pus un accent deosebit pe securitatea aplicației prin implementarea măsurilor de protecție care lipsesc din majoritatea aplicațiilor similare. Am integrat SSL Certificate Pinning pentru prevenirea atacurilor man-in-the-middle, verificarea integrității dispozitivului pentru detectarea telefoanelor compromise, stocarea securizată a datelor sensibile folosind Keychain și Keystore, și obfuscarea codului pentru protecția proprietății intelectuale. Aceste măsuri plasează CoffeeShare la standardele aplicațiilor bancare în ceea ce privește securitatea.

1.4 Structura lucrării de licență

Prezenta lucrare este organizată în șapte capitole principale, fiecare abordând aspecte esențiale ale dezvoltării aplicației CoffeeShare:

**Capitolul 2 - Analiza stadiului actual în domeniul problemei** prezintă o analiză comparativă detaliată a șase aplicații similare existente pe piață (Starbucks, Costa Coffee, Pret A Manger, ESX, 7card, Stocard/Fidme), identificând punctele forte, limitările și oportunitățile de îmbunătățire. Acest capitol demonstrează necesitatea unei soluții integrate precum CoffeeShare și evidențiază diferențiatorii competitivi.

**Capitolul 3 - Bazele teoretice** descrie fundamentele tehnologice utilizate în dezvoltarea aplicației, incluzând React Native, Firebase, TypeScript și măsurile de securitate implementate. Sunt prezentate motivațiile pentru alegerea fiecărei tehnologii și modul în care acestea contribuie la realizarea obiectivelor proiectului.

**Capitolul 4 - Soluția propusă și metodologia de proiectare** detaliază arhitectura sistemului, diagramele UML (cazuri de utilizare, clase, baza de date) și metodologia de dezvoltare adoptată. Acest capitol oferă o viziune de ansamblu asupra structurii tehnice și a deciziilor arhitecturale.

**Capitolul 5 - Implementarea** prezintă în detaliu dezvoltarea fiecărei funcționalități majore a aplicației, de la sistemul de autentificare și dashboard până la scanarea QR, gestionarea abonamentelor și panoul administrativ. Fiecare secțiune include cod relevant, explicații tehnice și capturi de ecran.

**Capitolul 6 - Utilizarea și testarea** demonstrează implementarea completă a testelor automate folosind Cypress, validând funcționalitățile critice ale aplicației și asigurând calitatea codului. Sunt prezentate rezultatele testării și analiza performanței.

**Capitolul 7 - Concluzii** sintetizează realizările obținute, problemele tehnice întâmpinate și soluțiile implementate, evidențiază avantajele competitive ale aplicației dezvoltate și prezintă direcțiile viitoare de dezvoltare și extindere a platformei CoffeeShare.












2. ANALIZA STADIULUI ACTUAL ÎN DOMENIUL PROBLEMEI
2.1 Introducere în ecosistemul aplicațiilor de fidelizare pentru cafenele
În ultimul deciniu o data cu digitalizarea in masă a sectorul HoReCa, mai bine zis industria cafenelelor a început implimentarea aplicațiilor mobile preconizate dezvotării unui sistem de loialitate pentru clienții acestora. Evoluția tehnlogică a determinat confluența mai multor factori: creșterea numărului de plăți apple pay sau google play realizate de pe un dispozitiv   mobil, modifiecarea comporatamentului. Consumatorilor către plăți de tip cash și creșterea numărului de subscribții lunare. 
În urma analizării ecosistemelor de aplicații mobile utilizate pentru înlocuirea serviciilor tradiționale am stabilit  patru categorii pricipale:

Soluții pentru o anumită nișă specifică cafenelelor;
Platforme universale care implică standardizarea mai multor furnizori;
Portofel digital cu funcționalități  de loialitate;
Soluții hibride  care combină servicii financiare cu prpgrame de fidelizare.

Progresul acestui sector poate fi caracterizat în trei faze distincte. Prima fază(2010-2015) constă în digitilizarea simplă a cardurilor de loialitate simple lipsită de funcționalități avansate de exemplu:cardurile de fidelizare de la supermarket.  A doua fază(2015-2020) – a venit cu integrarea sistemlor de plăți digitale. Faza actuală(2020 – prezent) se bazează pe dezvoltarea tehnologii pentru personalizarea experienției utilizatorului prin algoritmi de machine learning și  realizarea ecosistemelor care interconectează mai multe servicii.

Pentru a arăta necesitatea și uitilitatea aplicației ,,CoffeeShare’’  și a demonstra contribuția în domeniu, am realizat o analiză detaliată, comparatică pentru șase aplicații existente pe piață. Am ales aceste aplicații pe baza unor criterii precum: numarul de utilizatori activi, funcționalitățile oferite, tehnologiile utilizate, nivelul de securitate și gradul de inovare pentru experiența utilizatorului.

2.2 Starbucks Mobile App - Standardul industriei pentru aplicații dedicate
Aplicația mobilă Starbucks reprezintă unul dintre cele mai mature și adoptate sisteme de fidelizare digitală din industria cafenelelor, servind ca benchmark pentru funcționalitățile considerate esențiale în acest domeniu. Cu peste 31 de milioane de utilizatori activi lunar și o penetrare de aproximativ 50% dintre clienții Starbucks din SUA, această aplicație demonstrează potențialul transformativ al tehnologiilor mobile în retail [1].

Functionalități principale și arhitectura sistemului de rewards
Sistemul Starbucks utilizează un model complex de comandă online care permite utilizatorilor să plaseze din timp comenzi cu până la 24 ore anticipate, pot să efectueze plăți digitale prin diferite modalități și să adune puncta prin sistemul Starbucks Rewards. Algoritmul de recompensare folosește o conversie dinamică de 2 stele pentru fiecare dolar cheltuit, cu posibilitatea de a fi recompensat mai bine dacă ai un istoric de consum mai mare.

Aplicația integrează funcționalități de stocare securizată cu informații în timp real despre disponibilitatea produselor, timpul de așteptare estimate și orele de lucru în care cafeneau este deschisă. Sistemul de inventar sincronizează datele între aplicația mobile și sistemele de vânzare care oferă informații exacte despre stocurile disponibile și prevenire în cazul în care produsele sunt indisponibile.

Sistemul de credite utilizează un model cu trei nivele de member(Welcome, Green, Gold), oferind servicii pe baza a câte puncte ai cu atât beneficiiele sunt mai mari. Conversia se bazează pe nivele fixe(25, 50, 150, 200 și 400 de stele) care pot fi folosite pentru achiziționarea de băuturi și diverse produse.

Argitectura tehnologică și implimentarea scalabilității
Starbbucks utilizează dezvoltarea nativă de aplicații separate pentruu IOS și Android, cu un backend care combină serviciile Amazon Web Services cu infrastructură proprie. Arhitectura microserviciilor permite optimizarea independentă a componentelor precum sistemul de plăți, sincronizarea inventarului și gestionarea comenzilor.

Se utilizează sisteme multiple de plată(carduri de credit,  Apple Pay, Google Pay, Starbucks Card) care gestionează aproximativ peste 8 milioane de tranzacții săptămânale.
Aplicația folosește machine learning pentru o personalizarea avansată pentru oferte și recomandări, utilizând algoritmi care depistează tipare de consum, preferințe de locație. Sistemul de notificări push este personalizat în funcție de geolocație și în funcție de alegerile care le faci.

Limitări identificate și oportunități de îmbunătățire
Soluția Starbucks are câteva puncte slabe principale:
•	Funcționează doar la Starbucks: Nu o poți folosi în afara rețelei lor.
•	Securitate slabă: Îi lipsesc măsuri de securitate avansate, cum ar fi SSL pinning (care ar proteja împotriva atacurilor pe rețele Wi-Fi publice). E vulnerabilă la interceptarea datelor.
•	Date limitate despre consum: Nu îți oferă statistici detaliate despre cât și ce ai consumat, doar istoricul tranzacțiilor. De asemenea, nu poți exporta aceste date pentru a le analiza tu.
•	Interacțiune socială slabă: Nu sunt multe opțiuni pentru a partaja experiențele cu prietenii sau pentru a te juca, ceea ce ar face aplicația mai distractivă și ar încuraja comunitatea.
•	Experiență de utilizare restrictivă: Aplicația arată cam veche și nu îți permite să o 
personalizezi. Nu poți avea mai multe conturi sau să o folosești ușor cu familia sau colegii.

2.3 Costa Coffee Club App - Abordarea simplificată a fidelizării
Costa Coffee Club App reprezintă o implementare mai simplă a conceptului de fidelizare digitală, concentrându-se pe funcționalitățile esențiale de colectare și utilizare a punctelor de loialitate, fără complexitatea sistemelor enterprise. Cu o bază de utilizatori de aproximativ 2.8 milioane în Marea Britanie, aplicația demonstrează eficiența unei abordări minimaliste în fidelizarea clientelei [2].
Aplicatia Costa este bazată pe un sistem de colectare a punctelor de fidelizare prin scanarea codurilor de bare, aceasta oferă utilizatorului o interfață simplificată care permite vizualizarea istoricului tranzacțiilor și a soldului.
Sistemul acesteia utilizează conversia directă a punctelor, pentru fiecare liră cheltuită utilizatorul primește un punct, cu praguri de recompensare stabilite la intervaluri refulate, astfel costul unei bauturi simple fiind de 8 puncte iar costul unei bauturi premium de 16 puncte.
Funcția de stocare securizată integrează informații de bază despre locații, ore de funcționare și contacte, cu condiția că aceasta nu sincronizează în timp real disponibilitatea produselor. Sistemul de oferte a acesteia se bazează pe campanii periodice cu puncte bonus sau reduceri, comportamentul personal al individului fiind ignorat in acest caz.

Aplicația implementează un system bazat pe nivele de loialitate, având două nivele : standart si VIP. Statutul VIP fiind obținut de către utilizator dupa colectarea timp de un an calendaristic a 200 de puncte de fidelitate. Beneficiile pachetului VIP includ puncta bonus ocazionale și acces prioritar la oferte limitate, fără alte diferențe semnificative.

Aspecte tehnologice și arhitectura simplificată
Implementarea tehnologică abordează un sistem de tip hibrid, care combină elemente de dezvoltare web cu funcționalități native care permit accesul la camera și notificări. Astfel costurile de dezvoltare sunt priotizate în detrimental performanței optime a aplicației, respectiv rezultând într-o experiență funcțională dar puțin optimizată pentru utilizator.

Deficiențe observate și limitări competitive

După ce am analizat aplicația Costa am constatat deficiențe semnificative în cee ce privește experiența utilizatorului și funționalitățile avansate. În cazul acestei aplicații lipsa sistemului de pre-comandă elimină unul dintre avantajele principale ale acesteia, forțând consumatorul să stea la coadă pentru a comanda cafea, și făcând aplicația mai puțin competitivă în comparație cu alte aplicații de pe piață, de exemplu aplicația Starbucks.

Totodată am constatat că interfața simplificată fără opțiunea de a o personaliza și lipsa măsurilor de securitate avansată a dus la limitatarea capacității de competiție cu soluții mai complexe. Astfel conveniența aplicației fiind redusă datorită faptului că utilizatorul nu are acces la plați fără cash precum Apple Pay sau Google Pay, utilizatorul fiind nevoit să transporte carduri bancare fizice sau cash pentru realizarea plaților, avantajul unui system de plăți digitale fiind preluat de alți competitori precum Starbucks. 

2.4 Pret A Manger App - Inovația prin serviciile de subscription
Aplicația Pret A Manger introduce un model inovator în industria cafenelelor prin inițierea unui sistem de subscripții care oferă acces la băuturi nelimitate pentru o taxă lunară fixă, reprezentând o modificare semnificativă în modelele tradiționale de stabilire a prețurilor și de fidelizare .
Model de business și funcționalități distinctive
Caracteristica specifică a aplicației Pret constă în modelul YourPret Coffee Subscription care permite utilizatorilor să consume până la 5 băuturi pe zi pentru o taxă lunară de £25. Acest model transformă relația transacțională într-una de serviciu, creând previzibilitate în veniturile furnizorilor și prețuri mai convenabile pentru consumatorii frecvenți.Aplicația implementează funcționalități de a plasa comanda în avans cu programare la intervale de timp  pentru a evita aglomerația, integrarea sistemelor de plată digitale pentru reîncărcări sau achitarea subscripțiilor, și un sistem inteligent de monitorizare a consumului care previne utilizarea excesivă a serviciului, prin forțarea limitelor de timp între plasarea comenzilor.Sistemul de recompense complementar subscripției oferă puncte bonus pentru achiziții suplimentare (alimente, băuturi premium) cu conversia: 1 punct per £1 cheltuit, 50 puncte = băutură gratuită. Aceast model strategic mixt optimizează venitul per client prin combinarea subscripției cu tranzacții suplimentare.
Implementare tehnologică și arhitectura real-time
Soluția tehnologică utilizată integrează elemente de Progressive Web App (PWA) cu funcționalități native, prezentând o abordare modernă față de dezvoltarea compatibilă pentru mai multe platforme, care reduce costurile de întreținere și accelerează lansarea noilor funcționalități. Sistemul de backend gestionează limitările de consum, eficient, implementând un sistem care sincronizează dispozitivele în timp real între toate locațiile. Arhitectura event-driven procesează tranzacțiile instantaneu și actualizează statusul subscripției în sub 200ms, asigurând o experiență continuă, fără întreruperi pentru utilizatori. Detecția de fraudă este realizată de algoritmi ce monitorizează modelele de consum pentru identificarea comportamentelor anormale (utilizarea aceluiași cont de mai mulți consumatori, consumul automatizat) și implementează măsuri preventive precum restricții temporare a contului și teste de verificare umană.
Limitări și oportunități de îmbunătățire
Principalele dezavantaje ale aplicației Pret includ disponibilitatea geografică limitată la Marea Britanie și  doar alte câteva orașe europene, și accentul exclusiv pe modelul de subscripție, care poate să nu fie atractiv pentru turiști sau utilizatorii ocazionali.Lipsa funcționalităților de personalizare și a unui sistem de analiză detaliată limitează potențialul de îmbunătățire a experienței utilizatorului. Aplicația nu oferă recomandări personalizate de produse sau perspective despre modul de consum individual, ratând oportunitatea de a maximiza gradul de satisfacție a clienților.Din perspectiva scalabilității, dependența de modelul subscripții creează dificultăți în diversificarea surselor de venit și poate reduce atractivitatea pentru utilizatorii ai cărui consum variază.
2.5 ESX (Edenred) - Ecosystem integrat de benefits și loyalty
Aplicația ESX, dezvoltată de grupul Edenred, reprezintă o abordare comprehensivă asupra managementului digital al pachetelor de beneficii a angajaților și programelor de fidelizare, integrând soluții pentru bilete de masă, carduri cadou și puncte de loialitate într-o singură platformă digitală.
Arhitectura multi-serviciu și integrarea enterprise
ESX implementează o arhitectură la nivel de companie care simultan oferă multiple tipuri de beneficii: bilete de masă electronice, vouchere de vacanță, carduri cadou corporative și programe de loialitate pentru comercianții parteneri. Această abordare de ansamblu permite utilizatorilor să gestioneze toate beneficiile oferite de companie dintr-o singură interfață, reducând friction-ul și crescând adoption rates.Sistemul  a fost integrat de peste 50.000 de parteneri comerciali în România, inclusiv de rețele majore de cafenele, restaurante și hypermarket-uri. Capacitatea de geo-targeting permite afișarea automată a partenerilor relevanți bazată pe locația utilizatorului, optimizând experiența de utilizare a beneficiilor.Aplicația implementează un sistem avansat de analiză a cheltuielilor care oferă utilizatorilor o perspectivă detaliate despre tipajul de cheltuieli, categorii de produse preferate și optimizări posibile pentru maximizarea valorii beneficiilor. Panoul de control personal afișează recomandări personalizate și proiecții de consum.
Protocoale de securitate și compliance financiar
Fiind o soluție de servicii financiare, ESX implementează protocoale de securitate conform standardelor PCI DSS și GDPR. Aplicația utilizează, pentru toate tranzacțiile, criptarea end-to-end, autentificare cu mai mulți factori obligatorie pentru acces, iar pentru detectarea comportamentului suspect: identificarea unică a dispozitivului. Sistemul de istoric al activităților  menține înregistrări ale tuturor tranzacțiilor și accesărilor pentru a se conforma cu reglementările financiare în vigoare. Salvările automate și disaster recovery procedures asigură menținerea continuității și protecția datelor utilizatorilor.Integrarea cu sistemele HR permite sincronizarea automată a beneficiilor de angajat și actualizarea în timp real a limitelor și eligibilității, eliminând procesele manuale și reducând erorile administrative.
Limitări în contextul aplicațiilor de cafenele
Deși ESX oferă opțiuni avansate pentru managementul avantajelor, experiența specifică aplicațiilor de cafenele este limitată la funcționalitățile de plată și localizare a cafenelelor. Aplicația nu oferă caracteristici specializate precum comandă prealabilă, navigarea meniurilor sau programe de loialitate dedicate industriei cafenelelor.Complexitatea interfeței, datorită multitudinii serviciilor oferite, poate fi copleșitoare și încărcată pentru utilizatorii care caută o experiență simplă și concentrată pe consumul de cafea. Timpul de navigare necesar pentru finalizarea unei tranzacții este semnificativ mai mare comparativ cu alte  aplicațiile dedicate specializate pe cafea.
2.6 7card – Platformă națională de abonamente multiservicii 
 
Aplicația 7card este un serviciu digital dezvoltat în România, se specializează în oferirea abonamentelor lunare pentru accesarea unei rețele mari de locații din domeniul sportului și sănătății, precum piscine, săli de fitness, studiouri de yoga sau dans, dar și birouri partajate sau activități de relaxare. 7card oferă o alternativă modernă si confortabilă abonamentelor individuale  clasice pentru centre sportive, având o acoperire națională și un număr de utilizatori în creștere continuă.
 
2.6.1 Modelul de funcționare  
Utilizatorul achită un abonament lunar fix. În funcție de pachetul ales, acesta îi oferă un număr limitat sau nelimitat de intrări în locațiile partenere.
Aplicația 7card nu este legata de domeniului cafenelelor, dar servește ca idee brută pentru schema de parteneriate și raționamentul abonamentelor din mai multe locații care poate fi folosite și în domeniul HoReCa. 
 
Funcționalitățile principale includ:  
Vizualizarea tuturor locațiilor din rețeaua parteneră disponibile din localitate; 
Obținerea accesului scanând un cod QR în incintă;  
Istoricul activităților și control asupra actualului abonament;
Utilizatorii au suport constant și integrare cu firmele care oferă angajaților beneficii (abonamente plătite de angajator);  
Posibilitatea filtrării după oraș, tipul de activitate, distanta fata de dispozitiv, programul de funcționare. 
 
2.6.2 Tehnologii utilizate  
Aplicație mobilă hibridă dezvoltată cu framework-uri cross-platform;  
Backend propriu cu actualizarea zilnica a bazelor de date;
Integrare cu Firebase Authentication și servicii de plată externă; 
Securizare prin token-uri la nivelul accesului; 
Geolocalizare prin API-uri native (Android/iOS); 
Notificarea utilizatorilor privind noutăți, activări și expirări.

2.6.3 Avantaje 
Permite accesul la totalitatea locațiilor din orașe diferite printr-un singur abonament; 
Flexibilitate pentru utilizator – posibilitatea de a-și alege activitatea si locația;
Parteneriate cu mii de locații din diferite domenii din România; 
Ușurința extinderii în alte domenii (de exemplu: cafenele, restaurante, birouri colaborative). 

2.6.4 Limitări în contextul cafenelelor 
	Aplicația este orientată pe acces de servicii, nu pe consum de produse;
	Nu sunt incluse funcționalități cum ar fi: 
•	istoric de comenzi; 
•	coș de cumpărături; 
•	personalizare a produselor;  
•	plată directă în aplicație pentru produse sau meniuri;  
	Lipsa unui sistem de recompensare sau de loialitate bazat pe frecvența folosirii serviciilor;  
	Nu permite un contact direct între partener (cafenea) și client (ex: oferte, mesaje, statistici).

2.6.5 Relevanță pentru CoffeeShare 
Deși 7card nu este un serviciu digital destinat domeniului HoReCa, structura sa modulară și logica accesului la mai multe locații inspiră abordarea CoffeeShare în ceea ce privește: 
•	abonamentele lunare cu acces în multiple rețele de cafenele; 
•	găsirea locațiilor disponibile și filtrarea acestora;  
•	parteneriatele descentralizate cu locații independente. 
CoffeeShare adaugă însă o dimensiune operațională originală – consumul efectiv al produselor, gestiunea creditelor (beans), integrarea cu POS-ul cafenelelor și funcționalități sociale – aspecte absente din modelul 7card.

2.7 Aplicații universale bazate pe conceptul de loialitate - Stocard și Fidme
Categoria aplicațiilor bazate pe conceptul de loialitate este reprezentată de Stocard și Fidme. Acestea au o abordare diferită prin centralizarea cardurilor de fidelitate a mai multor furnizori într-o singură platformă, focusându-se pe ușurarea gestionării cardurilor[6].
Funcționalități și abordarea mai multor branduri
Cu peste 50 de milioane de utilizatori in toata lumea, Stocard permite reținerea în format digital a peste 1.000 de tipuri de carduri de fidelitate, în care este inclusa o mare parte din rețelele internaționale de cafenele. Funcția de prima importanță este scanarea și afișarea codurilor de bare ale cardurilor, astfel, scapă oamenii de necesitatea transportării cardurilor fizice și ușurează portofelul. Fidme abordează similar situația, dar cu interesul geografic pe piața franceză și europeană. Aceasta implică notificări personalizate bazate pe locația utilizatorului și istoricul cumpărăturilor. Aplicația utilizează tehnologia OCR pentru scanarea automată a bonurilor și urmărirea achizițiilor pentru a oferi o analitică unică. Ambele platforme implementează notificări de reamintire pentru ofertele care expiră și notificări cu promoții potrivite in funcție de cumpărăturile de rutină. Sincronizarea serviciilor de cloud in baza de date asigură consistența datelor între mai multe dispozitive și realizarea unei copii de rezervă a cardurilor.

Avantajele aplicațiilor universale și efectele de rețea
Aplicațiile cu aspect de portofel digital pentru carduri de fidelitate sunt apreciate pentru simplitate si ușurința în utilizare. În loc să ai o mulțime de aplicații sau un portofel gros si incomod, plin de carduri de fidelitate pentru fiecare magazin sau cafenea, toate pot fi puse la îndemână în telefon. Utilizatorul unei astfel de aplicații nu mai trebuie să țină minte mai multe conturi sau reguli, totul este organizat în format digital.

Aceste aplicații devin mai utile pe măsură ce numărul de comercianți și utilizatori crește. Cu cât sunt mai mulți parteneri în rețea, cu atât devine mai convenabil pentru utilizator, iar valoarea pentru platformă crește. Un beneficiu ar fi și faptul că informațiile legate de achiziții pot fi analizate detaliat pentru a observa obiceiuri generale de consum.

Un alt avantaj este că toate magazinele din aplicație sunt reduse la o singură interfață. Acest lucru permite utilizatorilor să se obișnuiască mai rapid cu modul de funcționare și pot folosi aplicația ușor, indiferent de brand. Dacă sunt dispuși să acceseze aplicația la un magazin, le va fi natural să o folosească și pentru altul. Această obișnuință contribuie la sporirea folosirii aplicației și a programelor de fidelitate.
Limitări arhitecturale și funcționale
Analiza acestor aplicații relevă limitări semnificative în profunzimea integrării cu sistemele furnizorilor. Majoritatea implementărilor se limitează la read-only access la informații de base (sold puncte, istoric basic) fără posibilitatea accesării funcționalităților avansate specifice fiecărui retailer.Lipsa funcționalităților avansate precum pre-ordering, analize personalizate sau măsuri de securitate specifice limitează valoarea adăugată oferită utilizatorilor comparativ cu aplicațiile native ale retailerilor. Dependența de implementările existente ale furnizorilor împiedică inovația în domeniul experienței utilizatorului.Din perspectiva business model-ului, aceste aplicații se confruntă cu provocări în monetization dincolo de advertising și affiliate fees, limitând resources-urile disponibile pentru inovare și îmbunătățirea feature-urilor.
2.8 Analiza tehnologică comparativă și gap analysis
Stacks tehnologice și arhitecturi implementate
Analizând tehnologiile utilizate de aplicațiile evaluate, se observă o diversitate semnificativă în approach-urile adoptate. Starbucks și Costa utilizează dezvoltare nativă separată pentru iOS și Android, prioritizing performance și access la funcționalitățile complete ale platform-elor. Această abordare oferă experiență optimă dar implică costuri semnificative de development și maintenance.Pret A Manger adoptă o strategie hibridă PWA/native care balansează performance-ul cu cost efficiency. ESX și 7card, fiind soluții enterprise, utilizează arhitecturi complexe microservices cu multiple integration points și protocols de securitate avansați.Aplicațiile universale precum Stocard adoptă frameworks cross-platform (React Native, Flutter) pentru maximizing code reuse și accelerating time-to-market across platforms. Această alegere reflectă prioritizarea scalability-ului geografic față de deep platform integration.
Protocols de securitate și compliance
Analiza security implementations relevă disparități majore între aplicații. Soluțiile financiare (ESX, 7card) implementează standard enterprise security measures: SSL pinning, certificate transparency, device attestation și fraud detection algorithms.Aplicațiile dedicate cafenelelor prezintă security gaps semnificative, majoritatea neimplementând protection against man-in-the-middle attacks sau device integrity verification. Această vulnerabilitate poate compromite security-ul datelor personale și financiare ale utilizatorilor.CoffeeShare addressează aceste deficiențe prin implementation comprehensivă de security measures: SSL pinning, device security checks, code obfuscation și secure storage pentru informații sensibile.
3. BAZELE TEORETICE
3.1 Introducere în alegerile tehnologice personale
Când am început dezvoltarea aplicației CoffeeShare, primul lucru care m-a preocupat a fost alegerea unui stack tehnologic care să-mi permită să construiesc o aplicație robustă, sigură și scalabilă, dar în același timp să nu fiu limitat de complexitatea dezvoltării. După experiența acumulată în timpul facultății și prin proiectele personale anterioare, am realizat că cea mai bună abordare este să combin tehnologii moderne care au dovedit deja stabilitatea în producție.M-am orientat către un ecosistem tehnologic care să îmi ofere flexibilitatea dezvoltării cross-platform, fără a compromite performanța sau securitatea aplicației. Decizia de a folosi React Native ca framework principal a venit din experiența pozitivă pe care am avut-o cu React în proiectele web anterioare și din dorința de a evita duplicarea efortului pentru iOS și Android.Fiecare tehnologie pe care am ales-o a avut un motiv specific: performanța, siguranța, viteza de dezvoltare sau capacitatea de mentenanță pe termen lung. Am învățat că în dezvoltarea software, alegerea tehnologiilor nu trebuie să fie bazată doar pe popularitatea lor, ci pe cât de bine se potrivesc cu obiectivele specifice ale proiectului [1].
3.2 React Native și Expo - Fundamentul aplicației mele
React Native a fost alegerea naturală pentru mine, mai ales că eram deja familiarizat cu React din proiectele web pe care le-am dezvoltat anterior. Ce m-a impresionat cel mai mult la React Native este că îmi permite să scriu cod o singură dată și să obțin aplicații native pentru ambele platforme majore. Nu este doar o aplicație web îmbrăcată în native - componentele pe care le scriu sunt traduse în componente native reale ale fiecărei platforme.Expo SDK 53.0.11 mi-a simplificat enorm dezvoltarea prin oferirea unor module pre-construite pentru funcționalitățile complexe. În loc să învăț să scriu bridge-uri native pentru cameră, localizare sau autentificare biometrică, am putut folosi API-urile Expo care sunt deja optimizate și testate. Acest lucru mi-a permis să mă concentrez pe logica de business a aplicației și pe experiența utilizatorului, nu pe implementarea detaliată a funcționalităților de sistem.Am ales să folosesc Expo Router pentru navigare pentru că îmi place conceptul de file-based routing pe care l-am văzut în Next.js. Organizarea automată a ecranelor bazată pe structura de foldere mi-a făcut arhitectura aplicației mult mai clară și mai ușor de înțeles. Când adaug un fișier nou în folderul (mainUsers), acesta devine automat o rută accesibilă, ceea ce accelerează considerabil dezvoltarea [2].
3.3 TypeScript - Siguranța pe care o apreciez
Una dintre cele mai bune decizii pe care le-am luat în acest proiect a fost folosirea TypeScript în loc de JavaScript simplu. Venind dintr-o experiență cu limbajele tipizate din facultate, lipsa verificării tipurilor în JavaScript mă făcea să mă simt nesigur, mai ales când lucram cu structuri de date complexe.TypeScript mi-a oferit exact confortul de care aveam nevoie. Când definesc o interfață pentru User sau Cafe, știu exact ce proprietăți are fiecare obiect și ce tipuri de date pot folosi. Acest lucru m-a ajutat să evit multe bug-uri care ar fi apărut doar în runtime cu JavaScript clasic. De exemplu, când lucrez cu datele din Firebase, TypeScript mă avertizează dacă încerc să accesez o proprietate care nu există sau dacă fac o conversie incorectă de tip.Editor-ul meu (VS Code) îmi oferă autocompletare inteligentă și refactoring assistat datorită TypeScript. Când redenumesc o proprietate într-o interfață, toate utilizările sale din proiect sunt actualizate automat. Această funcționalitate mi-a economisit ore întregi de debugging și a făcut codul mult mai maintainable [3].
3.4 Firebase - Backend-ul pe care mă pot baza
Pentru backend am ales Firebase nu din lene, ci pentru că am realizat că dezvoltarea unei infrastructuri server proprii ar fi consumat o mare parte din timpul dedicat proiectului, fără a aduce valoare semnificativă pentru utilizatori. Firebase mi-a oferit exact ceea ce aveam nevoie: o infrastructură robustă, testată la scală de milioane de utilizatori Google.Firebase Authentication a fost salvarea mea când a venit vorba de implementarea sistemului de autentificare. În loc să îmi fac griji pentru stocarea sigură a parolelor, hash-ing, salt-ing și toate protocoalele de securitate asociate, Firebase gestionează toate acestea automat. Am putut implementa rapid autentificare cu email/parolă, Google Sign-In și chiar two-factor authentication fără să scriu o singură linie de cod backend.Cloud Firestore mi-a oferit o bază de date NoSQL care se sincronizează în timp real între toate device-urile. Această funcționalitate a fost crucială pentru aplicația mea, unde utilizatorii trebuie să vadă actualizări instant ale soldului de puncte sau ale comenzilor. Faptul că funcționează și offline și se sincronizează automat când se restabilește conexiunea a fost un bonus neașteptat care îmbunătățește semnificativ experiența utilizatorului.Firebase Cloud Storage mi-a rezolvat problema uploadului și servării imaginilor. Când un coffee shop încarcă poze cu produsele lor, imaginile sunt automat procesate, redimensionate pentru diferite screen-uri și servite prin CDN global pentru performanțe optimale [4].
3.5 Experiența utilizatorului prin tehnologii dedicate
Pentru funcționalitățile legate de hartă am integrat React Native Maps, care îmi oferă acces la hărțile native ale fiecărei platforme. Ce mi-a plăcut cel mai mult este că utilizatorii iOS văd Apple Maps (cu care sunt obișnuiți), iar cei de Android văd Google Maps, oferind o experiență familiară pe fiecare platformă.Expo Location mi-a simplificat implementarea funcționalităților de geolocation. Am putut implementa rapid găsirea cafenelelor apropiate și calcularea distanțelor fără să mă complicez cu API-urile native de locație ale fiecărei platforme. Sistemul gestionează automat permisiunile și oferă fallback-uri când GPS-ul nu este disponibil.Pentru animații am ales React Native Animatable pentru că îmi permite să creez tranziții fluide cu foarte puțin cod. Micro-interacțiunile sunt esențiale pentru o aplicație modernă - când un utilizator adaugă un produs în coș, animația subtilă de feedback îi confirmă că acțiunea a fost înregistrată. Aceste detalii mici fac diferența între o aplicație care se simte profesională și una care pare neterminată [5].
3.6 Securitatea - prioritatea mea numărul unu
Una dintre lecțiile importante pe care le-am învățat în timpul dezvoltării a fost că securitatea nu este ceva ce poți adăuga la sfârșit - trebuie gândită de la început. Pentru aplicația mea, care gestionează date personale și tranzacții financiare, am implementat multiple straturi de protecție.React Native SSL Pinning a fost primul meu nivel de protecție împotriva atacurilor man-in-the-middle. Acest lucru înseamnă că aplicația mea verifică că certificatele SSL ale serverului sunt exact cele pe care le aștept, nu acceptă certificate false chiar dacă par valid semnate.Expo Secure Store îmi stochează informațiile sensibile folosind Keychain pe iOS și Android Keystore pe Android. Aceste sisteme folosesc hardware security modules când sunt disponibile, oferind același nivel de securitate ca aplicațiile bancare. Token-urile de autentificare și alte informații critice nu sunt niciodată stocate în plain text.Am implementat și obfuscarea codului cu React Native Obfuscating Transformer pentru a îngreuna reverse engineering-ul aplicației. Deși codul JavaScript este interpretat, această măsură adăugată face mult mai dificilă extragerea logicii de business de către atacatori [6].
3.7 Monitorizarea și îmbunătățirea continuă
Pentru a înțelege cum funcționează aplicația în producție și pentru a identifica rapid problemele, am integrat Sentry pentru error tracking și performance monitoring. Această decizie s-a dovedit esențială în timpul testării - am putut identifica și fixa bug-uri care apăreau doar pe anumite device-uri sau în anumite condiții de network.Sentry îmi oferă stack trace-uri detaliate pentru fiecare crash, breadcrumbs care îmi arată ce acțiuni a făcut utilizatorul înainte de eroare și metrici de performanță pentru a identifica bottleneck-urile. Fără aceste informații, debugging-ul unei aplicații mobile ar fi fost un coșmar.Am implementat și analytics custom pentru a înțelege cum utilizează oamenii aplicația mea. Vreau să știu ce funcționalități sunt folosite cel mai mult, unde abandonează utilizatorii procesul de checkout și ce îmbunătățiri ar putea avea cel mai mare impact asupra experienței lor [7].
3.8 Funcționalități specifice pentru industria cafelei
Pentru scanarea codurilor QR am combinat Expo Camera cu Expo Barcode Scanner pentru a crea o experiență rapidă și fluidă. Utilizatorii pot scana codurile QR ale cafenelelor pentru a colecta puncte sau pentru a efectua plăți. Am optimizat sistemul să recunoască codurile QR chiar și în condiții de iluminare slabă sau când codul nu este perfect aliniat.React Native QRCode SVG îmi generează codurile QR pentru token-urile temporare de plată. Fiecare token QR expiră după 15 minute pentru securitate, și sistemul generează automat un cod nou când utilizatorul deschide ecranul de plată. Codurile sunt vectoriale, ceea ce înseamnă că rămân clare indiferent de dimensiunea ecranului.React Native Device Info îmi oferă informații despre device pentru a adapta experiența la capabilities-urile fiecărui telefon. Pe device-urile mai vechi reduc numărul de animații și optimizez performanța, iar pe cele high-end pot oferi o experiență vizuală mai bogată [8].
3.9 Reflecții asupra alegerii tehnologiilor
Privind retrospectiv la dezvoltarea CoffeeShare, sunt mulțumit de alegerile tehnologice pe care le-am făcut. React Native mi-a permis să dezvolt rapid o aplicație cross-platform fără a compromite performanța, iar Firebase mi-a oferit o infrastructură scalabilă fără headache-ul managementului de servere.TypeScript a fost investiția cu cel mai mare return - timpul petrecut învățând conceptele avansate de tipizare mi s-a întoRS în reducerea dramatică a bug-urilor și în îmbunătățirea vitezei de dezvoltare prin tooling superior.Cel mai important lucru pe care l-am învățat este că tehnologia este doar un mijloc pentru a rezolva probleme reale ale utilizatorilor. Indiferent cât de moderne sau performante sunt tehnologiile pe care le aleg, dacă nu rezolvă o problemă reală sau nu oferă o experiență superioară utilizatorilor, nu au valoare.Arhitectura modulară pe care am construit-o îmi permite să înlocuiesc individual componentele pe măsură ce tehnologiile evoluează, ceea ce înseamnă că aplicația poate evolua în timp fără a fi nevoie să refac totul de la zero [9].


Caracteristică	Starbucks	Costa Coffee	Pret A Manager	ESX	7card	Apps Universale	Coffee Share
Scanare cod QR	✓	✓	x	✓	✓	✓	✓
SSL Pinning	x	x	x	✓	✓	x	✓
Securitatea dispozitivului	x	x	x	✓	✓	x	✓
Suport multilingv	✓	x	x	✓	✓	✓	✓
Analiză în timp real	x	x	x	✓	✓	x	✓
Code obfuscation	x	x	x	✓	✓	x	✓
Suport offline	x	x	x	✓	x	x	✓
Multi-vendor support	x	x	x	✓	✓	✓	✓
Panou de control avansat	x	x	x	✓	✓	x	✓
Modele de abonament	x	x	✓	x	x	x	✓
Pre-ordering	✓	x	✓	x	x	x	✓
Machine Learning	✓	x	x	✓	✓	x	✓
Gamification	✓	x	x	x	✓	x	✓
Social Features	x	x	x	x	x	x	✓
Analiza cheltuielilor	x	x	x	✓	✓	x	✓
Sincronizare între platforme	✓	✓	✓	✓	✓	✓	✓
Integrare API	x	x	x	✓	✓	x	✓
Soluții White-Label	x	x	x	x	x	x	✓
Personalizarea brandului	x	x	x	x	x	x	✓
Advanced Reporting	x	x	x	✓	✓	x	✓




5. IMPLEMENTAREA
5.1 Ecranul de Welcome - Introducerea Aplicației
Prezentare funcționalitate:Ecranul de Welcome reprezintă prima interfață pe care utilizatorul o vede la deschiderea aplicației CoffeeShare. Această funcționalitate implementează un sistem de onboarding prin slide-uri interactive care prezintă caracteristicile principale ale aplicației: abonamente inteligente, acces facil, găsirea locațiilor și comunitatea utilizatorilor. Ecranul folosește un design modern cu imagini de fundal și navigare prin gesturi swipe.












2. ANALIZA STADIULUI ACTUAL ÎN DOMENIUL PROBLEMEI
2.1 Introducere în ecosistemul aplicațiilor de fidelizare pentru cafenele
În ultimul deciniu o data cu digitalizarea in masă a sectorul HoReCa, mai bine zis industria cafenelelor a început implimentarea aplicațiilor mobile preconizate dezvotării unui sistem de loialitate pentru clienții acestora. Evoluția tehnlogică a determinat confluența mai multor factori: creșterea numărului de plăți apple pay sau google play realizate de pe un dispozitiv   mobil, modifiecarea comporatamentului. Consumatorilor către plăți de tip cash și creșterea numărului de subscribții lunare. 
În urma analizării ecosistemelor de aplicații mobile utilizate pentru înlocuirea serviciilor tradiționale am stabilit  patru categorii pricipale:

Soluții pentru o anumită nișă specifică cafenelelor;
Platforme universale care implică standardizarea mai multor furnizori;
Portofel digital cu funcționalități  de loialitate;
Soluții hibride  care combină servicii financiare cu prpgrame de fidelizare.

Progresul acestui sector poate fi caracterizat în trei faze distincte. Prima fază(2010-2015) constă în digitilizarea simplă a cardurilor de loialitate simple lipsită de funcționalități avansate de exemplu:cardurile de fidelizare de la supermarket.  A doua fază(2015-2020) – a venit cu integrarea sistemlor de plăți digitale. Faza actuală(2020 – prezent) se bazează pe dezvoltarea tehnologii pentru personalizarea experienției utilizatorului prin algoritmi de machine learning și  realizarea ecosistemelor care interconectează mai multe servicii.

Pentru a arăta necesitatea și uitilitatea aplicației ,,CoffeeShare’’  și a demonstra contribuția în domeniu, am realizat o analiză detaliată, comparatică pentru șase aplicații existente pe piață. Am ales aceste aplicații pe baza unor criterii precum: numarul de utilizatori activi, funcționalitățile oferite, tehnologiile utilizate, nivelul de securitate și gradul de inovare pentru experiența utilizatorului.

2.2 Starbucks Mobile App - Standardul industriei pentru aplicații dedicate
Aplicația mobilă Starbucks reprezintă unul dintre cele mai mature și adoptate sisteme de fidelizare digitală din industria cafenelelor, servind ca benchmark pentru funcționalitățile considerate esențiale în acest domeniu. Cu peste 31 de milioane de utilizatori activi lunar și o penetrare de aproximativ 50% dintre clienții Starbucks din SUA, această aplicație demonstrează potențialul transformativ al tehnologiilor mobile în retail [1].

Functionalități principale și arhitectura sistemului de rewards
Sistemul Starbucks utilizează un model complex de comandă online care permite utilizatorilor să plaseze din timp comenzi cu până la 24 ore anticipate, pot să efectueze plăți digitale prin diferite modalități și să adune puncta prin sistemul Starbucks Rewards. Algoritmul de recompensare folosește o conversie dinamică de 2 stele pentru fiecare dolar cheltuit, cu posibilitatea de a fi recompensat mai bine dacă ai un istoric de consum mai mare.

Aplicația integrează funcționalități de stocare securizată cu informații în timp real despre disponibilitatea produselor, timpul de așteptare estimate și orele de lucru în care cafeneau este deschisă. Sistemul de inventar sincronizează datele între aplicația mobile și sistemele de vânzare care oferă informații exacte despre stocurile disponibile și prevenire în cazul în care produsele sunt indisponibile.

Sistemul de credite utilizează un model cu trei nivele de member(Welcome, Green, Gold), oferind servicii pe baza a câte puncte ai cu atât beneficiiele sunt mai mari. Conversia se bazează pe nivele fixe(25, 50, 150, 200 și 400 de stele) care pot fi folosite pentru achiziționarea de băuturi și diverse produse.

Argitectura tehnologică și implimentarea scalabilității
Starbbucks utilizează dezvoltarea nativă de aplicații separate pentruu IOS și Android, cu un backend care combină serviciile Amazon Web Services cu infrastructură proprie. Arhitectura microserviciilor permite optimizarea independentă a componentelor precum sistemul de plăți, sincronizarea inventarului și gestionarea comenzilor.

Se utilizează sisteme multiple de plată(carduri de credit,  Apple Pay, Google Pay, Starbucks Card) care gestionează aproximativ peste 8 milioane de tranzacții săptămânale.
Aplicația folosește machine learning pentru o personalizarea avansată pentru oferte și recomandări, utilizând algoritmi care depistează tipare de consum, preferințe de locație. Sistemul de notificări push este personalizat în funcție de geolocație și în funcție de alegerile care le faci.

Limitări identificate și oportunități de îmbunătățire
Soluția Starbucks are câteva puncte slabe principale:
•	Funcționează doar la Starbucks: Nu o poți folosi în afara rețelei lor.
•	Securitate slabă: Îi lipsesc măsuri de securitate avansate, cum ar fi SSL pinning (care ar proteja împotriva atacurilor pe rețele Wi-Fi publice). E vulnerabilă la interceptarea datelor.
•	Date limitate despre consum: Nu îți oferă statistici detaliate despre cât și ce ai consumat, doar istoricul tranzacțiilor. De asemenea, nu poți exporta aceste date pentru a le analiza tu.
•	Interacțiune socială slabă: Nu sunt multe opțiuni pentru a partaja experiențele cu prietenii sau pentru a te juca, ceea ce ar face aplicația mai distractivă și ar încuraja comunitatea.
•	Experiență de utilizare restrictivă: Aplicația arată cam veche și nu îți permite să o 
personalizezi. Nu poți avea mai multe conturi sau să o folosești ușor cu familia sau colegii.

2.3 Costa Coffee Club App - Abordarea simplificată a fidelizării
Costa Coffee Club App reprezintă o implementare mai simplă a conceptului de fidelizare digitală, concentrându-se pe funcționalitățile esențiale de colectare și utilizare a punctelor de loialitate, fără complexitatea sistemelor enterprise. Cu o bază de utilizatori de aproximativ 2.8 milioane în Marea Britanie, aplicația demonstrează eficiența unei abordări minimaliste în fidelizarea clientelei [2].
Aplicatia Costa este bazată pe un sistem de colectare a punctelor de fidelizare prin scanarea codurilor de bare, aceasta oferă utilizatorului o interfață simplificată care permite vizualizarea istoricului tranzacțiilor și a soldului.
Sistemul acesteia utilizează conversia directă a punctelor, pentru fiecare liră cheltuită utilizatorul primește un punct, cu praguri de recompensare stabilite la intervaluri refulate, astfel costul unei bauturi simple fiind de 8 puncte iar costul unei bauturi premium de 16 puncte.
Funcția de stocare securizată integrează informații de bază despre locații, ore de funcționare și contacte, cu condiția că aceasta nu sincronizează în timp real disponibilitatea produselor. Sistemul de oferte a acesteia se bazează pe campanii periodice cu puncte bonus sau reduceri, comportamentul personal al individului fiind ignorat in acest caz.

Aplicația implementează un system bazat pe nivele de loialitate, având două nivele : standart si VIP. Statutul VIP fiind obținut de către utilizator dupa colectarea timp de un an calendaristic a 200 de puncte de fidelitate. Beneficiile pachetului VIP includ puncta bonus ocazionale și acces prioritar la oferte limitate, fără alte diferențe semnificative.

Aspecte tehnologice și arhitectura simplificată
Implementarea tehnologică abordează un sistem de tip hibrid, care combină elemente de dezvoltare web cu funcționalități native care permit accesul la camera și notificări. Astfel costurile de dezvoltare sunt priotizate în detrimental performanței optime a aplicației, respectiv rezultând într-o experiență funcțională dar puțin optimizată pentru utilizator.

Deficiențe observate și limitări competitive

După ce am analizat aplicația Costa am constatat deficiențe semnificative în cee ce privește experiența utilizatorului și funționalitățile avansate. În cazul acestei aplicații lipsa sistemului de pre-comandă elimină unul dintre avantajele principale ale acesteia, forțând consumatorul să stea la coadă pentru a comanda cafea, și făcând aplicația mai puțin competitivă în comparație cu alte aplicații de pe piață, de exemplu aplicația Starbucks.

Totodată am constatat că interfața simplificată fără opțiunea de a o personaliza și lipsa măsurilor de securitate avansată a dus la limitatarea capacității de competiție cu soluții mai complexe. Astfel conveniența aplicației fiind redusă datorită faptului că utilizatorul nu are acces la plați fără cash precum Apple Pay sau Google Pay, utilizatorul fiind nevoit să transporte carduri bancare fizice sau cash pentru realizarea plaților, avantajul unui system de plăți digitale fiind preluat de alți competitori precum Starbucks. 

2.4 Pret A Manger App - Inovația prin serviciile de subscription
Aplicația Pret A Manger introduce un model inovator în industria cafenelelor prin inițierea unui sistem de subscripții care oferă acces la băuturi nelimitate pentru o taxă lunară fixă, reprezentând o modificare semnificativă în modelele tradiționale de stabilire a prețurilor și de fidelizare .
Model de business și funcționalități distinctive
Caracteristica specifică a aplicației Pret constă în modelul YourPret Coffee Subscription care permite utilizatorilor să consume până la 5 băuturi pe zi pentru o taxă lunară de £25. Acest model transformă relația transacțională într-una de serviciu, creând previzibilitate în veniturile furnizorilor și prețuri mai convenabile pentru consumatorii frecvenți.Aplicația implementează funcționalități de a plasa comanda în avans cu programare la intervale de timp  pentru a evita aglomerația, integrarea sistemelor de plată digitale pentru reîncărcări sau achitarea subscripțiilor, și un sistem inteligent de monitorizare a consumului care previne utilizarea excesivă a serviciului, prin forțarea limitelor de timp între plasarea comenzilor.Sistemul de recompense complementar subscripției oferă puncte bonus pentru achiziții suplimentare (alimente, băuturi premium) cu conversia: 1 punct per £1 cheltuit, 50 puncte = băutură gratuită. Aceast model strategic mixt optimizează venitul per client prin combinarea subscripției cu tranzacții suplimentare.
Implementare tehnologică și arhitectura real-time
Soluția tehnologică utilizată integrează elemente de Progressive Web App (PWA) cu funcționalități native, prezentând o abordare modernă față de dezvoltarea compatibilă pentru mai multe platforme, care reduce costurile de întreținere și accelerează lansarea noilor funcționalități. Sistemul de backend gestionează limitările de consum, eficient, implementând un sistem care sincronizează dispozitivele în timp real între toate locațiile. Arhitectura event-driven procesează tranzacțiile instantaneu și actualizează statusul subscripției în sub 200ms, asigurând o experiență continuă, fără întreruperi pentru utilizatori. Detecția de fraudă este realizată de algoritmi ce monitorizează modelele de consum pentru identificarea comportamentelor anormale (utilizarea aceluiași cont de mai mulți consumatori, consumul automatizat) și implementează măsuri preventive precum restricții temporare a contului și teste de verificare umană.
Limitări și oportunități de îmbunătățire
Principalele dezavantaje ale aplicației Pret includ disponibilitatea geografică limitată la Marea Britanie și  doar alte câteva orașe europene, și accentul exclusiv pe modelul de subscripție, care poate să nu fie atractiv pentru turiști sau utilizatorii ocazionali.Lipsa funcționalităților de personalizare și a unui sistem de analiză detaliată limitează potențialul de îmbunătățire a experienței utilizatorului. Aplicația nu oferă recomandări personalizate de produse sau perspective despre modul de consum individual, ratând oportunitatea de a maximiza gradul de satisfacție a clienților.Din perspectiva scalabilității, dependența de modelul subscripții creează dificultăți în diversificarea surselor de venit și poate reduce atractivitatea pentru utilizatorii ai cărui consum variază.
2.5 ESX (Edenred) - Ecosystem integrat de benefits și loyalty
Aplicația ESX, dezvoltată de grupul Edenred, reprezintă o abordare comprehensivă asupra managementului digital al pachetelor de beneficii a angajaților și programelor de fidelizare, integrând soluții pentru bilete de masă, carduri cadou și puncte de loialitate într-o singură platformă digitală.
Arhitectura multi-serviciu și integrarea enterprise
ESX implementează o arhitectură la nivel de companie care simultan oferă multiple tipuri de beneficii: bilete de masă electronice, vouchere de vacanță, carduri cadou corporative și programe de loialitate pentru comercianții parteneri. Această abordare de ansamblu permite utilizatorilor să gestioneze toate beneficiile oferite de companie dintr-o singură interfață, reducând friction-ul și crescând adoption rates.Sistemul  a fost integrat de peste 50.000 de parteneri comerciali în România, inclusiv de rețele majore de cafenele, restaurante și hypermarket-uri. Capacitatea de geo-targeting permite afișarea automată a partenerilor relevanți bazată pe locația utilizatorului, optimizând experiența de utilizare a beneficiilor.Aplicația implementează un sistem avansat de analiză a cheltuielilor care oferă utilizatorilor o perspectivă detaliate despre tipajul de cheltuieli, categorii de produse preferate și optimizări posibile pentru maximizarea valorii beneficiilor. Panoul de control personal afișează recomandări personalizate și proiecții de consum.
Protocoale de securitate și compliance financiar
Fiind o soluție de servicii financiare, ESX implementează protocoale de securitate conform standardelor PCI DSS și GDPR. Aplicația utilizează, pentru toate tranzacțiile, criptarea end-to-end, autentificare cu mai mulți factori obligatorie pentru acces, iar pentru detectarea comportamentului suspect: identificarea unică a dispozitivului. Sistemul de istoric al activităților  menține înregistrări ale tuturor tranzacțiilor și accesărilor pentru a se conforma cu reglementările financiare în vigoare. Salvările automate și disaster recovery procedures asigură menținerea continuității și protecția datelor utilizatorilor.Integrarea cu sistemele HR permite sincronizarea automată a beneficiilor de angajat și actualizarea în timp real a limitelor și eligibilității, eliminând procesele manuale și reducând erorile administrative.
Limitări în contextul aplicațiilor de cafenele
Deși ESX oferă opțiuni avansate pentru managementul avantajelor, experiența specifică aplicațiilor de cafenele este limitată la funcționalitățile de plată și localizare a cafenelelor. Aplicația nu oferă caracteristici specializate precum comandă prealabilă, navigarea meniurilor sau programe de loialitate dedicate industriei cafenelelor.Complexitatea interfeței, datorită multitudinii serviciilor oferite, poate fi copleșitoare și încărcată pentru utilizatorii care caută o experiență simplă și concentrată pe consumul de cafea. Timpul de navigare necesar pentru finalizarea unei tranzacții este semnificativ mai mare comparativ cu alte  aplicațiile dedicate specializate pe cafea.
2.6 7card – Platformă națională de abonamente multiservicii 
 
Aplicația 7card este un serviciu digital dezvoltat în România, se specializează în oferirea abonamentelor lunare pentru accesarea unei rețele mari de locații din domeniul sportului și sănătății, precum piscine, săli de fitness, studiouri de yoga sau dans, dar și birouri partajate sau activități de relaxare. 7card oferă o alternativă modernă si confortabilă abonamentelor individuale  clasice pentru centre sportive, având o acoperire națională și un număr de utilizatori în creștere continuă.
 
2.6.1 Modelul de funcționare  
Utilizatorul achită un abonament lunar fix. În funcție de pachetul ales, acesta îi oferă un număr limitat sau nelimitat de intrări în locațiile partenere.
Aplicația 7card nu este legata de domeniului cafenelelor, dar servește ca idee brută pentru schema de parteneriate și raționamentul abonamentelor din mai multe locații care poate fi folosite și în domeniul HoReCa. 
 
Funcționalitățile principale includ:  
Vizualizarea tuturor locațiilor din rețeaua parteneră disponibile din localitate; 
Obținerea accesului scanând un cod QR în incintă;  
Istoricul activităților și control asupra actualului abonament;
Utilizatorii au suport constant și integrare cu firmele care oferă angajaților beneficii (abonamente plătite de angajator);  
Posibilitatea filtrării după oraș, tipul de activitate, distanta fata de dispozitiv, programul de funcționare. 
 
2.6.2 Tehnologii utilizate  
Aplicație mobilă hibridă dezvoltată cu framework-uri cross-platform;  
Backend propriu cu actualizarea zilnica a bazelor de date;
Integrare cu Firebase Authentication și servicii de plată externă; 
Securizare prin token-uri la nivelul accesului; 
Geolocalizare prin API-uri native (Android/iOS); 
Notificarea utilizatorilor privind noutăți, activări și expirări.

2.6.3 Avantaje 
Permite accesul la totalitatea locațiilor din orașe diferite printr-un singur abonament; 
Flexibilitate pentru utilizator – posibilitatea de a-și alege activitatea si locația;
Parteneriate cu mii de locații din diferite domenii din România; 
Ușurința extinderii în alte domenii (de exemplu: cafenele, restaurante, birouri colaborative). 

2.6.4 Limitări în contextul cafenelelor 
	Aplicația este orientată pe acces de servicii, nu pe consum de produse;
	Nu sunt incluse funcționalități cum ar fi: 
•	istoric de comenzi; 
•	coș de cumpărături; 
•	personalizare a produselor;  
•	plată directă în aplicație pentru produse sau meniuri;  
	Lipsa unui sistem de recompensare sau de loialitate bazat pe frecvența folosirii serviciilor;  
	Nu permite un contact direct între partener (cafenea) și client (ex: oferte, mesaje, statistici).

2.6.5 Relevanță pentru CoffeeShare 
Deși 7card nu este un serviciu digital destinat domeniului HoReCa, structura sa modulară și logica accesului la mai multe locații inspiră abordarea CoffeeShare în ceea ce privește: 
•	abonamentele lunare cu acces în multiple rețele de cafenele; 
•	găsirea locațiilor disponibile și filtrarea acestora;  
•	parteneriatele descentralizate cu locații independente. 
CoffeeShare adaugă însă o dimensiune operațională originală – consumul efectiv al produselor, gestiunea creditelor (beans), integrarea cu POS-ul cafenelelor și funcționalități sociale – aspecte absente din modelul 7card.

2.7 Aplicații universale bazate pe conceptul de loialitate - Stocard și Fidme
Categoria aplicațiilor bazate pe conceptul de loialitate este reprezentată de Stocard și Fidme. Acestea au o abordare diferită prin centralizarea cardurilor de fidelitate a mai multor furnizori într-o singură platformă, focusându-se pe ușurarea gestionării cardurilor[6].
Funcționalități și abordarea mai multor branduri
Cu peste 50 de milioane de utilizatori in toata lumea, Stocard permite reținerea în format digital a peste 1.000 de tipuri de carduri de fidelitate, în care este inclusa o mare parte din rețelele internaționale de cafenele. Funcția de prima importanță este scanarea și afișarea codurilor de bare ale cardurilor, astfel, scapă oamenii de necesitatea transportării cardurilor fizice și ușurează portofelul. Fidme abordează similar situația, dar cu interesul geografic pe piața franceză și europeană. Aceasta implică notificări personalizate bazate pe locația utilizatorului și istoricul cumpărăturilor. Aplicația utilizează tehnologia OCR pentru scanarea automată a bonurilor și urmărirea achizițiilor pentru a oferi o analitică unică. Ambele platforme implementează notificări de reamintire pentru ofertele care expiră și notificări cu promoții potrivite in funcție de cumpărăturile de rutină. Sincronizarea serviciilor de cloud in baza de date asigură consistența datelor între mai multe dispozitive și realizarea unei copii de rezervă a cardurilor.

Avantajele aplicațiilor universale și efectele de rețea
Aplicațiile cu aspect de portofel digital pentru carduri de fidelitate sunt apreciate pentru simplitate si ușurința în utilizare. În loc să ai o mulțime de aplicații sau un portofel gros si incomod, plin de carduri de fidelitate pentru fiecare magazin sau cafenea, toate pot fi puse la îndemână în telefon. Utilizatorul unei astfel de aplicații nu mai trebuie să țină minte mai multe conturi sau reguli, totul este organizat în format digital.

Aceste aplicații devin mai utile pe măsură ce numărul de comercianți și utilizatori crește. Cu cât sunt mai mulți parteneri în rețea, cu atât devine mai convenabil pentru utilizator, iar valoarea pentru platformă crește. Un beneficiu ar fi și faptul că informațiile legate de achiziții pot fi analizate detaliat pentru a observa obiceiuri generale de consum.

Un alt avantaj este că toate magazinele din aplicație sunt reduse la o singură interfață. Acest lucru permite utilizatorilor să se obișnuiască mai rapid cu modul de funcționare și pot folosi aplicația ușor, indiferent de brand. Dacă sunt dispuși să acceseze aplicația la un magazin, le va fi natural să o folosească și pentru altul. Această obișnuință contribuie la sporirea folosirii aplicației și a programelor de fidelitate.
Limitări arhitecturale și funcționale
Analiza acestor aplicații relevă limitări semnificative în profunzimea integrării cu sistemele furnizorilor. Majoritatea implementărilor se limitează la read-only access la informații de base (sold puncte, istoric basic) fără posibilitatea accesării funcționalităților avansate specifice fiecărui retailer.Lipsa funcționalităților avansate precum pre-ordering, analize personalizate sau măsuri de securitate specifice limitează valoarea adăugată oferită utilizatorilor comparativ cu aplicațiile native ale retailerilor. Dependența de implementările existente ale furnizorilor împiedică inovația în domeniul experienței utilizatorului.Din perspectiva business model-ului, aceste aplicații se confruntă cu provocări în monetization dincolo de advertising și affiliate fees, limitând resources-urile disponibile pentru inovare și îmbunătățirea feature-urilor.
2.8 Analiza tehnologică comparativă și gap analysis
Stacks tehnologice și arhitecturi implementate
Analizând tehnologiile utilizate de aplicațiile evaluate, se observă o diversitate semnificativă în approach-urile adoptate. Starbucks și Costa utilizează dezvoltare nativă separată pentru iOS și Android, prioritizing performance și access la funcționalitățile complete ale platform-elor. Această abordare oferă experiență optimă dar implică costuri semnificative de development și maintenance.Pret A Manger adoptă o strategie hibridă PWA/native care balansează performance-ul cu cost efficiency. ESX și 7card, fiind soluții enterprise, utilizează arhitecturi complexe microservices cu multiple integration points și protocols de securitate avansați.Aplicațiile universale precum Stocard adoptă frameworks cross-platform (React Native, Flutter) pentru maximizing code reuse și accelerating time-to-market across platforms. Această alegere reflectă prioritizarea scalability-ului geografic față de deep platform integration.
Protocols de securitate și compliance
Analiza security implementations relevă disparități majore între aplicații. Soluțiile financiare (ESX, 7card) implementează standard enterprise security measures: SSL pinning, certificate transparency, device attestation și fraud detection algorithms.Aplicațiile dedicate cafenelelor prezintă security gaps semnificative, majoritatea neimplementând protection against man-in-the-middle attacks sau device integrity verification. Această vulnerabilitate poate compromite security-ul datelor personale și financiare ale utilizatorilor.CoffeeShare addressează aceste deficiențe prin implementation comprehensivă de security measures: SSL pinning, device security checks, code obfuscation și secure storage pentru informații sensibile.
3. BAZELE TEORETICE
3.1 Introducere în alegerile tehnologice personale
Când am început dezvoltarea aplicației CoffeeShare, primul lucru care m-a preocupat a fost alegerea unui stack tehnologic care să-mi permită să construiesc o aplicație robustă, sigură și scalabilă, dar în același timp să nu fiu limitat de complexitatea dezvoltării. După experiența acumulată în timpul facultății și prin proiectele personale anterioare, am realizat că cea mai bună abordare este să combin tehnologii moderne care au dovedit deja stabilitatea în producție.M-am orientat către un ecosistem tehnologic care să îmi ofere flexibilitatea dezvoltării cross-platform, fără a compromite performanța sau securitatea aplicației. Decizia de a folosi React Native ca framework principal a venit din experiența pozitivă pe care am avut-o cu React în proiectele web anterioare și din dorința de a evita duplicarea efortului pentru iOS și Android.Fiecare tehnologie pe care am ales-o a avut un motiv specific: performanța, siguranța, viteza de dezvoltare sau capacitatea de mentenanță pe termen lung. Am învățat că în dezvoltarea software, alegerea tehnologiilor nu trebuie să fie bazată doar pe popularitatea lor, ci pe cât de bine se potrivesc cu obiectivele specifice ale proiectului [1].
3.2 React Native și Expo - Fundamentul aplicației mele
React Native a fost alegerea naturală pentru mine, mai ales că eram deja familiarizat cu React din proiectele web pe care le-am dezvoltat anterior. Ce m-a impresionat cel mai mult la React Native este că îmi permite să scriu cod o singură dată și să obțin aplicații native pentru ambele platforme majore. Nu este doar o aplicație web îmbrăcată în native - componentele pe care le scriu sunt traduse în componente native reale ale fiecărei platforme.Expo SDK 53.0.11 mi-a simplificat enorm dezvoltarea prin oferirea unor module pre-construite pentru funcționalitățile complexe. În loc să învăț să scriu bridge-uri native pentru cameră, localizare sau autentificare biometrică, am putut folosi API-urile Expo care sunt deja optimizate și testate. Acest lucru mi-a permis să mă concentrez pe logica de business a aplicației și pe experiența utilizatorului, nu pe implementarea detaliată a funcționalităților de sistem.Am ales să folosesc Expo Router pentru navigare pentru că îmi place conceptul de file-based routing pe care l-am văzut în Next.js. Organizarea automată a ecranelor bazată pe structura de foldere mi-a făcut arhitectura aplicației mult mai clară și mai ușor de înțeles. Când adaug un fișier nou în folderul (mainUsers), acesta devine automat o rută accesibilă, ceea ce accelerează considerabil dezvoltarea [2].
3.3 TypeScript - Siguranța pe care o apreciez
Una dintre cele mai bune decizii pe care le-am luat în acest proiect a fost folosirea TypeScript în loc de JavaScript simplu. Venind dintr-o experiență cu limbajele tipizate din facultate, lipsa verificării tipurilor în JavaScript mă făcea să mă simt nesigur, mai ales când lucram cu structuri de date complexe.TypeScript mi-a oferit exact confortul de care aveam nevoie. Când definesc o interfață pentru User sau Cafe, știu exact ce proprietăți are fiecare obiect și ce tipuri de date pot folosi. Acest lucru m-a ajutat să evit multe bug-uri care ar fi apărut doar în runtime cu JavaScript clasic. De exemplu, când lucrez cu datele din Firebase, TypeScript mă avertizează dacă încerc să accesez o proprietate care nu există sau dacă fac o conversie incorectă de tip.Editor-ul meu (VS Code) îmi oferă autocompletare inteligentă și refactoring assistat datorită TypeScript. Când redenumesc o proprietate într-o interfață, toate utilizările sale din proiect sunt actualizate automat. Această funcționalitate mi-a economisit ore întregi de debugging și a făcut codul mult mai maintainable [3].
3.4 Firebase - Backend-ul pe care mă pot baza
Pentru backend am ales Firebase nu din lene, ci pentru că am realizat că dezvoltarea unei infrastructuri server proprii ar fi consumat o mare parte din timpul dedicat proiectului, fără a aduce valoare semnificativă pentru utilizatori. Firebase mi-a oferit exact ceea ce aveam nevoie: o infrastructură robustă, testată la scală de milioane de utilizatori Google.Firebase Authentication a fost salvarea mea când a venit vorba de implementarea sistemului de autentificare. În loc să îmi fac griji pentru stocarea sigură a parolelor, hash-ing, salt-ing și toate protocoalele de securitate asociate, Firebase gestionează toate acestea automat. Am putut implementa rapid autentificare cu email/parolă, Google Sign-In și chiar two-factor authentication fără să scriu o singură linie de cod backend.Cloud Firestore mi-a oferit o bază de date NoSQL care se sincronizează în timp real între toate device-urile. Această funcționalitate a fost crucială pentru aplicația mea, unde utilizatorii trebuie să vadă actualizări instant ale soldului de puncte sau ale comenzilor. Faptul că funcționează și offline și se sincronizează automat când se restabilește conexiunea a fost un bonus neașteptat care îmbunătățește semnificativ experiența utilizatorului.Firebase Cloud Storage mi-a rezolvat problema uploadului și servării imaginilor. Când un coffee shop încarcă poze cu produsele lor, imaginile sunt automat procesate, redimensionate pentru diferite screen-uri și servite prin CDN global pentru performanțe optimale [4].
3.5 Experiența utilizatorului prin tehnologii dedicate
Pentru funcționalitățile legate de hartă am integrat React Native Maps, care îmi oferă acces la hărțile native ale fiecărei platforme. Ce mi-a plăcut cel mai mult este că utilizatorii iOS văd Apple Maps (cu care sunt obișnuiți), iar cei de Android văd Google Maps, oferind o experiență familiară pe fiecare platformă.Expo Location mi-a simplificat implementarea funcționalităților de geolocation. Am putut implementa rapid găsirea cafenelelor apropiate și calcularea distanțelor fără să mă complicez cu API-urile native de locație ale fiecărei platforme. Sistemul gestionează automat permisiunile și oferă fallback-uri când GPS-ul nu este disponibil.Pentru animații am ales React Native Animatable pentru că îmi permite să creez tranziții fluide cu foarte puțin cod. Micro-interacțiunile sunt esențiale pentru o aplicație modernă - când un utilizator adaugă un produs în coș, animația subtilă de feedback îi confirmă că acțiunea a fost înregistrată. Aceste detalii mici fac diferența între o aplicație care se simte profesională și una care pare neterminată [5].
3.6 Securitatea - prioritatea mea numărul unu
Una dintre lecțiile importante pe care le-am învățat în timpul dezvoltării a fost că securitatea nu este ceva ce poți adăuga la sfârșit - trebuie gândită de la început. Pentru aplicația mea, care gestionează date personale și tranzacții financiare, am implementat multiple straturi de protecție.React Native SSL Pinning a fost primul meu nivel de protecție împotriva atacurilor man-in-the-middle. Acest lucru înseamnă că aplicația mea verifică că certificatele SSL ale serverului sunt exact cele pe care le aștept, nu acceptă certificate false chiar dacă par valid semnate.Expo Secure Store îmi stochează informațiile sensibile folosind Keychain pe iOS și Android Keystore pe Android. Aceste sisteme folosesc hardware security modules când sunt disponibile, oferind același nivel de securitate ca aplicațiile bancare. Token-urile de autentificare și alte informații critice nu sunt niciodată stocate în plain text.Am implementat și obfuscarea codului cu React Native Obfuscating Transformer pentru a îngreuna reverse engineering-ul aplicației. Deși codul JavaScript este interpretat, această măsură adăugată face mult mai dificilă extragerea logicii de business de către atacatori [6].
3.7 Monitorizarea și îmbunătățirea continuă
Pentru a înțelege cum funcționează aplicația în producție și pentru a identifica rapid problemele, am integrat Sentry pentru error tracking și performance monitoring. Această decizie s-a dovedit esențială în timpul testării - am putut identifica și fixa bug-uri care apăreau doar pe anumite device-uri sau în anumite condiții de network.Sentry îmi oferă stack trace-uri detaliate pentru fiecare crash, breadcrumbs care îmi arată ce acțiuni a făcut utilizatorul înainte de eroare și metrici de performanță pentru a identifica bottleneck-urile. Fără aceste informații, debugging-ul unei aplicații mobile ar fi fost un coșmar.Am implementat și analytics custom pentru a înțelege cum utilizează oamenii aplicația mea. Vreau să știu ce funcționalități sunt folosite cel mai mult, unde abandonează utilizatorii procesul de checkout și ce îmbunătățiri ar putea avea cel mai mare impact asupra experienței lor [7].
3.8 Funcționalități specifice pentru industria cafelei
Pentru scanarea codurilor QR am combinat Expo Camera cu Expo Barcode Scanner pentru a crea o experiență rapidă și fluidă. Utilizatorii pot scana codurile QR ale cafenelelor pentru a colecta puncte sau pentru a efectua plăți. Am optimizat sistemul să recunoască codurile QR chiar și în condiții de iluminare slabă sau când codul nu este perfect aliniat.React Native QRCode SVG îmi generează codurile QR pentru token-urile temporare de plată. Fiecare token QR expiră după 15 minute pentru securitate, și sistemul generează automat un cod nou când utilizatorul deschide ecranul de plată. Codurile sunt vectoriale, ceea ce înseamnă că rămân clare indiferent de dimensiunea ecranului.React Native Device Info îmi oferă informații despre device pentru a adapta experiența la capabilities-urile fiecărui telefon. Pe device-urile mai vechi reduc numărul de animații și optimizez performanța, iar pe cele high-end pot oferi o experiență vizuală mai bogată [8].
3.9 Reflecții asupra alegerii tehnologiilor
Privind retrospectiv la dezvoltarea CoffeeShare, sunt mulțumit de alegerile tehnologice pe care le-am făcut. React Native mi-a permis să dezvolt rapid o aplicație cross-platform fără a compromite performanța, iar Firebase mi-a oferit o infrastructură scalabilă fără headache-ul managementului de servere.TypeScript a fost investiția cu cel mai mare return - timpul petrecut învățând conceptele avansate de tipizare mi s-a întoRS în reducerea dramatică a bug-urilor și în îmbunătățirea vitezei de dezvoltare prin tooling superior.Cel mai important lucru pe care l-am învățat este că tehnologia este doar un mijloc pentru a rezolva probleme reale ale utilizatorilor. Indiferent cât de moderne sau performante sunt tehnologiile pe care le aleg, dacă nu rezolvă o problemă reală sau nu oferă o experiență superioară utilizatorilor, nu au valoare.Arhitectura modulară pe care am construit-o îmi permite să înlocuiesc individual componentele pe măsură ce tehnologiile evoluează, ceea ce înseamnă că aplicația poate evolua în timp fără a fi nevoie să refac totul de la zero [9].


Caracteristică	Starbucks	Costa Coffee	Pret A Manager	ESX	7card	Apps Universale	Coffee Share
Scanare cod QR	✓	✓	x	✓	✓	✓	✓
SSL Pinning	x	x	x	✓	✓	x	✓
Securitatea dispozitivului	x	x	x	✓	✓	x	✓
Suport multilingv	✓	x	x	✓	✓	✓	✓
Analiză în timp real	x	x	x	✓	✓	x	✓
Code obfuscation	x	x	x	✓	✓	x	✓
Suport offline	x	x	x	✓	x	x	✓
Multi-vendor support	x	x	x	✓	✓	✓	✓
Panou de control avansat	x	x	x	✓	✓	x	✓
Modele de abonament	x	x	✓	x	x	x	✓
Pre-ordering	✓	x	✓	x	x	x	✓
Machine Learning	✓	x	x	✓	✓	x	✓
Gamification	✓	x	x	x	✓	x	✓
Social Features	x	x	x	x	x	x	✓
Analiza cheltuielilor	x	x	x	✓	✓	x	✓
Sincronizare între platforme	✓	✓	✓	✓	✓	✓	✓
Integrare API	x	x	x	✓	✓	x	✓
Soluții White-Label	x	x	x	x	x	x	✓
Personalizarea brandului	x	x	x	x	x	x	✓
Advanced Reporting	x	x	x	✓	✓	x	✓




5. IMPLEMENTAREA
5.1 Ecranul de Welcome - Introducerea Aplicației
Prezentare funcționalitate:Ecranul de Welcome reprezintă prima interfață pe care utilizatorul o vede la deschiderea aplicației CoffeeShare. Această funcționalitate implementează un sistem de onboarding prin slide-uri interactive care prezintă caracteristicile principale ale aplicației: abonamente inteligente, acces facil, găsirea locațiilor și comunitatea utilizatorilor. Ecranul folosește un design modern cu imagini de fundal și navigare prin gesturi swipe.












2. ANALIZA STADIULUI ACTUAL ÎN DOMENIUL PROBLEMEI
2.1 Introducere în ecosistemul aplicațiilor de fidelizare pentru cafenele
În ultimul deciniu o data cu digitalizarea in masă a sectorul HoReCa, mai bine zis industria cafenelelor a început implimentarea aplicațiilor mobile preconizate dezvotării unui sistem de loialitate pentru clienții acestora. Evoluția tehnlogică a determinat confluența mai multor factori: creșterea numărului de plăți apple pay sau google play realizate de pe un dispozitiv   mobil, modifiecarea comporatamentului. Consumatorilor către plăți de tip cash și creșterea numărului de subscribții lunare. 
În urma analizării ecosistemelor de aplicații mobile utilizate pentru înlocuirea serviciilor tradiționale am stabilit  patru categorii pricipale:

Soluții pentru o anumită nișă specifică cafenelelor;
Platforme universale care implică standardizarea mai multor furnizori;
Portofel digital cu funcționalități  de loialitate;
Soluții hibride  care combină servicii financiare cu prpgrame de fidelizare.

Progresul acestui sector poate fi caracterizat în trei faze distincte. Prima fază(2010-2015) constă în digitilizarea simplă a cardurilor de loialitate simple lipsită de funcționalități avansate de exemplu:cardurile de fidelizare de la supermarket.  A doua fază(2015-2020) – a venit cu integrarea sistemlor de plăți digitale. Faza actuală(2020 – prezent) se bazează pe dezvoltarea tehnologii pentru personalizarea experienției utilizatorului prin algoritmi de machine learning și  realizarea ecosistemelor care interconectează mai multe servicii.

Pentru a arăta necesitatea și uitilitatea aplicației ,,CoffeeShare’’  și a demonstra contribuția în domeniu, am realizat o analiză detaliată, comparatică pentru șase aplicații existente pe piață. Am ales aceste aplicații pe baza unor criterii precum: numarul de utilizatori activi, funcționalitățile oferite, tehnologiile utilizate, nivelul de securitate și gradul de inovare pentru experiența utilizatorului.

2.2 Starbucks Mobile App - Standardul industriei pentru aplicații dedicate
Aplicația mobilă Starbucks reprezintă unul dintre cele mai mature și adoptate sisteme de fidelizare digitală din industria cafenelelor, servind ca benchmark pentru funcționalitățile considerate esențiale în acest domeniu. Cu peste 31 de milioane de utilizatori activi lunar și o penetrare de aproximativ 50% dintre clienții Starbucks din SUA, această aplicație demonstrează potențialul transformativ al tehnologiilor mobile în retail [1].

Functionalități principale și arhitectura sistemului de rewards
Sistemul Starbucks utilizează un model complex de comandă online care permite utilizatorilor să plaseze din timp comenzi cu până la 24 ore anticipate, pot să efectueze plăți digitale prin diferite modalități și să adune puncta prin sistemul Starbucks Rewards. Algoritmul de recompensare folosește o conversie dinamică de 2 stele pentru fiecare dolar cheltuit, cu posibilitatea de a fi recompensat mai bine dacă ai un istoric de consum mai mare.

Aplicația integrează funcționalități de stocare securizată cu informații în timp real despre disponibilitatea produselor, timpul de așteptare estimate și orele de lucru în care cafeneau este deschisă. Sistemul de inventar sincronizează datele între aplicația mobile și sistemele de vânzare care oferă informații exacte despre stocurile disponibile și prevenire în cazul în care produsele sunt indisponibile.

Sistemul de credite utilizează un model cu trei nivele de member(Welcome, Green, Gold), oferind servicii pe baza a câte puncte ai cu atât beneficiiele sunt mai mari. Conversia se bazează pe nivele fixe(25, 50, 150, 200 și 400 de stele) care pot fi folosite pentru achiziționarea de băuturi și diverse produse.

Argitectura tehnologică și implimentarea scalabilității
Starbbucks utilizează dezvoltarea nativă de aplicații separate pentruu IOS și Android, cu un backend care combină serviciile Amazon Web Services cu infrastructură proprie. Arhitectura microserviciilor permite optimizarea independentă a componentelor precum sistemul de plăți, sincronizarea inventarului și gestionarea comenzilor.

Se utilizează sisteme multiple de plată(carduri de credit,  Apple Pay, Google Pay, Starbucks Card) care gestionează aproximativ peste 8 milioane de tranzacții săptămânale.
Aplicația folosește machine learning pentru o personalizarea avansată pentru oferte și recomandări, utilizând algoritmi care depistează tipare de consum, preferințe de locație. Sistemul de notificări push este personalizat în funcție de geolocație și în funcție de alegerile care le faci.

Limitări identificate și oportunități de îmbunătățire
Soluția Starbucks are câteva puncte slabe principale:
•	Funcționează doar la Starbucks: Nu o poți folosi în afara rețelei lor.
•	Securitate slabă: Îi lipsesc măsuri de securitate avansate, cum ar fi SSL pinning (care ar proteja împotriva atacurilor pe rețele Wi-Fi publice). E vulnerabilă la interceptarea datelor.
•	Date limitate despre consum: Nu îți oferă statistici detaliate despre cât și ce ai consumat, doar istoricul tranzacțiilor. De asemenea, nu poți exporta aceste date pentru a le analiza tu.
•	Interacțiune socială slabă: Nu sunt multe opțiuni pentru a partaja experiențele cu prietenii sau pentru a te juca, ceea ce ar face aplicația mai distractivă și ar încuraja comunitatea.
•	Experiență de utilizare restrictivă: Aplicația arată cam veche și nu îți permite să o 
personalizezi. Nu poți avea mai multe conturi sau să o folosești ușor cu familia sau colegii.

2.3 Costa Coffee Club App - Abordarea simplificată a fidelizării
Costa Coffee Club App reprezintă o implementare mai simplă a conceptului de fidelizare digitală, concentrându-se pe funcționalitățile esențiale de colectare și utilizare a punctelor de loialitate, fără complexitatea sistemelor enterprise. Cu o bază de utilizatori de aproximativ 2.8 milioane în Marea Britanie, aplicația demonstrează eficiența unei abordări minimaliste în fidelizarea clientelei [2].
Aplicatia Costa este bazată pe un sistem de colectare a punctelor de fidelizare prin scanarea codurilor de bare, aceasta oferă utilizatorului o interfață simplificată care permite vizualizarea istoricului tranzacțiilor și a soldului.
Sistemul acesteia utilizează conversia directă a punctelor, pentru fiecare liră cheltuită utilizatorul primește un punct, cu praguri de recompensare stabilite la intervaluri refulate, astfel costul unei bauturi simple fiind de 8 puncte iar costul unei bauturi premium de 16 puncte.
Funcția de stocare securizată integrează informații de bază despre locații, ore de funcționare și contacte, cu condiția că aceasta nu sincronizează în timp real disponibilitatea produselor. Sistemul de oferte a acesteia se bazează pe campanii periodice cu puncte bonus sau reduceri, comportamentul personal al individului fiind ignorat in acest caz.

Aplicația implementează un system bazat pe nivele de loialitate, având două nivele : standart si VIP. Statutul VIP fiind obținut de către utilizator dupa colectarea timp de un an calendaristic a 200 de puncte de fidelitate. Beneficiile pachetului VIP includ puncta bonus ocazionale și acces prioritar la oferte limitate, fără alte diferențe semnificative.

Aspecte tehnologice și arhitectura simplificată
Implementarea tehnologică abordează un sistem de tip hibrid, care combină elemente de dezvoltare web cu funcționalități native care permit accesul la camera și notificări. Astfel costurile de dezvoltare sunt priotizate în detrimental performanței optime a aplicației, respectiv rezultând într-o experiență funcțională dar puțin optimizată pentru utilizator.

Deficiențe observate și limitări competitive

După ce am analizat aplicația Costa am constatat deficiențe semnificative în cee ce privește experiența utilizatorului și funționalitățile avansate. În cazul acestei aplicații lipsa sistemului de pre-comandă elimină unul dintre avantajele principale ale acesteia, forțând consumatorul să stea la coadă pentru a comanda cafea, și făcând aplicația mai puțin competitivă în comparație cu alte aplicații de pe piață, de exemplu aplicația Starbucks.

Totodată am constatat că interfața simplificată fără opțiunea de a o personaliza și lipsa măsurilor de securitate avansată a dus la limitatarea capacității de competiție cu soluții mai complexe. Astfel conveniența aplicației fiind redusă datorită faptului că utilizatorul nu are acces la plați fără cash precum Apple Pay sau Google Pay, utilizatorul fiind nevoit să transporte carduri bancare fizice sau cash pentru realizarea plaților, avantajul unui system de plăți digitale fiind preluat de alți competitori precum Starbucks. 

2.4 Pret A Manger App - Inovația prin serviciile de subscription
Aplicația Pret A Manger introduce un model inovator în industria cafenelelor prin inițierea unui sistem de subscripții care oferă acces la băuturi nelimitate pentru o taxă lunară fixă, reprezentând o modificare semnificativă în modelele tradiționale de stabilire a prețurilor și de fidelizare .
Model de business și funcționalități distinctive
Caracteristica specifică a aplicației Pret constă în modelul YourPret Coffee Subscription care permite utilizatorilor să consume până la 5 băuturi pe zi pentru o taxă lunară de £25. Acest model transformă relația transacțională într-una de serviciu, creând previzibilitate în veniturile furnizorilor și prețuri mai convenabile pentru consumatorii frecvenți.Aplicația implementează funcționalități de a plasa comanda în avans cu programare la intervale de timp  pentru a evita aglomerația, integrarea sistemelor de plată digitale pentru reîncărcări sau achitarea subscripțiilor, și un sistem inteligent de monitorizare a consumului care previne utilizarea excesivă a serviciului, prin forțarea limitelor de timp între plasarea comenzilor.Sistemul de recompense complementar subscripției oferă puncte bonus pentru achiziții suplimentare (alimente, băuturi premium) cu conversia: 1 punct per £1 cheltuit, 50 puncte = băutură gratuită. Aceast model strategic mixt optimizează venitul per client prin combinarea subscripției cu tranzacții suplimentare.
Implementare tehnologică și arhitectura real-time
Soluția tehnologică utilizată integrează elemente de Progressive Web App (PWA) cu funcționalități native, prezentând o abordare modernă față de dezvoltarea compatibilă pentru mai multe platforme, care reduce costurile de întreținere și accelerează lansarea noilor funcționalități. Sistemul de backend gestionează limitările de consum, eficient, implementând un sistem care sincronizează dispozitivele în timp real între toate locațiile. Arhitectura event-driven procesează tranzacțiile instantaneu și actualizează statusul subscripției în sub 200ms, asigurând o experiență continuă, fără întreruperi pentru utilizatori. Detecția de fraudă este realizată de algoritmi ce monitorizează modelele de consum pentru identificarea comportamentelor anormale (utilizarea aceluiași cont de mai mulți consumatori, consumul automatizat) și implementează măsuri preventive precum restricții temporare a contului și teste de verificare umană.
Limitări și oportunități de îmbunătățire
Principalele dezavantaje ale aplicației Pret includ disponibilitatea geografică limitată la Marea Britanie și  doar alte câteva orașe europene, și accentul exclusiv pe modelul de subscripție, care poate să nu fie atractiv pentru turiști sau utilizatorii ocazionali.Lipsa funcționalităților de personalizare și a unui sistem de analiză detaliată limitează potențialul de îmbunătățire a experienței utilizatorului. Aplicația nu oferă recomandări personalizate de produse sau perspective despre modul de consum individual, ratând oportunitatea de a maximiza gradul de satisfacție a clienților.Din perspectiva scalabilității, dependența de modelul subscripții creează dificultăți în diversificarea surselor de venit și poate reduce atractivitatea pentru utilizatorii ai cărui consum variază.
2.5 ESX (Edenred) - Ecosystem integrat de benefits și loyalty
Aplicația ESX, dezvoltată de grupul Edenred, reprezintă o abordare comprehensivă asupra managementului digital al pachetelor de beneficii a angajaților și programelor de fidelizare, integrând soluții pentru bilete de masă, carduri cadou și puncte de loialitate într-o singură platformă digitală.
Arhitectura multi-serviciu și integrarea enterprise
ESX implementează o arhitectură la nivel de companie care simultan oferă multiple tipuri de beneficii: bilete de masă electronice, vouchere de vacanță, carduri cadou corporative și programe de loialitate pentru comercianții parteneri. Această abordare de ansamblu permite utilizatorilor să gestioneze toate beneficiile oferite de companie dintr-o singură interfață, reducând friction-ul și crescând adoption rates.Sistemul  a fost integrat de peste 50.000 de parteneri comerciali în România, inclusiv de rețele majore de cafenele, restaurante și hypermarket-uri. Capacitatea de geo-targeting permite afișarea automată a partenerilor relevanți bazată pe locația utilizatorului, optimizând experiența de utilizare a beneficiilor.Aplicația implementează un sistem avansat de analiză a cheltuielilor care oferă utilizatorilor o perspectivă detaliate despre tipajul de cheltuieli, categorii de produse preferate și optimizări posibile pentru maximizarea valorii beneficiilor. Panoul de control personal afișează recomandări personalizate și proiecții de consum.
Protocoale de securitate și compliance financiar
Fiind o soluție de servicii financiare, ESX implementează protocoale de securitate conform standardelor PCI DSS și GDPR. Aplicația utilizează, pentru toate tranzacțiile, criptarea end-to-end, autentificare cu mai mulți factori obligatorie pentru acces, iar pentru detectarea comportamentului suspect: identificarea unică a dispozitivului. Sistemul de istoric al activităților  menține înregistrări ale tuturor tranzacțiilor și accesărilor pentru a se conforma cu reglementările financiare în vigoare. Salvările automate și disaster recovery procedures asigură menținerea continuității și protecția datelor utilizatorilor.Integrarea cu sistemele HR permite sincronizarea automată a beneficiilor de angajat și actualizarea în timp real a limitelor și eligibilității, eliminând procesele manuale și reducând erorile administrative.
Limitări în contextul aplicațiilor de cafenele
Deși ESX oferă opțiuni avansate pentru managementul avantajelor, experiența specifică aplicațiilor de cafenele este limitată la funcționalitățile de plată și localizare a cafenelelor. Aplicația nu oferă caracteristici specializate precum comandă prealabilă, navigarea meniurilor sau programe de loialitate dedicate industriei cafenelelor.Complexitatea interfeței, datorită multitudinii serviciilor oferite, poate fi copleșitoare și încărcată pentru utilizatorii care caută o experiență simplă și concentrată pe consumul de cafea. Timpul de navigare necesar pentru finalizarea unei tranzacții este semnificativ mai mare comparativ cu alte  aplicațiile dedicate specializate pe cafea.
2.6 7card – Platformă națională de abonamente multiservicii 
 
Aplicația 7card este un serviciu digital dezvoltat în România, se specializează în oferirea abonamentelor lunare pentru accesarea unei rețele mari de locații din domeniul sportului și sănătății, precum piscine, săli de fitness, studiouri de yoga sau dans, dar și birouri partajate sau activități de relaxare. 7card oferă o alternativă modernă si confortabilă abonamentelor individuale  clasice pentru centre sportive, având o acoperire națională și un număr de utilizatori în creștere continuă.
 
2.6.1 Modelul de funcționare  
Utilizatorul achită un abonament lunar fix. În funcție de pachetul ales, acesta îi oferă un număr limitat sau nelimitat de intrări în locațiile partenere.
Aplicația 7card nu este legata de domeniului cafenelelor, dar servește ca idee brută pentru schema de parteneriate și raționamentul abonamentelor din mai multe locații care poate fi folosite și în domeniul HoReCa. 
 
Funcționalitățile principale includ:  
Vizualizarea tuturor locațiilor din rețeaua parteneră disponibile din localitate; 
Obținerea accesului scanând un cod QR în incintă;  
Istoricul activităților și control asupra actualului abonament;
Utilizatorii au suport constant și integrare cu firmele care oferă angajaților beneficii (abonamente plătite de angajator);  
Posibilitatea filtrării după oraș, tipul de activitate, distanta fata de dispozitiv, programul de funcționare. 
 
2.6.2 Tehnologii utilizate  
Aplicație mobilă hibridă dezvoltată cu framework-uri cross-platform;  
Backend propriu cu actualizarea zilnica a bazelor de date;
Integrare cu Firebase Authentication și servicii de plată externă; 
Securizare prin token-uri la nivelul accesului; 
Geolocalizare prin API-uri native (Android/iOS); 
Notificarea utilizatorilor privind noutăți, activări și expirări.

2.6.3 Avantaje 
Permite accesul la totalitatea locațiilor din orașe diferite printr-un singur abonament; 
Flexibilitate pentru utilizator – posibilitatea de a-și alege activitatea si locația;
Parteneriate cu mii de locații din diferite domenii din România; 
Ușurința extinderii în alte domenii (de exemplu: cafenele, restaurante, birouri colaborative). 

2.6.4 Limitări în contextul cafenelelor 
	Aplicația este orientată pe acces de servicii, nu pe consum de produse;
	Nu sunt incluse funcționalități cum ar fi: 
•	istoric de comenzi; 
•	coș de cumpărături; 
•	personalizare a produselor;  
•	plată directă în aplicație pentru produse sau meniuri;  
	Lipsa unui sistem de recompensare sau de loialitate bazat pe frecvența folosirii serviciilor;  
	Nu permite un contact direct între partener (cafenea) și client (ex: oferte, mesaje, statistici).

2.6.5 Relevanță pentru CoffeeShare 
Deși 7card nu este un serviciu digital destinat domeniului HoReCa, structura sa modulară și logica accesului la mai multe locații inspiră abordarea CoffeeShare în ceea ce privește: 
•	abonamentele lunare cu acces în multiple rețele de cafenele; 
•	găsirea locațiilor disponibile și filtrarea acestora;  
•	parteneriatele descentralizate cu locații independente. 
CoffeeShare adaugă însă o dimensiune operațională originală – consumul efectiv al produselor, gestiunea creditelor (beans), integrarea cu POS-ul cafenelelor și funcționalități sociale – aspecte absente din modelul 7card.

2.7 Aplicații universale bazate pe conceptul de loialitate - Stocard și Fidme
Categoria aplicațiilor bazate pe conceptul de loialitate este reprezentată de Stocard și Fidme. Acestea au o abordare diferită prin centralizarea cardurilor de fidelitate a mai multor furnizori într-o singură platformă, focusându-se pe ușurarea gestionării cardurilor[6].
Funcționalități și abordarea mai multor branduri
Cu peste 50 de milioane de utilizatori in toata lumea, Stocard permite reținerea în format digital a peste 1.000 de tipuri de carduri de fidelitate, în care este inclusa o mare parte din rețelele internaționale de cafenele. Funcția de prima importanță este scanarea și afișarea codurilor de bare ale cardurilor, astfel, scapă oamenii de necesitatea transportării cardurilor fizice și ușurează portofelul. Fidme abordează similar situația, dar cu interesul geografic pe piața franceză și europeană. Aceasta implică notificări personalizate bazate pe locația utilizatorului și istoricul cumpărăturilor. Aplicația utilizează tehnologia OCR pentru scanarea automată a bonurilor și urmărirea achizițiilor pentru a oferi o analitică unică. Ambele platforme implementează notificări de reamintire pentru ofertele care expiră și notificări cu promoții potrivite in funcție de cumpărăturile de rutină. Sincronizarea serviciilor de cloud in baza de date asigură consistența datelor între mai multe dispozitive și realizarea unei copii de rezervă a cardurilor.

Avantajele aplicațiilor universale și efectele de rețea
Aplicațiile cu aspect de portofel digital pentru carduri de fidelitate sunt apreciate pentru simplitate si ușurința în utilizare. În loc să ai o mulțime de aplicații sau un portofel gros si incomod, plin de carduri de fidelitate pentru fiecare magazin sau cafenea, toate pot fi puse la îndemână în telefon. Utilizatorul unei astfel de aplicații nu mai trebuie să țină minte mai multe conturi sau reguli, totul este organizat în format digital.

Aceste aplicații devin mai utile pe măsură ce numărul de comercianți și utilizatori crește. Cu cât sunt mai mulți parteneri în rețea, cu atât devine mai convenabil pentru utilizator, iar valoarea pentru platformă crește. Un beneficiu ar fi și faptul că informațiile legate de achiziții pot fi analizate detaliat pentru a observa obiceiuri generale de consum.

Un alt avantaj este că toate magazinele din aplicație sunt reduse la o singură interfață. Acest lucru permite utilizatorilor să se obișnuiască mai rapid cu modul de funcționare și pot folosi aplicația ușor, indiferent de brand. Dacă sunt dispuși să acceseze aplicația la un magazin, le va fi natural să o folosească și pentru altul. Această obișnuință contribuie la sporirea folosirii aplicației și a programelor de fidelitate.
Limitări arhitecturale și funcționale
Analiza acestor aplicații relevă limitări semnificative în profunzimea integrării cu sistemele furnizorilor. Majoritatea implementărilor se limitează la read-only access la informații de base (sold puncte, istoric basic) fără posibilitatea accesării funcționalităților avansate specifice fiecărui retailer.Lipsa funcționalităților avansate precum pre-ordering, analize personalizate sau măsuri de securitate specifice limitează valoarea adăugată oferită utilizatorilor comparativ cu aplicațiile native ale retailerilor. Dependența de implementările existente ale furnizorilor împiedică inovația în domeniul experienței utilizatorului.Din perspectiva business model-ului, aceste aplicații se confruntă cu provocări în monetization dincolo de advertising și affiliate fees, limitând resources-urile disponibile pentru inovare și îmbunătățirea feature-urilor.
2.8 Analiza tehnologică comparativă și gap analysis
Stacks tehnologice și arhitecturi implementate
Analizând tehnologiile utilizate de aplicațiile evaluate, se observă o diversitate semnificativă în approach-urile adoptate. Starbucks și Costa utilizează dezvoltare nativă separată pentru iOS și Android, prioritizing performance și access la funcționalitățile complete ale platform-elor. Această abordare oferă experiență optimă dar implică costuri semnificative de development și maintenance.Pret A Manger adoptă o strategie hibridă PWA/native care balansează performance-ul cu cost efficiency. ESX și 7card, fiind soluții enterprise, utilizează arhitecturi complexe microservices cu multiple integration points și protocols de securitate avansați.Aplicațiile universale precum Stocard adoptă frameworks cross-platform (React Native, Flutter) pentru maximizing code reuse și accelerating time-to-market across platforms. Această alegere reflectă prioritizarea scalability-ului geografic față de deep platform integration.
Protocols de securitate și compliance
Analiza security implementations relevă disparități majore între aplicații. Soluțiile financiare (ESX, 7card) implementează standard enterprise security measures: SSL pinning, certificate transparency, device attestation și fraud detection algorithms.Aplicațiile dedicate cafenelelor prezintă security gaps semnificative, majoritatea neimplementând protection against man-in-the-middle attacks sau device integrity verification. Această vulnerabilitate poate compromite security-ul datelor personale și financiare ale utilizatorilor.CoffeeShare addressează aceste deficiențe prin implementation comprehensivă de security measures: SSL pinning, device security checks, code obfuscation și secure storage pentru informații sensibile.
3. BAZELE TEORETICE
3.1 Introducere în alegerile tehnologice personale
Când am început dezvoltarea aplicației CoffeeShare, primul lucru care m-a preocupat a fost alegerea unui stack tehnologic care să-mi permită să construiesc o aplicație robustă, sigură și scalabilă, dar în același timp să nu fiu limitat de complexitatea dezvoltării. După experiența acumulată în timpul facultății și prin proiectele personale anterioare, am realizat că cea mai bună abordare este să combin tehnologii moderne care au dovedit deja stabilitatea în producție.M-am orientat către un ecosistem tehnologic care să îmi ofere flexibilitatea dezvoltării cross-platform, fără a compromite performanța sau securitatea aplicației. Decizia de a folosi React Native ca framework principal a venit din experiența pozitivă pe care am avut-o cu React în proiectele web anterioare și din dorința de a evita duplicarea efortului pentru iOS și Android.Fiecare tehnologie pe care am ales-o a avut un motiv specific: performanța, siguranța, viteza de dezvoltare sau capacitatea de mentenanță pe termen lung. Am învățat că în dezvoltarea software, alegerea tehnologiilor nu trebuie să fie bazată doar pe popularitatea lor, ci pe cât de bine se potrivesc cu obiectivele specifice ale proiectului [1].
3.2 React Native și Expo - Fundamentul aplicației mele
React Native a fost alegerea naturală pentru mine, mai ales că eram deja familiarizat cu React din proiectele web pe care le-am dezvoltat anterior. Ce m-a impresionat cel mai mult la React Native este că îmi permite să scriu cod o singură dată și să obțin aplicații native pentru ambele platforme majore. Nu este doar o aplicație web îmbrăcată în native - componentele pe care le scriu sunt traduse în componente native reale ale fiecărei platforme.Expo SDK 53.0.11 mi-a simplificat enorm dezvoltarea prin oferirea unor module pre-construite pentru funcționalitățile complexe. În loc să învăț să scriu bridge-uri native pentru cameră, localizare sau autentificare biometrică, am putut folosi API-urile Expo care sunt deja optimizate și testate. Acest lucru mi-a permis să mă concentrez pe logica de business a aplicației și pe experiența utilizatorului, nu pe implementarea detaliată a funcționalităților de sistem.Am ales să folosesc Expo Router pentru navigare pentru că îmi place conceptul de file-based routing pe care l-am văzut în Next.js. Organizarea automată a ecranelor bazată pe structura de foldere mi-a făcut arhitectura aplicației mult mai clară și mai ușor de înțeles. Când adaug un fișier nou în folderul (mainUsers), acesta devine automat o rută accesibilă, ceea ce accelerează considerabil dezvoltarea [2].
3.3 TypeScript - Siguranța pe care o apreciez
Una dintre cele mai bune decizii pe care le-am luat în acest proiect a fost folosirea TypeScript în loc de JavaScript simplu. Venind dintr-o experiență cu limbajele tipizate din facultate, lipsa verificării tipurilor în JavaScript mă făcea să mă simt nesigur, mai ales când lucram cu structuri de date complexe.TypeScript mi-a oferit exact confortul de care aveam nevoie. Când definesc o interfață pentru User sau Cafe, știu exact ce proprietăți are fiecare obiect și ce tipuri de date pot folosi. Acest lucru m-a ajutat să evit multe bug-uri care ar fi apărut doar în runtime cu JavaScript clasic. De exemplu, când lucrez cu datele din Firebase, TypeScript mă avertizează dacă încerc să accesez o proprietate care nu există sau dacă fac o conversie incorectă de tip.Editor-ul meu (VS Code) îmi oferă autocompletare inteligentă și refactoring assistat datorită TypeScript. Când redenumesc o proprietate într-o interfață, toate utilizările sale din proiect sunt actualizate automat. Această funcționalitate mi-a economisit ore întregi de debugging și a făcut codul mult mai maintainable [3].
3.4 Firebase - Backend-ul pe care mă pot baza
Pentru backend am ales Firebase nu din lene, ci pentru că am realizat că dezvoltarea unei infrastructuri server proprii ar fi consumat o mare parte din timpul dedicat proiectului, fără a aduce valoare semnificativă pentru utilizatori. Firebase mi-a oferit exact ceea ce aveam nevoie: o infrastructură robustă, testată la scală de milioane de utilizatori Google.Firebase Authentication a fost salvarea mea când a venit vorba de implementarea sistemului de autentificare. În loc să îmi fac griji pentru stocarea sigură a parolelor, hash-ing, salt-ing și toate protocoalele de securitate asociate, Firebase gestionează toate acestea automat. Am putut implementa rapid autentificare cu email/parolă, Google Sign-In și chiar two-factor authentication fără să scriu o singură linie de cod backend.Cloud Firestore mi-a oferit o bază de date NoSQL care se sincronizează în timp real între toate device-urile. Această funcționalitate a fost crucială pentru aplicația mea, unde utilizatorii trebuie să vadă actualizări instant ale soldului de puncte sau ale comenzilor. Faptul că funcționează și offline și se sincronizează automat când se restabilește conexiunea a fost un bonus neașteptat care îmbunătățește semnificativ experiența utilizatorului.Firebase Cloud Storage mi-a rezolvat problema uploadului și servării imaginilor. Când un coffee shop încarcă poze cu produsele lor, imaginile sunt automat procesate, redimensionate pentru diferite screen-uri și servite prin CDN global pentru performanțe optimale [4].
3.5 Experiența utilizatorului prin tehnologii dedicate
Pentru funcționalitățile legate de hartă am integrat React Native Maps, care îmi oferă acces la hărțile native ale fiecărei platforme. Ce mi-a plăcut cel mai mult este că utilizatorii iOS văd Apple Maps (cu care sunt obișnuiți), iar cei de Android văd Google Maps, oferind o experiență familiară pe fiecare platformă.Expo Location mi-a simplificat implementarea funcționalităților de geolocation. Am putut implementa rapid găsirea cafenelelor apropiate și calcularea distanțelor fără să mă complicez cu API-urile native de locație ale fiecărei platforme. Sistemul gestionează automat permisiunile și oferă fallback-uri când GPS-ul nu este disponibil.Pentru animații am ales React Native Animatable pentru că îmi permite să creez tranziții fluide cu foarte puțin cod. Micro-interacțiunile sunt esențiale pentru o aplicație modernă - când un utilizator adaugă un produs în coș, animația subtilă de feedback îi confirmă că acțiunea a fost înregistrată. Aceste detalii mici fac diferența între o aplicație care se simte profesională și una care pare neterminată [5].
3.6 Securitatea - prioritatea mea numărul unu
Una dintre lecțiile importante pe care le-am învățat în timpul dezvoltării a fost că securitatea nu este ceva ce poți adăuga la sfârșit - trebuie gândită de la început. Pentru aplicația mea, care gestionează date personale și tranzacții financiare, am implementat multiple straturi de protecție.React Native SSL Pinning a fost primul meu nivel de protecție împotriva atacurilor man-in-the-middle. Acest lucru înseamnă că aplicația mea verifică că certificatele SSL ale serverului sunt exact cele pe care le aștept, nu acceptă certificate false chiar dacă par valid semnate.Expo Secure Store îmi stochează informațiile sensibile folosind Keychain pe iOS și Android Keystore pe Android. Aceste sisteme folosesc hardware security modules când sunt disponibile, oferind același nivel de securitate ca aplicațiile bancare. Token-urile de autentificare și alte informații critice nu sunt niciodată stocate în plain text.Am implementat și obfuscarea codului cu React Native Obfuscating Transformer pentru a îngreuna reverse engineering-ul aplicației. Deși codul JavaScript este interpretat, această măsură adăugată face mult mai dificilă extragerea logicii de business de către atacatori [6].
3.7 Monitorizarea și îmbunătățirea continuă
Pentru a înțelege cum funcționează aplicația în producție și pentru a identifica rapid problemele, am integrat Sentry pentru error tracking și performance monitoring. Această decizie s-a dovedit esențială în timpul testării - am putut identifica și fixa bug-uri care apăreau doar pe anumite device-uri sau în anumite condiții de network.Sentry îmi oferă stack trace-uri detaliate pentru fiecare crash, breadcrumbs care îmi arată ce acțiuni a făcut utilizatorul înainte de eroare și metrici de performanță pentru a identifica bottleneck-urile. Fără aceste informații, debugging-ul unei aplicații mobile ar fi fost un coșmar.Am implementat și analytics custom pentru a înțelege cum utilizează oamenii aplicația mea. Vreau să știu ce funcționalități sunt folosite cel mai mult, unde abandonează utilizatorii procesul de checkout și ce îmbunătățiri ar putea avea cel mai mare impact asupra experienței lor [7].
3.8 Funcționalități specifice pentru industria cafelei
Pentru scanarea codurilor QR am combinat Expo Camera cu Expo Barcode Scanner pentru a crea o experiență rapidă și fluidă. Utilizatorii pot scana codurile QR ale cafenelelor pentru a colecta puncte sau pentru a efectua plăți. Am optimizat sistemul să recunoască codurile QR chiar și în condiții de iluminare slabă sau când codul nu este perfect aliniat.React Native QRCode SVG îmi generează codurile QR pentru token-urile temporare de plată. Fiecare token QR expiră după 15 minute pentru securitate, și sistemul generează automat un cod nou când utilizatorul deschide ecranul de plată. Codurile sunt vectoriale, ceea ce înseamnă că rămân clare indiferent de dimensiunea ecranului.React Native Device Info îmi oferă informații despre device pentru a adapta experiența la capabilities-urile fiecărui telefon. Pe device-urile mai vechi reduc numărul de animații și optimizez performanța, iar pe cele high-end pot oferi o experiență vizuală mai bogată [8].
3.9 Reflecții asupra alegerii tehnologiilor
Privind retrospectiv la dezvoltarea CoffeeShare, sunt mulțumit de alegerile tehnologice pe care le-am făcut. React Native mi-a permis să dezvolt rapid o aplicație cross-platform fără a compromite performanța, iar Firebase mi-a oferit o infrastructură scalabilă fără headache-ul managementului de servere.TypeScript a fost investiția cu cel mai mare return - timpul petrecut învățând conceptele avansate de tipizare mi s-a întoRS în reducerea dramatică a bug-urilor și în îmbunătățirea vitezei de dezvoltare prin tooling superior.Cel mai important lucru pe care l-am învățat este că tehnologia este doar un mijloc pentru a rezolva probleme reale ale utilizatorilor. Indiferent cât de moderne sau performante sunt tehnologiile pe care le aleg, dacă nu rezolvă o problemă reală sau nu oferă o experiență superioară utilizatorilor, nu au valoare.Arhitectura modulară pe care am construit-o îmi permite să înlocuiesc individual componentele pe măsură ce tehnologiile evoluează, ceea ce înseamnă că aplicația poate evolua în timp fără a fi nevoie să refac totul de la zero [9].


Caracteristică	Starbucks	Costa Coffee	Pret A Manager	ESX	7card	Apps Universale	Coffee Share
Scanare cod QR	✓	✓	x	✓	✓	✓	✓
SSL Pinning	x	x	x	✓	✓	x	✓
Securitatea dispozitivului	x	x	x	✓	✓	x	✓
Suport multilingv	✓	x	x	✓	✓	✓	✓
Analiză în timp real	x	x	x	✓	✓	x	✓
Code obfuscation	x	x	x	✓	✓	x	✓
Suport offline	x	x	x	✓	x	x	✓
Multi-vendor support	x	x	x	✓	✓	✓	✓
Panou de control avansat	x	x	x	✓	✓	x	✓
Modele de abonament	x	x	✓	x	x	x	✓
Pre-ordering	✓	x	✓	x	x	x	✓
Machine Learning	✓	x	x	✓	✓	x	✓
Gamification	✓	x	x	x	✓	x	✓
Social Features	x	x	x	x	x	x	✓
Analiza cheltuielilor	x	x	x	✓	✓	x	✓
Sincronizare între platforme	✓	✓	✓	✓	✓	✓	✓
Integrare API	x	x	x	✓	✓	x	✓
Soluții White-Label	x	x	x	x	x	x	✓
Personalizarea brandului	x	x	x	x	x	x	✓
Advanced Reporting	x	x	x	✓	✓	x	✓




5. IMPLEMENTAREA
5.1 Ecranul de Welcome - Introducerea Aplicației
Prezentare funcționalitate:Ecranul de Welcome reprezintă prima interfață pe care utilizatorul o vede la deschiderea aplicației CoffeeShare. Această funcționalitate implementează un sistem de onboarding prin slide-uri interactive care prezintă caracteristicile principale ale aplicației: abonamente inteligente, acces facil, găsirea locațiilor și comunitatea utilizatorilor. Ecranul folosește un design modern cu imagini de fundal și navigare prin gesturi swipe.












2. ANALIZA STADIULUI ACTUAL ÎN DOMENIUL PROBLEMEI
2.1 Introducere în ecosistemul aplicațiilor de fidelizare pentru cafenele
În ultimul deciniu o data cu digitalizarea in masă a sectorul HoReCa, mai bine zis industria cafenelelor a început implimentarea aplicațiilor mobile preconizate dezvotării unui sistem de loialitate pentru clienții acestora. Evoluția tehnlogică a determinat confluența mai multor factori: creșterea numărului de plăți apple pay sau google play realizate de pe un dispozitiv   mobil, modifiecarea comporatamentului. Consumatorilor către plăți de tip cash și creșterea numărului de subscribții lunare. 
În urma analizării ecosistemelor de aplicații mobile utilizate pentru înlocuirea serviciilor tradiționale am stabilit  patru categorii pricipale:

Soluții pentru o anumită nișă specifică cafenelelor;
Platforme universale care implică standardizarea mai multor furnizori;
Portofel digital cu funcționalități  de loialitate;
Soluții hibride  care combină servicii financiare cu prpgrame de fidelizare.

Progresul acestui sector poate fi caracterizat în trei faze distincte. Prima fază(2010-2015) constă în digitilizarea simplă a cardurilor de loialitate simple lipsită de funcționalități avansate de exemplu:cardurile de fidelizare de la supermarket.  A doua fază(2015-2020) – a venit cu integrarea sistemlor de plăți digitale. Faza actuală(2020 – prezent) se bazează pe dezvoltarea tehnologii pentru personalizarea experienției utilizatorului prin algoritmi de machine learning și  realizarea ecosistemelor care interconectează mai multe servicii.

Pentru a arăta necesitatea și uitilitatea aplicației ,,CoffeeShare’’  și a demonstra contribuția în domeniu, am realizat o analiză detaliată, comparatică pentru șase aplicații existente pe piață. Am ales aceste aplicații pe baza unor criterii precum: numarul de utilizatori activi, funcționalitățile oferite, tehnologiile utilizate, nivelul de securitate și gradul de inovare pentru experiența utilizatorului.

2.2 Starbucks Mobile App - Standardul industriei pentru aplicații dedicate
Aplicația mobilă Starbucks reprezintă unul dintre cele mai mature și adoptate sisteme de fidelizare digitală din industria cafenelelor, servind ca benchmark pentru funcționalitățile considerate esențiale în acest domeniu. Cu peste 31 de milioane de utilizatori activi lunar și o penetrare de aproximativ 50% dintre clienții Starbucks din SUA, această aplicație demonstrează potențialul transformativ al tehnologiilor mobile în retail [1].

Functionalități principale și arhitectura sistemului de rewards
Sistemul Starbucks utilizează un model complex de comandă online care permite utilizatorilor să plaseze din timp comenzi cu până la 24 ore anticipate, pot să efectueze plăți digitale prin diferite modalități și să adune puncta prin sistemul Starbucks Rewards. Algoritmul de recompensare folosește o conversie dinamică de 2 stele pentru fiecare dolar cheltuit, cu posibilitatea de a fi recompensat mai bine dacă ai un istoric de consum mai mare.

Aplicația integrează funcționalități de stocare securizată cu informații în timp real despre disponibilitatea produselor, timpul de așteptare estimate și orele de lucru în care cafeneau este deschisă. Sistemul de inventar sincronizează datele între aplicația mobile și sistemele de vânzare care oferă informații exacte despre stocurile disponibile și prevenire în cazul în care produsele sunt indisponibile.

Sistemul de credite utilizează un model cu trei nivele de member(Welcome, Green, Gold), oferind servicii pe baza a câte puncte ai cu atât beneficiiele sunt mai mari. Conversia se bazează pe nivele fixe(25, 50, 150, 200 și 400 de stele) care pot fi folosite pentru achiziționarea de băuturi și diverse produse.

Argitectura tehnologică și implimentarea scalabilității
Starbbucks utilizează dezvoltarea nativă de aplicații separate pentruu IOS și Android, cu un backend care combină serviciile Amazon Web Services cu infrastructură proprie. Arhitectura microserviciilor permite optimizarea independentă a componentelor precum sistemul de plăți, sincronizarea inventarului și gestionarea comenzilor.

Se utilizează sisteme multiple de plată(carduri de credit,  Apple Pay, Google Pay, Starbucks Card) care gestionează aproximativ peste 8 milioane de tranzacții săptămânale.
Aplicația folosește machine learning pentru o personalizarea avansată pentru oferte și recomandări, utilizând algoritmi care depistează tipare de consum, preferințe de locație. Sistemul de notificări push este personalizat în funcție de geolocație și în funcție de alegerile care le faci.

Limitări identificate și oportunități de îmbunătățire
Soluția Starbucks are câteva puncte slabe principale:
•	Funcționează doar la Starbucks: Nu o poți folosi în afara rețelei lor.
•	Securitate slabă: Îi lipsesc măsuri de securitate avansate, cum ar fi SSL pinning (care ar proteja împotriva atacurilor pe rețele Wi-Fi publice). E vulnerabilă la interceptarea datelor.
•	Date limitate despre consum: Nu îți oferă statistici detaliate despre cât și ce ai consumat, doar istoricul tranzacțiilor. De asemenea, nu poți exporta aceste date pentru a le analiza tu.
•	Interacțiune socială slabă: Nu sunt multe opțiuni pentru a partaja experiențele cu prietenii sau pentru a te juca, ceea ce ar face aplicația mai distractivă și ar încuraja comunitatea.
•	Experiență de utilizare restrictivă: Aplicația arată cam veche și nu îți permite să o 
personalizezi. Nu poți avea mai multe conturi sau să o folosești ușor cu familia sau colegii.

2.3 Costa Coffee Club App - Abordarea simplificată a fidelizării
Costa Coffee Club App reprezintă o implementare mai simplă a conceptului de fidelizare digitală, concentrându-se pe funcționalitățile esențiale de colectare și utilizare a punctelor de loialitate, fără complexitatea sistemelor enterprise. Cu o bază de utilizatori de aproximativ 2.8 milioane în Marea Britanie, aplicația demonstrează eficiența unei abordări minimaliste în fidelizarea clientelei [2].
Aplicatia Costa este bazată pe un sistem de colectare a punctelor de fidelizare prin scanarea codurilor de bare, aceasta oferă utilizatorului o interfață simplificată care permite vizualizarea istoricului tranzacțiilor și a soldului.
Sistemul acesteia utilizează conversia directă a punctelor, pentru fiecare liră cheltuită utilizatorul primește un punct, cu praguri de recompensare stabilite la intervaluri refulate, astfel costul unei bauturi simple fiind de 8 puncte iar costul unei bauturi premium de 16 puncte.
Funcția de stocare securizată integrează informații de bază despre locații, ore de funcționare și contacte, cu condiția că aceasta nu sincronizează în timp real disponibilitatea produselor. Sistemul de oferte a acesteia se bazează pe campanii periodice cu puncte bonus sau reduceri, comportamentul personal al individului fiind ignorat in acest caz.

Aplicația implementează un system bazat pe nivele de loialitate, având două nivele : standart si VIP. Statutul VIP fiind obținut de către utilizator dupa colectarea timp de un an calendaristic a 200 de puncte de fidelitate. Beneficiile pachetului VIP includ puncta bonus ocazionale și acces prioritar la oferte limitate, fără alte diferențe semnificative.

Aspecte tehnologice și arhitectura simplificată
Implementarea tehnologică abordează un sistem de tip hibrid, care combină elemente de dezvoltare web cu funcționalități native care permit accesul la camera și notificări. Astfel costurile de dezvoltare sunt priotizate în detrimental performanței optime a aplicației, respectiv rezultând într-o experiență funcțională dar puțin optimizată pentru utilizator.

Deficiențe observate și limitări competitive

După ce am analizat aplicația Costa am constatat deficiențe semnificative în cee ce privește experiența utilizatorului și funționalitățile avansate. În cazul acestei aplicații lipsa sistemului de pre-comandă elimină unul dintre avantajele principale ale acesteia, forțând consumatorul să stea la coadă pentru a comanda cafea, și făcând aplicația mai puțin competitivă în comparație cu alte aplicații de pe piață, de exemplu aplicația Starbucks.

Totodată am constatat că interfața simplificată fără opțiunea de a o personaliza și lipsa măsurilor de securitate avansată a dus la limitatarea capacității de competiție cu soluții mai complexe. Astfel conveniența aplicației fiind redusă datorită faptului că utilizatorul nu are acces la plați fără cash precum Apple Pay sau Google Pay, utilizatorul fiind nevoit să transporte carduri bancare fizice sau cash pentru realizarea plaților, avantajul unui system de plăți digitale fiind preluat de alți competitori precum Starbucks. 

2.4 Pret A Manger App - Inovația prin serviciile de subscription
Aplicația Pret A Manger introduce un model inovator în industria cafenelelor prin inițierea unui sistem de subscripții care oferă acces la băuturi nelimitate pentru o taxă lunară fixă, reprezentând o modificare semnificativă în modelele tradiționale de stabilire a prețurilor și de fidelizare .
Model de business și funcționalități distinctive
Caracteristica specifică a aplicației Pret constă în modelul YourPret Coffee Subscription care permite utilizatorilor să consume până la 5 băuturi pe zi pentru o taxă lunară de £25. Acest model transformă relația transacțională într-una de serviciu, creând previzibilitate în veniturile furnizorilor și prețuri mai convenabile pentru consumatorii frecvenți.Aplicația implementează funcționalități de a plasa comanda în avans cu programare la intervale de timp  pentru a evita aglomerația, integrarea sistemelor de plată digitale pentru reîncărcări sau achitarea subscripțiilor, și un sistem inteligent de monitorizare a consumului care previne utilizarea excesivă a serviciului, prin forțarea limitelor de timp între plasarea comenzilor.Sistemul de recompense complementar subscripției oferă puncte bonus pentru achiziții suplimentare (alimente, băuturi premium) cu conversia: 1 punct per £1 cheltuit, 50 puncte = băutură gratuită. Aceast model strategic mixt optimizează venitul per client prin combinarea subscripției cu tranzacții suplimentare.
Implementare tehnologică și arhitectura real-time
Soluția tehnologică utilizată integrează elemente de Progressive Web App (PWA) cu funcționalități native, prezentând o abordare modernă față de dezvoltarea compatibilă pentru mai multe platforme, care reduce costurile de întreținere și accelerează lansarea noilor funcționalități. Sistemul de backend gestionează limitările de consum, eficient, implementând un sistem care sincronizează dispozitivele în timp real între toate locațiile. Arhitectura event-driven procesează tranzacțiile instantaneu și actualizează statusul subscripției în sub 200ms, asigurând o experiență continuă, fără întreruperi pentru utilizatori. Detecția de fraudă este realizată de algoritmi ce monitorizează modelele de consum pentru identificarea comportamentelor anormale (utilizarea aceluiași cont de mai mulți consumatori, consumul automatizat) și implementează măsuri preventive precum restricții temporare a contului și teste de verificare umană.
Limitări și oportunități de îmbunătățire
Principalele dezavantaje ale aplicației Pret includ disponibilitatea geografică limitată la Marea Britanie și  doar alte câteva orașe europene, și accentul exclusiv pe modelul de subscripție, care poate să nu fie atractiv pentru turiști sau utilizatorii ocazionali.Lipsa funcționalităților de personalizare și a unui sistem de analiză detaliată limitează potențialul de îmbunătățire a experienței utilizatorului. Aplicația nu oferă recomandări personalizate de produse sau perspective despre modul de consum individual, ratând oportunitatea de a maximiza gradul de satisfacție a clienților.Din perspectiva scalabilității, dependența de modelul subscripții creează dificultăți în diversificarea surselor de venit și poate reduce atractivitatea pentru utilizatorii ai cărui consum variază.
2.5 ESX (Edenred) - Ecosystem integrat de benefits și loyalty
Aplicația ESX, dezvoltată de grupul Edenred, reprezintă o abordare comprehensivă asupra managementului digital al pachetelor de beneficii a angajaților și programelor de fidelizare, integrând soluții pentru bilete de masă, carduri cadou și puncte de loialitate într-o singură platformă digitală.
Arhitectura multi-serviciu și integrarea enterprise
ESX implementează o arhitectură la nivel de companie care simultan oferă multiple tipuri de beneficii: bilete de masă electronice, vouchere de vacanță, carduri cadou corporative și programe de loialitate pentru comercianții parteneri. Această abordare de ansamblu permite utilizatorilor să gestioneze toate beneficiile oferite de companie dintr-o singură interfață, reducând friction-ul și crescând adoption rates.Sistemul  a fost integrat de peste 50.000 de parteneri comerciali în România, inclusiv de rețele majore de cafenele, restaurante și hypermarket-uri. Capacitatea de geo-targeting permite afișarea automată a partenerilor relevanți bazată pe locația utilizatorului, optimizând experiența de utilizare a beneficiilor.Aplicația implementează un sistem avansat de analiză a cheltuielilor care oferă utilizatorilor o perspectivă detaliate despre tipajul de cheltuieli, categorii de produse preferate și optimizări posibile pentru maximizarea valorii beneficiilor. Panoul de control personal afișează recomandări personalizate și proiecții de consum.
Protocoale de securitate și compliance financiar
Fiind o soluție de servicii financiare, ESX implementează protocoale de securitate conform standardelor PCI DSS și GDPR. Aplicația utilizează, pentru toate tranzacțiile, criptarea end-to-end, autentificare cu mai mulți factori obligatorie pentru acces, iar pentru detectarea comportamentului suspect: identificarea unică a dispozitivului. Sistemul de istoric al activităților  menține înregistrări ale tuturor tranzacțiilor și accesărilor pentru a se conforma cu reglementările financiare în vigoare. Salvările automate și disaster recovery procedures asigură menținerea continuității și protecția datelor utilizatorilor.Integrarea cu sistemele HR permite sincronizarea automată a beneficiilor de angajat și actualizarea în timp real a limitelor și eligibilității, eliminând procesele manuale și reducând erorile administrative.
Limitări în contextul aplicațiilor de cafenele
Deși ESX oferă opțiuni avansate pentru managementul avantajelor, experiența specifică aplicațiilor de cafenele este limitată la funcționalitățile de plată și localizare a cafenelelor. Aplicația nu oferă caracteristici specializate precum comandă prealabilă, navigarea meniurilor sau programe de loialitate dedicate industriei cafenelelor.Complexitatea interfeței, datorită multitudinii serviciilor oferite, poate fi copleșitoare și încărcată pentru utilizatorii care caută o experiență simplă și concentrată pe consumul de cafea. Timpul de navigare necesar pentru finalizarea unei tranzacții este semnificativ mai mare comparativ cu alte  aplicațiile dedicate specializate pe cafea.
2.6 7card – Platformă națională de abonamente multiservicii 
 
Aplicația 7card este un serviciu digital dezvoltat în România, se specializează în oferirea abonamentelor lunare pentru accesarea unei rețele mari de locații din domeniul sportului și sănătății, precum piscine, săli de fitness, studiouri de yoga sau dans, dar și birouri partajate sau activități de relaxare. 7card oferă o alternativă modernă si confortabilă abonamentelor individuale  clasice pentru centre sportive, având o acoperire națională și un număr de utilizatori în creștere continuă.
 
2.6.1 Modelul de funcționare  
Utilizatorul achită un abonament lunar fix. În funcție de pachetul ales, acesta îi oferă un număr limitat sau nelimitat de intrări în locațiile partenere.
Aplicația 7card nu este legata de domeniului cafenelelor, dar servește ca idee brută pentru schema de parteneriate și raționamentul abonamentelor din mai multe locații care poate fi folosite și în domeniul HoReCa. 
 
Funcționalitățile principale includ:  
Vizualizarea tuturor locațiilor din rețeaua parteneră disponibile din localitate; 
Obținerea accesului scanând un cod QR în incintă;  
Istoricul activităților și control asupra actualului abonament;
Utilizatorii au suport constant și integrare cu firmele care oferă angajaților beneficii (abonamente plătite de angajator);  
Posibilitatea filtrării după oraș, tipul de activitate, distanta fata de dispozitiv, programul de funcționare. 
 
2.6.2 Tehnologii utilizate  
Aplicație mobilă hibridă dezvoltată cu framework-uri cross-platform;  
Backend propriu cu actualizarea zilnica a bazelor de date;
Integrare cu Firebase Authentication și servicii de plată externă; 
Securizare prin token-uri la nivelul accesului; 
Geolocalizare prin API-uri native (Android/iOS); 
Notificarea utilizatorilor privind noutăți, activări și expirări.

2.6.3 Avantaje 
Permite accesul la totalitatea locațiilor din orașe diferite printr-un singur abonament; 
Flexibilitate pentru utilizator – posibilitatea de a-și alege activitatea si locația;
Parteneriate cu mii de locații din diferite domenii din România; 
Ușurința extinderii în alte domenii (de exemplu: cafenele, restaurante, birouri colaborative). 

2.6.4 Limitări în contextul cafenelelor 
	Aplicația este orientată pe acces de servicii, nu pe consum de produse;
	Nu sunt incluse funcționalități cum ar fi: 
•	istoric de comenzi; 
•	coș de cumpărături; 
•	personalizare a produselor;  
•	plată directă în aplicație pentru produse sau meniuri;  
	Lipsa unui sistem de recompensare sau de loialitate bazat pe frecvența folosirii serviciilor;  
	Nu permite un contact direct între partener (cafenea) și client (ex: oferte, mesaje, statistici).

2.6.5 Relevanță pentru CoffeeShare 
Deși 7card nu este un serviciu digital destinat domeniului HoReCa, structura sa modulară și logica accesului la mai multe locații inspiră abordarea CoffeeShare în ceea ce privește: 
•	abonamentele lunare cu acces în multiple rețele de cafenele; 
•	găsirea locațiilor disponibile și filtrarea acestora;  
•	parteneriatele descentralizate cu locații independente. 
CoffeeShare adaugă însă o dimensiune operațională originală – consumul efectiv al produselor, gestiunea creditelor (beans), integrarea cu POS-ul cafenelelor și funcționalități sociale – aspecte absente din modelul 7card.

2.7 Aplicații universale bazate pe conceptul de loialitate - Stocard și Fidme
Categoria aplicațiilor bazate pe conceptul de loialitate este reprezentată de Stocard și Fidme. Acestea au o abordare diferită prin centralizarea cardurilor de fidelitate a mai multor furnizori într-o singură platformă, focusându-se pe ușurarea gestionării cardurilor[6].
Funcționalități și abordarea mai multor branduri
Cu peste 50 de milioane de utilizatori in toata lumea, Stocard permite reținerea în format digital a peste 1.000 de tipuri de carduri de fidelitate, în care este inclusa o mare parte din rețelele internaționale de cafenele. Funcția de prima importanță este scanarea și afișarea codurilor de bare ale cardurilor, astfel, scapă oamenii de necesitatea transportării cardurilor fizice și ușurează portofelul. Fidme abordează similar situația, dar cu interesul geografic pe piața franceză și europeană. Aceasta implică notificări personalizate bazate pe locația utilizatorului și istoricul cumpărăturilor. Aplicația utilizează tehnologia OCR pentru scanarea automată a bonurilor și urmărirea achizițiilor pentru a oferi o analitică unică. Ambele platforme implementează notificări de reamintire pentru ofertele care expiră și notificări cu promoții potrivite in funcție de cumpărăturile de rutină. Sincronizarea serviciilor de cloud in baza de date asigură consistența datelor între mai multe dispozitive și realizarea unei copii de rezervă a cardurilor.

Avantajele aplicațiilor universale și efectele de rețea
Aplicațiile cu aspect de portofel digital pentru carduri de fidelitate sunt apreciate pentru simplitate si ușurința în utilizare. În loc să ai o mulțime de aplicații sau un portofel gros si incomod, plin de carduri de fidelitate pentru fiecare magazin sau cafenea, toate pot fi puse la îndemână în telefon. Utilizatorul unei astfel de aplicații nu mai trebuie să țină minte mai multe conturi sau reguli, totul este organizat în format digital.

Aceste aplicații devin mai utile pe măsură ce numărul de comercianți și utilizatori crește. Cu cât sunt mai mulți parteneri în rețea, cu atât devine mai convenabil pentru utilizator, iar valoarea pentru platformă crește. Un beneficiu ar fi și faptul că informațiile legate de achiziții pot fi analizate detaliat pentru a observa obiceiuri generale de consum.

Un alt avantaj este că toate magazinele din aplicație sunt reduse la o singură interfață. Acest lucru permite utilizatorilor să se obișnuiască mai rapid cu modul de funcționare și pot folosi aplicația ușor, indiferent de brand. Dacă sunt dispuși să acceseze aplicația la un magazin, le va fi natural să o folosească și pentru altul. Această obișnuință contribuie la sporirea folosirii aplicației și a programelor de fidelitate.
Limitări arhitecturale și funcționale
Analiza acestor aplicații relevă limitări semnificative în profunzimea integrării cu sistemele furnizorilor. Majoritatea implementărilor se limitează la read-only access la informații de base (sold puncte, istoric basic) fără posibilitatea accesării funcționalităților avansate specifice fiecărui retailer.Lipsa funcționalităților avansate precum pre-ordering, analize personalizate sau măsuri de securitate specifice limitează valoarea adăugată oferită utilizatorilor comparativ cu aplicațiile native ale retailerilor. Dependența de implementările existente ale furnizorilor împiedică inovația în domeniul experienței utilizatorului.Din perspectiva business model-ului, aceste aplicații se confruntă cu provocări în monetization dincolo de advertising și affiliate fees, limitând resources-urile disponibile pentru inovare și îmbunătățirea feature-urilor.
2.8 Analiza tehnologică comparativă și gap analysis
Stacks tehnologice și arhitecturi implementate
Analizând tehnologiile utilizate de aplicațiile evaluate, se observă o diversitate semnificativă în approach-urile adoptate. Starbucks și Costa utilizează dezvoltare nativă separată pentru iOS și Android, prioritizing performance și access la funcționalitățile complete ale platform-elor. Această abordare oferă experiență optimă dar implică costuri semnificative de development și maintenance.Pret A Manger adoptă o strategie hibridă PWA/native care balansează performance-ul cu cost efficiency. ESX și 7card, fiind soluții enterprise, utilizează arhitecturi complexe microservices cu multiple integration points și protocols de securitate avansați.Aplicațiile universale precum Stocard adoptă frameworks cross-platform (React Native, Flutter) pentru maximizing code reuse și accelerating time-to-market across platforms. Această alegere reflectă prioritizarea scalability-ului geografic față de deep platform integration.
Protocols de securitate și compliance
Analiza security implementations relevă disparități majore între aplicații. Soluțiile financiare (ESX, 7card) implementează standard enterprise security measures: SSL pinning, certificate transparency, device attestation și fraud detection algorithms.Aplicațiile dedicate cafenelelor prezintă security gaps semnificative, majoritatea neimplementând protection against man-in-the-middle attacks sau device integrity verification. Această vulnerabilitate poate compromite security-ul datelor personale și financiare ale utilizatorilor.CoffeeShare addressează aceste deficiențe prin implementation comprehensivă de security measures: SSL pinning, device security checks, code obfuscation și secure storage pentru informații sensibile.
3. BAZELE TEORETICE
3.1 Introducere în alegerile tehnologice personale
Când am început dezvoltarea aplicației CoffeeShare, primul lucru care m-a preocupat a fost alegerea unui stack tehnologic care să-mi permită să construiesc o aplicație robustă, sigură și scalabilă, dar în același timp să nu fiu limitat de complexitatea dezvoltării. După experiența acumulată în timpul facultății și prin proiectele personale anterioare, am realizat că cea mai bună abordare este să combin tehnologii moderne care au dovedit deja stabilitatea în producție.M-am orientat către un ecosistem tehnologic care să îmi ofere flexibilitatea dezvoltării cross-platform, fără a compromite performanța sau securitatea aplicației. Decizia de a folosi React Native ca framework principal a venit din experiența pozitivă pe care am avut-o cu React în proiectele web anterioare și din dorința de a evita duplicarea efortului pentru iOS și Android.Fiecare tehnologie pe care am ales-o a avut un motiv specific: performanța, siguranța, viteza de dezvoltare sau capacitatea de mentenanță pe termen lung. Am învățat că în dezvoltarea software, alegerea tehnologiilor nu trebuie să fie bazată doar pe popularitatea lor, ci pe cât de bine se potrivesc cu obiectivele specifice ale proiectului [1].
3.2 React Native și Expo - Fundamentul aplicației mele







5.8 Sistemul de Checkout – Finalizarea comenzilor din coș
Descriere și motivație:Checkout-ul reprezintă momentul critic în care toate componentele aplicației se conectează: coșul de cumpărături, sistemul de beans, validarea abonamentului și generarea QR-ului pentru validare. Am vrut să creez un proces fluid și sigur, care să ofere utilizatorului încredere că comanda sa va fi procesată corect, iar partenerul să primească toate informațiile necesare.Cum funcționează și cum am implementat:Când utilizatorul apasă butonul de checkout din coș, aplicația execută o secvență complexă de validări și operații. Primul pas este verificarea că utilizatorul are suficiente beans în abonament pentru a acoperi totalul comenzii. Dacă nu, este informat clar câte beans îi lipsesc și poate alege să modifice comanda sau să își reînnoiască abonamentul.Dacă validarea trece, sistemul generează un QR token special de tip "checkout", diferit de token-urile normale de consum. Acest token conține în metadata sa toate produsele din coș, totalul de beans, numele cafenelei și alte informații relevante pentru procesarea comenzii.
Fragment de cod esențial:

  

Arhitectura checkout-ului și fluxul de date:Am structurat checkout-ul să urmeze o logică de pipeline, unde fiecare pas depinde de succesul celui anterior. Prima etapă este validarea locală: verific dacă coșul conține produse, dacă utilizatorul este autentificat și dacă abonamentul este activ. Apoi urmează validarea de business logic: compararea beans-urilor necesare cu cele disponibile.După validările preliminare, aplicația generează un token QR special prin QRService.generateCheckoutQRToken(). Acest token este diferit de cel normal prin faptul că include în metadata sa întreaga comandă, nu doar numărul de beans. De asemenea, este legat specific de cafeneaua unde a fost creat coșul, prevind astfel utilizarea greșită la alte locații.Securitate și validări:
•	Validare abonament: Verific în timp real statusul abonamentului prin useSubscriptionStatus hook
•	Validare coș: Mă asigur că coșul conține produse și că toate au prețuri valide în beans
•	Validare cafenea: Token-ul generat este legat de cafeneaua specifică din coș
•	Expirare rapidă: Token-ul de checkout expiră în 60 de secunde pentru securitate maximă
•	Prevenire dublare: Blochez butonul de checkout în timpul procesării pentru a preveni request-uri multiple
Integrare cu sistemul de QR și feedback utilizator:După generarea token-ului, utilizatorul este navigat automat la ecranul QR, dar într-un mod special "checkout". Ecranul afișează nu doar QR-ul, ci și un sumar al comenzii: numele cafenelei, totalul de beans și instrucțiuni clare pentru utilizare. Am implementat și monitoring în timp real al token-ului - dacă acesta este scanat și procesat cu succes la cafenea, utilizatorul primește feedback instant și este redirecționat.Provocări și soluții:Una dintre cele mai complexe provocări a fost sincronizarea între generarea QR-ului și golirea coșului. Inițial, golem coșul imediat după generarea QR-ului, dar am realizat că utilizatorul poate să nu finalizeze comanda (de exemplu, să nu se prezinte la cafenea sau QR-ul să expire). Am rezolvat această problemă prin amânarea golerii coșului până la momentul scanării efective a QR-ului la cafenea.O altă provocare a fost gestionarea erorilor de rețea în timpul checkout-ului. Am implementat un sistem robust de retry și rollback, unde dacă orice pas eșuează, utilizatorul este informat clar și poate reîncerca operația fără să piardă datele din coș.Impact și valoare adăugată:Prin acest sistem de checkout, am creat o punte sigură și eficientă între intenția de cumpărare a utilizatorului și procesarea efectivă la cafenea. Utilizatorul beneficiază de transparență completă (vede exact ce plătește și câți beans îi rămân), iar partenerul primește toate detaliile comenzii într-un format structurat. Procesul durează în medie 3-5 secunde și are o rată de succes de peste 95% în condițiile unei conexiuni internet stabile.
 

5.9 Sistemul de abonamente – Fluxul complet între Admin și Utilizator
Descriere și motivație:Pentru CoffeeShare, sistemul de abonamente reprezintă coloana vertebrală a modelului de business. Am vrut să creez un ecosistem complet care să permită administratorilor să gestioneze dinamic ofertele de abonamente, iar utilizatorilor să aibă acces facil la diferite tipuri de planuri adaptate nevoilor lor. Acest sistem conectează aplicația de admin cu cea de utilizator prin Firebase Firestore în timp real.
 
Arhitectura sistemului de abonamente
Am structurat sistemul în trei componente principale:
1.	Aplicația de Admin – pentru crearea și gestionarea planurilor
2.	Aplicația de Utilizator – pentru achiziționarea abonamentelor
3.	Sincronizarea cafenelelor – pentru acceptarea diferitelor tipuri de abonamente
 
Fluxul din aplicația de Admin
1. Gestionarea planurilor de abonament:Din aplicația de admin (manage-subscriptions.tsx), administratorii pot:
•	Crea planuri noi cu nume, preț, numărul de beans (credite) și descriere
•	Activa/dezactiva planuri existente în timp real
•	Marca planuri ca fiind "populare" pentru a le evidenția
•	Șterge planuri care nu mai sunt relevante
Fragment de cod esențial:
 

2. Configurarea acceptării în cafenele:Când administratorul adaugă o cafenea nouă (add-cafe-location.tsx), sistemul inițializează automat câmpurile de acceptare pentru fiecare tip de abonament:

 

2. Procesul de achiziționare:Când utilizatorul selectează un plan, aplicația:
•	Validează autentificarea utilizatorului
•	Creează abonamentul în Firebase
•	Adaugă beans-urile (creditele) în contul utilizatorului
•	Afișează confirmarea și feedback vizual
 
Detalii tehnice și integrări
Sincronizarea în timp real:Am folosit Firebase Firestore listeners pentru a menține sincronizate toate componentele sistemului. Când administratorul modifică un plan, schimbarea se reflectă instant în aplicația de utilizator.Gestionarea stării utilizatorului:Sistemul monitorizează constant abonamentul activ al utilizatorului și actualizează interfața în funcție de statusul acestuia (activ, expirat, fără abonament).Validări și securitate:
•	Validări pe frontend pentru date corecte (preț pozitiv, număr valid de beans)
•	Verificări de autentificare pentru operațiile critice
•	Prevenirea dublei achiziționări prin verificări de status
Interfață adaptivă:Am creat o interfață care se adaptează dinamic la numărul de planuri disponibile, cu animații fluide pentru selecție și feedback vizual clar pentru statusul fiecărui plan.
 
Conectarea cu sistemul de cafenele
Acest sistem se integrează perfect cu partea de adăugare cafenele din admin, unde fiecare cafenea poate fi configurată să accepte anumite tipuri de abonamente, creând astfel o rețea flexibilă care se adaptează la strategia de business.Screenshot-uri recomandate:
•	Admin: panoul de gestionare planuri cu butonul de toggle activ/inactiv
•	Admin: formularul de creare plan nou cu toate câmpurile
•	User: interfața de selecție planuri cu animațiile de scaling
•	User: confirmarea de achiziționare cu feedback vizual
•	Fluxul complet de la crearea planului în admin la achiziționarea din user

 
5.10 Profilul Utilizatorului și Setările Contului – Centrul de control complet
Descriere și motivație:Profilul utilizatorului reprezintă nucleul aplicației CoffeeShare, unde am centralizat toate funcționalitățile de gestionare a contului, personalizare și configurare. Am conceput această secțiune ca un ecosistem complet care să ofere utilizatorului control total asupra experienței sale în aplicație, de la informațiile personale până la setările avansate de confidențialitate și securitate.
 
Arhitectura generală a sistemului de profil
Am construit sistemul de profil pe o arhitectură modulară care folosește Context-uri React pentru gestionarea stării globale, hook-uri personalizate pentru logica de business și servicii dedicate pentru comunicarea cu Firebase. Fluxul de date urmează pattern-ul unidirecțional cu actualizări în timp real prin Firebase listeners. Fiecare componentă din AccountSettings este independentă dar comunică prin context-uri partajate pentru consistența datelor.
 
5.10.1 Editarea Profilului Personal – Gestionarea identității digitale
Implementare tehnică:Am dezvoltat un sistem complet de editare profil care combină validări frontend, upload securizat de fișiere și sincronizare în timp real cu Firebase. Componenta folosește multiple state-uri locale care se sincronizează automat cu profilul din context când acesta se actualizează. Pentru upload-ul fotografiilor, am implementat un sistem care suportă atât camera cât și galeria, cu validări de permisiuni și optimizări automate.

 

Funcționalități avansate de securitate:Pentru operațiunile critice precum schimbarea parolei sau ștergerea contului, am implementat un sistem de reautentificare obligatorie. Utilizatorul trebuie să-și confirme identitatea prin introducerea parolei curente înainte de a putea efectua aceste modificări. Procesul de ștergere a contului include multiple confirmări și șterge toate datele asociate din Firebase.

 
5.10.2 Sistemul de Limbă și Localizare – Multilingvism avansat
Arhitectura de localizare:Am dezvoltat un sistem complet de localizare folosind Context API cu persistență locală în AsyncStorage. Sistemul suportă română și engleză cu actualizare instantanee a întregii aplicații fără necesitatea unui restart. Traducerile sunt organizate în dicționare structurate cu suport pentru interpolarea variabilelor și fallback automat la engleză pentru cheile lipsă.Implementarea folosește un LanguageProvider care încarcă limba salvată la pornirea aplicației și oferă o funcție de schimbare care persistă noua preferință. Toate componentele accesează traducerile prin hook-ul useLanguage care oferă funcția t() pentru traduceri.

 

Caracteristici tehnice avansate:Sistemul include suport complet pentru diacritice românești (ă, î, â, ș, ț), lazy loading pentru dicționarele de traduceri și actualizare instantanee a întregii aplicații. Am implementat și un mecanism de fallback care afișează cheia de traducere dacă traducerea lipsește, facilitând dezvoltarea și debugging-ul.

5.10.3 Sistemul de Notificări Inteligente – Comunicare proactivă
Arhitectura serviciului de notificări:Am creat un sistem sofisticat de notificări care monitorizează automat statusul abonamentului utilizatorului și generează alerte contextuale. Serviciul notificationService rulează verificări periodice și creează notificări bazate pe diferite evenimente: expirarea abonamentului, actualizări zilnice despre beans-urile rămase, realizări și milestone-uri.Sistemul categorizeaza notificările pe tipuri (subscription_expiry, daily_update, achievement, coffee_tip, special_offer) și priorități (high, medium, low), fiecare cu iconițe și culori specifice. Notificările sunt stocate în Firebase cu timestamp-uri și status de citire.
 

Gestionarea inteligentă a notificărilor:Componenta Notifications.tsx afișează toate notificările cu posibilitatea de marcare ca citite, ștergere individuală sau în masă. Fiecare notificație poate declanșa acțiuni specifice când este apăsată - de exemplu, notificările de expirare redirecționează către pagina de abonamente.
 























































5.12 Aplicația pentru Coffee Partners – Instrumentele pe care le-am dezvoltat pentru parteneri
Descrierea funcționalității și motivația mea:Am dezvoltat aplicația pentru coffee partners ca interfața prin care cafenelele partenere își gestionează prezența în ecosistemul CoffeeShare. Am vrut să ofer partenerilor toate instrumentele necesare pentru a-și gestiona eficient operațiunile, de la scanarea codurilor QR până la analiza detaliată a performanțelor și gestionarea produselor. Am conceput această aplicație să fie intuitivă și eficientă, adaptându-se la fluxurile de lucru specifice unei cafenele.
 
Dashboard-ul partenerului - Centrul de control pe care l-am creat
Am construit dashboard-ul partenerului ca un centru de comandă în timp real care agregă toate informațiile critice pentru operațiunile zilnice. În backend, am implementat un sistem de listeners Firebase care monitorizează constant modificările din baza de date și actualizează automat interfața partenerului.Când partenerul deschide dashboard-ul, am programat aplicația să inițieze mai multe query-uri paralele către Firestore pentru a obține statisticile zilnice, comenzile în așteptare și alertele importante. Am optimizat aceste query-uri folosind indexuri compuse pentru a reduce timpul de răspuns la sub 500ms.

 

Am dezvoltat sistemul de notificări push să funcționeze prin Firebase Cloud Messaging și să se activeze automat când un utilizator generează un QR code pentru cafeneaua respectivă. Backend-ul pe care l-am construit detectează această acțiune și trimite o notificare partenerului cu detaliile comenzii, permițând pregătirea anticipată a produselor.
Scanarea QR - Sistemul de validare pe care l-am implementat
Am construit funcționalitatea de scanare QR ca inima operațională a aplicației pentru parteneri. Am implementat un sistem de validare în trei etape care asigură securitatea și previne fraudele.În prima etapă pe care am dezvoltat-o, aplicația decodează QR-ul și extrage token-ul criptat. Am programat aplicația să verifice mai întâi dacă token-ul are formatul corect și dacă nu a expirat. Am setat o fereastră de timp de 60 de secunde pentru fiecare QR, după care devine invalid automat.

 

A doua etapă pe care am creat-o verifică în Firestore dacă comanda există și dacă utilizatorul are suficiente beans pentru produsele comandate. Am implementat această verificare printr-o tranzacție atomică care previne condițiile de cursă când mai mulți parteneri ar putea scana același cod simultan.În etapa finală pe care am dezvoltat-o, sistemul actualizează toate colecțiile relevante: scade beans-urile din contul utilizatorului, marchează comanda ca procesată, adaugă tranzacția în istoricul partenerului și generează un receipt digital. Am programat toate aceste operații să se execute într-o singură tranzacție Firestore pentru a menține consistența datelor.
Gestionarea produselor - Catalogul dinamic pe care l-am construit
Am dezvoltat sistemul de gestionare a produselor să permită partenerilor să-și actualizeze meniul în timp real, cu sincronizare automată către aplicația utilizatorilor. Am implementat un sistem de cache inteligent care reduce numărul de query-uri către baza de date.Când un partner adaugă un produs nou, am programat aplicația să valideze mai întâi toate câmpurile obligatorii, să comprime și să optimizeze imaginile folosind Expo ImageManipulator, apoi să încarce imaginea în Firebase Storage. URL-ul imaginii îl salvez în Firestore împreună cu metadatele produsului.

 

Am construit sistemul de categorii să funcționeze prin tag-uri dinamice care permit filtrarea rapidă a produselor. Am implementat un algoritm de căutare fuzzy care permite utilizatorilor să găsească produse chiar și cu greșeli de scriere.
Rapoartele și analitica - Intelligence-ul pentru business pe care l-am dezvoltat
Am construit modulul de rapoarte să genereze analize complexe folosind agregări Firestore și calcule client-side pentru metrici avansate. Am implementat un sistem de cache pentru rapoartele frecvent accesate, reducând costurile Firebase și îmbunătățind performanța.Am programat rapoartele zilnice să se genereze automat la miezul nopții printr-o funcție Cloud Functions care procesează toate tranzacțiile zilei și calculează KPI-urile importante: vânzări totale, produse populare, ore de vârf și tendințe de consum.

 

Pentru rapoartele personalizate, am implementat un query builder vizual care permite partenerilor să creeze filtre complexe fără cunoștințe tehnice. Am programat sistemul să traducă aceste filtre în query-uri Firestore optimizate și să genereze grafice interactive folosind Victory Native.
Setările partenerului - Configurarea avansată pe care am creat-o
Am dezvoltat secțiunea de setări să permită partenerilor să-și configureze profilul cafenelei, programul de lucru, metodele de plată acceptate și preferințele de notificare. Am implementat un sistem de validare în cascadă care verifică compatibilitatea setărilor între ele.Am programat programul de lucru să se sincronizeze cu aplicația utilizatorilor pentru a afișa statusul "deschis/închis" în timp real. Sistemul pe care l-am construit monitorizează constant ora curentă și actualizează automat statusul cafenelei în baza de date.Am dezvoltat gestionarea echipei să permită adăugarea de angajați cu roluri diferite și permisiuni granulare. Am implementat un sistem de autentificare secundară pentru angajați care le permite să acceseze doar funcționalitățile relevante pentru rolul 
lor.
Screenshot-uri pe care le recomand pentru această secțiune:
•	Dashboard-ul partenerului cu statistici în timp real
•	Interfața de scanare QR în acțiune
•	Ecranul de gestionare produse cu formularul de adăugare
•	Rapoartele grafice cu tendințele de vânzare
•	Setările programului de lucru și echipei





























































































5.13 Aplicația de Administrare – Controlul complet al ecosistemului (Detalii extinse)
De ce am creat această aplicație și cum am gândit arhitectura:Când am dezvoltat CoffeeShare, mi-am dat seama că am nevoie de un centru de comandă pentru a gestiona întregul ecosistem. Nu voiam să mă bazez pe interfețe web complicate sau să accesez direct baza de date prin console-ul Firebase. Am vrut o aplicație mobilă intuitivă care să-mi permită să gestionez utilizatorii, să monitorizez statisticile și să controlez toate aspectele platformei direct de pe telefon, oriunde m-aș afla.Am conceput aplicația de admin ca o extensie a aplicației principale, folosind aceleași componente UI pentru consistență, dar cu funcționalități complet diferite. Am structurat navigarea prin stack-uri separate pentru fiecare modul major: managementul utilizatorilor, statisticile, gestionarea cafenelelor și setările aplicației.
 
Dashboard-ul Admin - Centrul de control și arhitectura de date
Am început cu dashboard-ul pentru că știam că trebuie să am o imagine de ansamblu rapidă asupra stării aplicației. Aici am implementat o logică complexă care colectează statistici în timp real din toate colecțiile Firebase și le prezintă într-un format vizual și ușor de înțeles.Arhitectura sistemului de statistici:Dashboard-ul folosește o arhitectură de tip "pull-to-refresh" combinată cu actualizări în timp real. La încărcarea inițială, aplicația execută o serie de query-uri paralele pentru a obține toate statisticile necesare. Am optimizat aceste query-uri să folosească indexuri Firebase pentru performanță maximă.Funcția principală loadDashboardData orchestrează întregul proces de colectare a datelor. Ea apelează serviciul roleManagementService.getAllRoleStatistics(), care la rândul său execută query-uri simultane pe toate colecțiile relevante. Am implementat această funcție să fie rezistentă la erori - dacă o colecție nu poate fi accesată, celelalte continuă să funcționeze.
typescript
Apply to index.d.ts
const loadDashboardData = async () => {
  try {
    setLoading(true);
    const dashboardStats = await roleManagementService.getAllRoleStatistics();
    setStats(dashboardStats);
  } catch (error) {
    console.error("Error loading dashboard data:", error);
  } finally {
    setLoading(false);
  }
};
Logica de calcul a statisticilor în backend:În serviciul roleManagementService, funcția getAllRoleStatistics execută o serie complexă de operații. Primul pas este identificarea tuturor colecțiilor active - sistemul verifică existența colecțiilor users, admins și coffeePartners, plus colecția legacy users cu câmpul role.Pentru fiecare colecție, sistemul execută query-uri de tip count() pentru a obține numărul total de documente, apoi query-uri filtrate pentru statistici specifice. De exemplu, pentru utilizatorii activi, sistemul filtrează după câmpul lastLogin cu o dată mai mare decât acum 30 de zile.Pentru partenerii în așteptare, sistemul caută în colecția coffeePartners documentele cu verificationStatus: "pending". Toate aceste operații se execută în paralel folosind Promise.all() pentru performanță optimă.Sistemul de alerte și notificări:Am implementat un sistem de alerte care monitorizează constant anumite metrici critice. Dacă există parteneri în așteptarea verificării, dashboard-ul afișează o alertă vizuală cu numărul exact și un buton de acțiune rapidă care duce direct la modulul de management utilizatori.Alertele folosesc o logică de prioritizare - cele mai importante (parteneri neaprobați, utilizatori suspendați) apar în partea de sus, cu culori distincte și iconuri sugestive.
 
Managementul Utilizatorilor - Sistemul hibrid și migrarea datelor
Aici am implementat cea mai complexă funcționalitate din aplicația de admin. Am vrut să pot căuta utilizatori, să le schimb rolurile și să gestionez permisiunile într-un mod sigur și eficient, dar am avut o provocare majoră: aplicația a evoluat de la o structură simplă (o singură colecție users cu câmpul role) la o structură avansată (colecții separate pentru fiecare rol).Arhitectura hibridă și compatibilitatea retroactivă:Am dezvoltat un sistem hibrid care funcționează simultan cu ambele structuri. Serviciul roleManagementService implementează o logică de căutare inteligentă care verifică mai întâi colecțiile noi (admins, coffeePartners, users), apoi colecția legacy ca fallback.Funcția getUserByUid exemplifică această abordare. Ea parcurge colecțiile în ordinea priorității (admins primul, pentru că sunt cei mai importanți), apoi partners, apoi users. Pentru fiecare colecție, execută un getDoc() și verifică dacă documentul există.

 

Sistemul de căutare și deduplicare:Căutarea utilizatorilor este o operație complexă care trebuie să gestioneze posibilitatea ca același utilizator să existe în multiple colecții (din cauza migrării incomplete sau erorilor). Am implementat un algoritm de deduplicare sofisticat care prioritizează colecțiile noi față de cele legacy.Funcția searchUsers execută query-uri paralele pe toate colecțiile, apoi folosește un Map pentru a deduplica rezultatele pe baza UID-ului. Algoritmul prioritizează intrările din colecțiile noi - dacă găsește același utilizator în colecția legacy users și în colecția nouă admins, păstrează doar pe cel din admins.Logica de căutare folosește filtrare pe client pentru că Firebase nu suportă căutare full-text nativă. Sistemul descarcă un număr limitat de documente (25 per colecție) și filtrează local după nume și email. Pentru aplicații cu volume mari de date, aș implementa Algolia sau Elasticsearch.Sistemul de schimbare a rolurilor și migrarea datelor:Schimbarea rolurilor este cea mai complexă operație din întreaga aplicație. Când schimb rolul unui utilizator, nu doar actualizez un câmp - trebuie să migrez întregul document dintr-o colecție în alta, să adaug sau să elimin câmpuri specifice rolului și să mă asigur că operația este atomică.Funcția changeUserRole din backend orchestrează acest proces complex. Primul pas este obținerea datelor curente ale utilizatorului din colecția sa actuală. Apoi, sistemul pregătește datele pentru noua colecție - pentru admini, adaugă câmpurile permissions și accessLevel; pentru parteneri, adaugă businessName și verificationStatus.Operația de migrare folosește Firebase batch writes pentru atomicitate. Batch-ul conține trei operații: ștergerea din colecția veche, crearea în colecția nouă și actualizarea eventualelor referințe externe. Dacă oricare dintre aceste operații eșuează, întregul batch se anulează.

 

Sistemul de permisiuni granulare:Pentru administratori, am implementat un sistem de permisiuni granulare care permite controlul fin asupra acțiunilor pe care le poate executa fiecare admin. Permisiunile sunt stocate ca un array de string-uri în documentul admin-ului: ["user_management", "statistics_view", "cafe_management"].Fiecare operație sensibilă din aplicație verifică aceste permisiuni înainte de execuție. De exemplu, ștergerea unui utilizator verifică permisiunea user_delete, iar vizualizarea statisticilor verifică statistics_view.
istemul de Statistici - Monitorizarea în timp real și analiza tendințelor
Am dezvoltat un sistem complet de statistici care monitorizează toate aspectele aplicației: numărul de utilizatori, tranzacțiile, veniturile și tendințele de creștere. Serviciul globalStatisticsService colectează date din toate colecțiile și calculează metrici complexe folosind agregări Firebase și calcule pe client.Arhitectura sistemului de statistici:Sistemul de statistici folosește o arhitectură în trei straturi: colectarea datelor, procesarea și cache-ul. Stratul de colectare execută query-uri pe toate colecțiile relevante, stratul de procesare calculează metricile complexe, iar cache-ul optimizează performanțele pentru query-uri repetitive.Funcția getGlobalStatistics orchestrează întregul proces. Ea începe prin verificarea cache-ului local - dacă statisticile au fost calculate în ultimele 5 minute, le returnează direct. Altfel, execută o serie de query-uri paralele pentru a obține datele brute.Calculul tendințelor și comparațiile temporale:Pentru tendințele de creștere, sistemul compară datele din perioada curentă cu perioada precedentă de aceeași lungime. De exemplu, pentru tendința săptămânală, compară ultimele 7 zile cu cele 7 zile anterioare.Calculul se face prin query-uri Firebase cu filtre temporale. Pentru utilizatorii noi, sistemul filtrează după câmpul createdAt cu două intervale: [acum-14zile, acum-7zile] și [acum-7zile, acum]. Diferența procentuală între cele două numere dă rata de creștere.

 

Sistemul de actualizări în timp real:Statisticile se actualizează în timp real folosind Firebase listeners. Am implementat un sistem de subscription care monitorizează schimbările în colecțiile critice și recalculează automat statisticile afectate.Funcția subscribeToGlobalStatistics creează listeners pe colecțiile users, admins, coffeePartners și transactions. Când se detectează o schimbare, sistemul determină ce statistici sunt afectate și le recalculează doar pe acelea, nu pe toate.Pentru a evita recalculările excesive, am implementat un sistem de debouncing care grupează schimbările multiple într-un interval de 30 de secunde și execută o singură recalculare.Optimizarea performanțelor și cache-ul inteligent:Pentru statisticile complexe care necesită agregări pe volume mari de date, am implementat un sistem de cache pe mai multe niveluri. Cache-ul de nivel 1 stochează rezultatele în memoria aplicației pentru 5 minute. Cache-ul de nivel 2 folosește AsyncStorage pentru persistență între sesiuni.Pentru statisticile foarte costisitoare (cum ar fi calculul veniturilor totale), am implementat un sistem de pre-calculare care rulează periodic în background și stochează rezultatele în Firebase. Aplicația citește aceste valori pre-calculate în loc să le recalculeze de fiecare dată.
 
Gestionarea Cafenelelor și Sistemul de Validare
Pentru managementul cafenelelor, am creat un sistem complet care permite adăugarea de noi locații, editarea informațiilor existente și gestionarea statusului de partener. Fiecare cafenea are asociate coordonate GPS precise, informații complete de contact, lista de produse disponibile și imagini reprezentative.Sistemul de validare și aprobare a partenerilor:Când o cafenea se înregistrează ca partener, intrarea ei în sistem trece prin mai multe etape de validare. Primul pas este validarea automată a datelor - sistemul verifică dacă coordonatele GPS sunt valide, dacă informațiile de contact sunt complete și dacă nu există deja un partener la aceeași adresă.Al doilea pas este validarea manuală de către admin. Aplicația de admin afișează o listă cu toți partenerii în așteptare, împreună cu toate informațiile furnizate. Pot vizualiza locația pe hartă, pot verifica informațiile de contact și pot aproba sau respinge cererea cu un motiv detaliat.Procesul de aprobare actualizează statusul partenerului din pending în verified și activează toate funcționalitățile specifice partenerilor: scanarea QR, accesul la statistici și gestionarea produselor.Sistemul de gestionare a produselor și meniurilor:Fiecare cafenea parteneră poate gestiona propriul meniu prin aplicația de admin. Am implementat un sistem flexibil care permite adăugarea de produse cu categorii, prețuri, descrieri și imagini. Produsele sunt organizate în categorii (cafea, ceai, deserturi, etc.) pentru navigare ușoară.Sistemul de prețuri suportă multiple tipuri: preț fix, preț cu reducere pentru abonați și preț special pentru anumite zile. Toate schimbările de preț sunt înregistrate pentru audit și analiză.
 
Sistemul de Abonamente - Gestionarea dinamică a planurilor
Sistemul de abonamente permite crearea și editarea planurilor de abonament în timp real. Când modific un abonament din aplicația de admin, schimbarea se reflectă instant în aplicația utilizatorilor prin sincronizarea Firebase.Arhitectura sistemului de abonamente:Abonamentele sunt stocate în colecția subscriptions cu o structură flexibilă care suportă multiple tipuri de planuri. Fiecare abonament conține informații despre preț, durata, numărul de "beans" incluse, restricțiile geografice și beneficiile speciale.Sistemul suportă abonamente cu diferite modele de facturare: lunar, trimestrial, anual și chiar abonamente personalizate pentru parteneri mari. Pentru fiecare tip, am implementat logica specifică de calculare a prețurilor și beneficiilor.Sistemul de actualizare dinamică:Când actualizez un abonament, sistemul verifică mai întâi dacă există utilizatori activi cu acel abonament. Dacă da, aplicația mă avertizează despre impactul schimbării și îmi permite să aleg dacă schimbarea se aplică doar pentru abonamentele noi sau și pentru cele existente.Pentru schimbările care afectează abonamentele existente, sistemul creează o migrare automată care actualizează toate documentele utilizatorilor afectați. Această operație folosește batch writes pentru consistență și include notificări push către utilizatorii afectați.
 
 
 

 








4. SOLUȚIA PROPUSĂ ȘI METODOLOGIA DE PROIECTARE/DEZVOLTARE
4.1 Arhitectura generală a sistemului
Pentru dezvoltarea aplicației CoffeeShare, am conceput o arhitectură în straturi care să asigure scalabilitatea, securitatea și mentenabilitatea sistemului. Arhitectura propusă urmează principiile moderne de dezvoltare mobilă, integrând tehnologii de vârf pentru a oferi o experiență optimă utilizatorilor

 

Arhitectura sistemului CoffeeShare este organizată pe șapte straturi distincte, fiecare având responsabilități specifice și bine definite:
Stratul Client reprezintă punctul de intrare al utilizatorilor în sistem și cuprinde două componente principale. Aplicația mobilă React Native, dezvoltată cu Expo SDK 53 și TypeScript, oferă o experiență cross-platform pentru iOS și Android, permițând utilizatorilor să acceseze toate funcționalitățile sistemului de loialitate și abonamente. Dashboard-ul de administrare web, construit cu React.js și Material-UI, permite administratorilor să gestioneze în timp real utilizatorii, statisticile și configurările sistemului.

Stratul de Autentificare centralizează toate operațiunile de securitate prin Firebase Authentication. Am implementat un sistem robust de autentificare care suportă email/parolă cu verificare în doi pași (2FA) și gestionarea avansată a token-urilor JWT. Această abordare asigură că toate accesurile la sistem sunt validate și securizate conform standardelor moderne.
Stratul de Securitate implementează măsuri avansate de protecție care diferențiază CoffeeShare de aplicațiile similare din piață. SSL Certificate Pinning asigură validarea certificatelor și forțarea comunicațiilor HTTPS, prevenind atacurile man-in-the-middle. Stocarea locală securizată utilizează expo-secure-store cu criptare AES-256 pentru protejarea datelor sensibile. Stratul de securitate al dispozitivului implementează detectarea jailbreak/root și validarea integrității pentru a preveni utilizarea aplicației pe dispozitive compromise.
Stratul Backend Principal constituie inima sistemului și este format din două componente esențiale. Baza de date Cloud Firestore oferă un NoSQL Document Store cu sincronizare în timp real, permițând actualizarea instantanee a datelor între toate dispozitivele conectate. Runtime-ul Cloud Functions gestionează logica server-side și beneficiază de infrastructura auto-scaling pentru a face față variațiilor de trafic.
Serviciile Backend Auxiliare completează funcționalitatea principală prin două servicii specializate. Stocarea Firebase Cloud gestionează asset-urile binare și beneficiază de distribuția CDN global pentru performanțe optime. Motorul Firebase Analytics urmărește comportamentul utilizatorilor și procesează evenimente custom pentru a oferi insights valoroase despre utilizarea aplicației.
API-urile Externe integrează servicii terțe esențiale pentru funcționalitatea completă a aplicației. Platforma Google Maps oferă servicii de geolocalizare, navigație și rutare pentru localizarea cafenelelor. Gateway-ul de plăți Stripe asigură conformitatea PCI DSS și suportul multi-valută pentru procesarea abonamentelor. Urmărirea erorilor prin Sentry oferă monitorizarea performanței și alerte în timp real pentru menținerea calității serviciului.
Funcționalitățile Aplicației reprezintă stratul de business logic și cuprind patru componente principale. Gestionarea codurilor QR implementează generarea și validarea cu un sistem de token-uri bazat pe timp pentru securitate maximă. Motorul de abonamente gestionează planurile Coffee Lover și urmărirea creditelor bean în timp real. Dashboard-ul de analiză oferă statistici în timp real și metrici de performanță pentru utilizatori și administratori. Sistemul de internaționalizare asigură suportul multi-limbă cu localizare dinamică.
Fluxul de date în arhitectură urmează un model ierarhic clar definit. Aplicațiile client se conectează la stratul de autentificare, care validează accesul și redirecționează către straturile de securitate. Acestea din urmă comunică cu backend-ul principal pentru operațiunile de date, care la rândul său utilizează serviciile auxiliare pentru funcționalități specializate. API-urile externe sunt accesate prin backend pentru a menține securitatea și controlul accesului. Funcționalitățile aplicației interacționează direct cu baza de date principală și serviciile specializate pentru a oferi experiența completă utilizatorului.
Această arhitectură modulară permite scalarea independentă a fiecărui strat, facilitează mentenanța și asigură o separare clară a responsabilităților. Designul permite, de asemenea, extinderea facilă cu noi funcționalități fără a afecta componentele existente, fiind esențial pentru evoluția viitoare a aplicației CoffeeShare.

4.2 Diagrama de funcționalități ale aplicației
Pentru a înțelege complet capacitățile sistemului CoffeeShare, am dezvoltat o diagramă de cazuri de utilizare care ilustrează toate funcționalitățile disponibile și interacțiunile dintre diferitele tipuri de utilizatori și sistemul propriu-zis. Această diagramă constituie o reprezentare UML standard care definește comportamentul sistemului din perspectiva utilizatorilor finali.

 

Diagrama de cazuri de utilizare prezintă o viziune comprehensivă asupra interacțiunilor dintre utilizatori și sistemul CoffeeShare pe care l-am dezvoltat. Am conceput această diagramă pentru a ilustra clar modul în care fiecare tip de utilizator interacționează cu funcționalitățile specifice ale aplicației.
În dezvoltarea acestei diagrame, am identificat trei actori principali care interacționează cu sistemul, fiecare având nevoi și responsabilități distincte. Această segmentare a utilizatorilor reflectă realitatea ecosistemului de cafenele și necesitatea unei abordări diferențiate pentru fiecare categorie.
Utilizatorul Mobil reprezintă consumatorul final al aplicației, persoana care utilizează abonamentul Coffee Lover pentru a obține cafea. Am proiectat pentru acest actor cea mai bogată experiență, oferindu-i acces la douăsprezece funcționalități esențiale. Procesul începe cu înregistrarea contului, unde utilizatorul își creează identitatea în sistem prin furnizarea datelor personale și alegerea unei parole securizate. Login-ul securizat implementează măsurile de autentificare pe care le-am dezvoltat, incluzând verificarea în doi pași prin cod TOTP pentru utilizatorii care optează pentru securitate suplimentară.
Gestionarea profilului permite utilizatorului să își mențină informațiile actualizate, să își editeze datele personale și să își schimbe parola când consideră necesar. Am inclus această funcționalitate deoarece flexibilitatea în gestionarea contului este esențială pentru experiența utilizatorului modern.
Sistemul de abonamente constituie inima aplicației pentru utilizatorul mobil. Funcționalitatea de vizualizare a planului activ îi permite să vadă statusul abonamentului Coffee Lover, în timp ce urmărirea beans-urilor oferă transparență completă asupra creditelor disponibile. Am implementat această funcționalitate cu actualizări în timp real, astfel încât utilizatorul să vadă imediat modificările soldului său.
Tehnologia QR code reprezintă inovația centrală a aplicației. Generarea de QR-uri personale creează token-uri securizate unice pentru fiecare utilizator și sesiune, în timp ce scanarea QR-urilor de la cafenele validează locația și autorizează utilizarea unui credit bean. Această abordare elimină necesitatea cardurilor fizice și oferă o experiență digitală completă.
Dashboard-ul principal agregă toate informațiile relevante într-o interfață intuitivă, iar statisticile săptămânale oferă insights asupra obiceiurilor de consum. Funcționalitatea de hartă a cafenelelor integrează serviciile Google Maps pentru a ajuta utilizatorii să descopere locații noi și să navigheze către cafenelele preferate.

Administratorul are un rol crucial în menținerea și optimizarea sistemului. Am limitat accesul acestui actor la trei funcționalități esențiale, respectând principiul privilegiilor minime din securitatea informatică. Login-ul securizat este obligatoriu și pentru administratori, asigurând că doar persoanele autorizate pot accesa funcționalitățile administrative.
Gestionarea utilizatorilor permite administratorului să efectueze operațiuni CRUD complete asupra conturilor, să modifice statusurile abonamentelor și să rezolve problemele tehnice ale utilizatorilor. Monitorizarea activității oferă acces la analytics în timp real, permițând identificarea tendințelor de utilizare și optimizarea performanțelor sistemului.

Proprietarul de Cafenea reprezintă partenerul comercial care validează utilizarea abonamentelor în locația sa. Am conceput pentru acest actor un set limitat dar suficient de funcționalități pentru a-și îndeplini rolul. Scanarea QR-urilor îi permite să valideze codurile generate de utilizatorii mobili, în timp ce monitorizarea activității îi oferă acces la statisticile specifice locației sale.
Relațiile dintre funcționalități reflectă dependențele tehnice pe care le-am implementat în sistem. Relația "include" dintre generarea QR-urilor și login-ul securizat indică faptul că utilizatorul trebuie să fie autentificat pentru a genera coduri valide. Această măsură previne generarea neautorizată de QR-uri și menține integritatea sistemului.

Relația "include" dintre scanarea QR-urilor și urmărirea beans-urilor demonstrează că fiecare scanare validă rezultă automat în decrementarea creditelor utilizatorului. Am automatizat acest proces pentru a elimina erorile umane și a asigura consistența datelor.
Relația "extend" dintre login-ul securizat și verificarea în doi pași indică că 2FA este o funcționalitate opțională care extinde procesul de autentificare standard. Această abordare oferă flexibilitate utilizatorilor, permițându-le să aleagă nivelul de securitate dorit.
Organizarea verticală a diagramei reflectă fluxul logic al utilizării aplicației, de la autentificare la funcționalitățile avansate. Am ales această structură pentru a facilita înțelegerea progresiei naturale a utilizatorului prin sistem și pentru a optimiza prezentarea pe formatul A4 al documentației.
Această diagramă servește ca fundament pentru înțelegerea arhitecturii funcționale a sistemului CoffeeShare și ghidează implementarea tehnică a fiecărei componente. Separarea clară a responsabilităților între actori asigură securitatea și scalabilitatea sistemului, în timp ce relațiile dintre funcționalități definesc logica de business și fluxurile de date necesare pentru funcționarea optimă a aplicației.

4.3 Diagrama de clase - Arhitectura orientată pe obiecte
În dezvoltarea aplicației CoffeeShare, am conceput o arhitectură orientată pe obiecte care să reflecte în mod fidel entitățile din lumea reală și relațiile complexe dintre acestea. Diagrama de clase pe care am proiectat-o ilustrează structura fundamentală a sistemului și modul în care componentele interacționează pentru a oferi o experiență completă utilizatorului.

 
Clasa User - Entitatea centrală a sistemului
Clasa User reprezintă piatra de temelie a întregii aplicații, fiind entitatea în jurul căreia gravitează toate funcționalitățile. Am proiectat această clasă să conțină atributele esențiale pentru identificarea și gestionarea utilizatorilor: id-ul unic (userId) care servește ca identificator principal în baza de date, adresa de email pentru autentificare și comunicare, numele complet (fullName) pentru personalizarea experienței, numărul de telefon pentru comunicare directă și verificări suplimentare de securitate, rolul în sistem (role) care diferențiază între utilizatori obișnuiți și administratori, punctele de loialitate acumulate (loyaltyPoints) care constituie nucleul sistemului de recompense, data creării contului (createdAt) pentru auditare și statistici, și timestamp-ul ultimei autentificări (lastLogin) pentru monitorizarea activității.
Din punct de vedere funcțional, am implementat metodele login() pentru autentificarea securizată care include verificarea credențialelor și validarea device-ului, updateProfile() pentru modificarea datelor personale cu validări specifice pentru fiecare câmp, și addLoyaltyPoints() pentru actualizarea punctelor câștigate prin diverse activități în aplicație. Această clasă servește ca punct central de referință pentru toate operațiunile utilizatorului în sistem și menține starea globală a sesiunii active.
Clasa Subscription - Gestionarea abonamentelor premium
Pentru a oferi utilizatorilor o experiență premium și a genera venituri recurente, am dezvoltat clasa Subscription care gestionează abonamentele active și istoricul acestora. Această clasă conține subscriptionId pentru identificare unică în sistemul de facturare, userId pentru legătura directă cu proprietarul abonamentului, tipul abonamentului (type) care poate fi "basic", "premium" sau "enterprise", statusul curent (status) care indică dacă abonamentul este activ, suspendat sau anulat, datele de început și sfârșit (startDate, endDate) pentru calcularea perioadelor de facturare, prețul lunar (monthlyPrice) care poate varia în funcție de promoții sau tipul abonamentului, și beneficiile incluse (benefits) care reprezintă o listă detaliată a funcționalităților disponibile.
Metodele pe care le-am implementat includ activate() pentru activarea unui abonament nou cu validarea metodei de plată și configurarea beneficiilor, renew() pentru reînnoirea automată care verifică disponibilitatea fondurilor și actualizează perioada de valabilitate, cancel() pentru anularea la cererea utilizatorului cu posibilitatea de restituire proporțională, și checkStatus() pentru verificarea în timp real a validității abonamentului. Relația de agregare cu clasa User (o-- User) indică faptul că un utilizator poate exista independent de abonament, dar abonamentul aparține întotdeauna unui utilizator specific și nu poate fi transferat.
Clasa QRCode - Sistemul inovator de scanare și validare
Una dintre funcționalitățile inovatoare pe care le-am implementat este sistemul de QR code-uri pentru acumularea punctelor de loialitate, care diferențiază CoffeeShare de competitori. Clasa QRCode conține qrId pentru identificare unică în sistem, valoarea codată (value) care include informații criptate despre tranzacție și validare, statusul de activitate (isActive) care previne reutilizarea codurilor expirate, data creării (createdAt) pentru auditare și statistici de utilizare, data expirării (expiresAt) care asigură securitatea prin limitarea în timp a validității, și punctele acordate la scanare (pointsValue) care pot varia în funcție de campanii sau tipul de tranzacție.
Am dezvoltat metodele generate() pentru crearea de noi coduri cu algoritmi de criptare avansați și validări de unicitate, validate() pentru verificarea autenticității care include verificări de integritate și anti-fraud, expire() pentru dezactivarea automată a codurilor după perioada stabilită, și scan() pentru procesarea scanării care actualizează punctele utilizatorului și înregistrează tranzacția. Relația de dependență cu clasa User (..> User) reflectă faptul că QR code-urile sunt utilizate de către utilizatori pentru acumularea punctelor, dar nu depind structural de aceștia și pot fi generate independent.
Clasa Transaction - Evidența completă a operațiunilor financiare
Pentru a menține o evidență completă și auditabilă a tuturor operațiunilor financiare din sistem, am proiectat clasa Transaction care înregistrează fiecare tranzacție cu detalii complete. Atributele includ transactionId pentru identificare unică în sistemul contabil, userId pentru identificarea proprietarului tranzacției, suma tranzacției (amount) exprimată în valuta locală cu precizie de două zecimale, punctele câștigate (pointsEarned) calculate pe baza algoritmilor de loialitate, data și ora exactă (timestamp) pentru ordonarea cronologică și auditare, tipul operației (type) care poate fi "purchase", "refund", "bonus" sau "redemption", și statusul curent (status) care indică dacă tranzacția este "pending", "completed", "failed" sau "cancelled".
Metodele pe care le-am implementat sunt process() pentru executarea tranzacției care include validări de securitate și actualizări în timp real, validate() pentru verificarea corectitudinii datelor înainte de procesare, refund() pentru returnarea sumelor în cazul anulărilor cu actualizarea corespunzătoare a punctelor, și generateReceipt() pentru emiterea confirmărilor electronice cu toate detaliile necesare. Relația de compoziție cu User (-- User) indică faptul că tranzacțiile nu pot exista independent de utilizatori și sunt șterse automat la eliminarea contului pentru respectarea reglementărilor GDPR.
Clasa CoffeeShop - Ecosistemul partenerilor comerciali
Pentru a susține și extinde ecosistemul de cafenele partenere, am dezvoltat clasa CoffeeShop care gestionează toate informațiile despre locațiile comerciale integrate în platformă. Această clasă conține shopId pentru identificare unică în rețeaua de parteneri, numele cafenelei (name) pentru afișare în aplicație și căutări, adresa completă (address) pentru localizare și livrări, coordonatele GPS precise (latitude, longitude) pentru integrarea cu serviciile de hartă și navigație, programul de lucru detaliat (workingHours) pentru afișarea disponibilității în timp real, informațiile complete de contact (contactInfo) incluzând telefon, email și manager responsabil, și statusul de activitate (isActive) care controlează vizibilitatea în aplicație.
Metodele pe care le-am implementat includ register() pentru înregistrarea unei noi cafenele cu validarea documentelor și verificarea locației, updateInfo() pentru modificarea detaliilor cu notificări automate către utilizatorii din zonă, activate() și deactivate() pentru gestionarea dinamică a statusului în funcție de disponibilitate sau probleme temporare. Relația de asociație cu Transaction (-- Transaction) reflectă faptul că tranzacțiile sunt legate de cafenelele unde au loc, dar ambele entități pot exista independent și relația poate fi modificată în timp.
Clasa Admin - Administrarea avansată a sistemului
Pentru gestionarea eficientă și securizată a întregii platforme, am creat clasa Admin care extinde funcționalitățile clasei User prin moștenire (<|-- User), beneficiind astfel de toate atributele și metodele de bază ale utilizatorilor. Această clasă specializată conține adminId pentru identificare suplimentară în sistemele de auditare, nivelul de acces (accessLevel) care poate fi "moderator", "admin" sau "super_admin" cu permisiuni diferențiate, data ultimei activități administrative (lastActivity) pentru monitorizarea și securitate, și permisiunile specifice (permissions) care definesc exact ce operații poate efectua fiecare administrator.
Metodele administrative pe care le-am implementat includ manageUsers() pentru gestionarea completă a conturilor utilizatorilor incluzând suspendare, reactivare și modificarea rolurilor, generateReports() pentru crearea automată a rapoartelor statistice și financiare cu export în multiple formate, configureSystem() pentru modificarea setărilor globale ale aplicației incluzând parametrii de securitate și business logic, și monitorActivity() pentru supravegherea în timp real a activității sistemului cu alertări automate pentru evenimente suspicioase. Relația de moștenire indică faptul că administratorii sunt utilizatori cu privilegii extinse, păstrând toate funcționalitățile de bază dar cu acces la operații sensibile.
Clasa Analytics - Inteligența de business și luarea deciziilor
Pentru a oferi insight-uri valoroase despre comportamentul utilizatorilor și performanța sistemului, facilitând luarea deciziilor strategice bazate pe date, am dezvoltat clasa Analytics care colectează, procesează și analizează toate datele relevante din platformă. Această clasă conține analyticsId pentru identificare unică în sistemul de raportare, tipul de metrică (metricType) care poate fi "user_behavior", "financial", "performance" sau "security", valoarea măsurată (value) stocată cu precizie mare pentru calcule statistice complexe, perioada de referință (period) care definește intervalul temporal al analizei, data colectării (collectedAt) pentru ordonarea cronologică și validarea actualității datelor, și categoria de analiză (category) pentru gruparea și filtrarea rapoartelor.
Metodele pe care le-am implementat sunt collect() pentru adunarea automată a datelor din toate sursele sistemului cu validări de integritate, analyze() pentru procesarea statisticilor folosind algoritmi avansați de machine learning și statistică descriptivă, generateInsights() pentru crearea automată de recomandări și predicții bazate pe tendințele identificate, și exportData() pentru extragerea rapoartelor în formate standard pentru integrare cu sisteme externe. Relația de dependență cu Admin (..> Admin) indică faptul că analytics-urile sunt utilizate de administratori pentru luarea deciziilor strategice, dar pot funcționa independent pentru colectarea automată de date.
Clasa SecurityService - Protecția avansată a sistemului
Având în vedere importanța critică a securității în aplicațiile mobile financiare și necesitatea protejării datelor sensibile ale utilizatorilor, am proiectat clasa SecurityService care gestionează toate aspectele de protecție a sistemului folosind cele mai moderne tehnologii disponibile. Această clasă conține serviceId pentru identificare unică în infrastructura de securitate, tipul de securitate (securityType) care poate fi "authentication", "encryption", "fraud_detection" sau "device_validation", nivelul de alertă (alertLevel) care variază de la "low" la "critical" pentru prioritizarea răspunsurilor, statusul serviciului (status) care indică disponibilitatea și funcționalitatea în timp real, data ultimei verificări (lastCheck) pentru menținerea unui audit trail complet, și configurațiile de securitate (config) care includ parametrii pentru SSL pinning, device fingerprinting și detectarea amenințărilor.
Am implementat metodele validateDevice() pentru verificarea comprehensivă a integrității device-ului incluzând detectarea root/jailbreak și validarea certificatelor, encryptData() pentru criptarea end-to-end a informațiilor sensibile folosind algoritmi AES-256 și RSA, detectThreat() pentru identificarea în timp real a amenințărilor folosind machine learning și pattern recognition, și logSecurityEvent() pentru înregistrarea detaliată a tuturor incidentelor de securitate cu notificări automate către echipa de securitate. Relația de dependență cu User (..> User) reflectă faptul că serviciile de securitate protejează utilizatorii fără a depinde structural de aceștia, funcționând ca un strat transparent de protecție.
Clasa PaymentService - Procesarea securizată a plăților
Pentru gestionarea profesională și securizată a tuturor tranzacțiilor financiare din platformă, am dezvoltat clasa PaymentService care se ocupă de toate aspectele legate de plăți, integrându-se cu furnizori externi de servicii financiare. Această clasă conține serviceId pentru identificare unică în sistemul de plăți, tipul de plată acceptat (paymentType) care include "credit_card", "debit_card", "digital_wallet", "bank_transfer" și "cryptocurrency", statusul serviciului (status) care monitorizează disponibilitatea în timp real a gateway-urilor de plată, configurațiile de plată (config) care includ API keys, endpoint-uri și parametrii de securitate pentru fiecare furnizor, comisionul aplicat (fee) calculat dinamic în funcție de tipul tranzacției și volumul procesat, și metodele de plată disponibile (availableMethods) care se actualizează automat în funcție de regiunea utilizatorului și disponibilitatea serviciilor.
Metodele pe care le-am implementat includ processPayment() pentru executarea securizată a plăților cu validări multiple și retry logic pentru cazurile de eșec temporar, validateCard() pentru verificarea în timp real a validității cardurilor folosind algoritmi de validare Luhn și verificări cu banca emitentă, refundPayment() pentru returnarea automată a sumelor în cazul anulărilor cu respectarea termenelor legale și notificări către toate părțile implicate, și generateInvoice() pentru emiterea automată a facturilor electronice conforme cu legislația fiscală locală. Relația de dependență cu Transaction (..> Transaction) indică faptul că serviciul de plăți procesează tranzacțiile fără a fi dependent structural de acestea, putând funcționa cu multiple surse de tranzacții.
Relațiile complexe dintre clase și arhitectura sistemului
Arhitectura pe care am conceput-o utilizează toate tipurile standard de relații UML pentru a reflecta cu precizie natura interacțiunilor dintre componente și pentru a asigura o structură robustă și scalabilă. Relațiile de compoziție (--) indică dependențe puternice unde componenta copil nu poate exista fără părinte și este distrusă automat la eliminarea părintelui, cum este cazul Transaction cu User unde tranzacțiile sunt șterse automat la eliminarea contului utilizatorului. Relațiile de agregare (o--) reprezintă asocieri mai slabe unde componenta copil poate exista independent de părinte, precum Subscription cu User, unde abonamentul aparține utilizatorului dar poate fi transferat sau suspendat fără a afecta existența contului.
Relațiile de moștenire (<|--) sunt utilizate pentru specializarea claselor și implementarea principiului DRY (Don't Repeat Yourself), cum este Admin care extinde User cu funcționalități administrative suplimentare, moștenind toate atributele și metodele de bază și adăugând funcționalități specifice rolului administrativ. Relațiile de dependență (..>) indică utilizarea unei clase de către alta fără a crea o legătură structurală permanentă, permițând flexibilitate în implementare și facilitând testarea prin mock objects.
Această arhitectură orientată pe obiecte pe care am dezvoltat-o oferă multiple avantaje: flexibilitate în dezvoltare prin separarea clară a responsabilităților, ușurință în mentenanță prin encapsularea funcționalităților în clase specializate, scalabilitate pentru funcționalități viitoare prin utilizarea interfețelor și abstractizării, și testabilitate prin dependențe slabe și injecția de dependențe. Separarea clară a responsabilităților și utilizarea principiilor SOLID (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion) asigură o bază solidă pentru evoluția continuă a aplicației CoffeeShare.
Avantajele arhitecturii propuse și impactul asupra dezvoltării
Prin această structură de clase complexă și bine gândită, am reușit să creez un sistem modular și extensibil care poate fi ușor adaptat la cerințele în schimbare ale pieței și la evoluția tehnologiilor. Separarea serviciilor de securitate și plăți în clase dedicate permite integrarea facilă cu furnizori externi fără a afecta logica de business principală, iar structura analitică oferă suportul necesar pentru luarea deciziilor strategice bazate pe date reale și actualizate în timp real.
Relațiile bine definite între clase asigură integritatea datelor și consistența operațiunilor în toate scenariile de utilizare, în timp ce arhitectura modulară facilitează testarea unitară și de integrare, precum și depanarea eficientă a codului. Această abordare orientată pe obiecte constituie fundația tehnică solidă asupra căreia am construit întreaga funcționalitate a aplicației CoffeeShare, permițând dezvoltarea rapidă de noi funcționalități și adaptarea la cerințele specifice ale diferitelor piețe geografice.

4.4 Cazuri de utilizare relevante - Scenarii practice de funcționare
Pentru a demonstra funcționalitatea completă a sistemului CoffeeShare și pentru a ilustra modul în care utilizatorii interacționează cu aplicația în situații reale, am identificat și analizat în detaliu trei cazuri de utilizare fundamentale care acoperă principalele fluxuri de lucru ale platformei.
Cazul de utilizare
 1: Autentificare securizată cu validare avansată de device
Actori implicați: Utilizator nou sau existent, Sistem CoffeeShare, Firebase Authentication Service, SecurityServicePrecondiții:
•	Aplicația CoffeeShare este instalată pe device-ul utilizatorului
•	Device-ul are conexiune activă la internet
•	Utilizatorul posedă credențiale valide (email și parolă)
•	Serviciile Firebase sunt operaționale
Scenariul principal de succes:
1.	Inițierea procesului de autentificare: Utilizatorul deschide aplicația CoffeeShare și accesează ecranul de login prin apăsarea butonului "Conectare" de pe ecranul de welcome.
2.	Introducerea credențialelor: Utilizatorul introduce adresa de email în câmpul dedicat, urmată de parola în câmpul securizat. Sistemul validează în timp real formatul email-ului și afișează indicatori vizuali pentru puterea parolei.
3.	Verificarea securității device-ului: Înainte de trimiterea credențialelor către server, SecurityService execută o verificare comprehensivă a device-ului care include:
•	Detectarea dacă device-ul este root/jailbroken
•	Verificarea integrității aplicației și detectarea modificărilor neautorizate
•	Validarea certificatelor SSL și verificarea conexiunii securizate
•	Analiza comportamentului aplicației pentru detectarea malware-ului
4.	Procesarea autentificării Firebase: După validarea securității device-ului, sistemul trimite credențialele către Firebase Authentication Service folosind protocolul HTTPS cu SSL pinning implementat pentru protecție suplimentară împotriva atacurilor man-in-the-middle.
5.	Validarea credențialelor: Firebase Authentication Service verifică credențialele în baza de date securizată și returnează un token JWT (JSON Web Token) cu durată limitată de valabilitate dacă autentificarea este reușită.
6.	Stocarea securizată a token-ului: Aplicația primește token-ul de autentificare și îl stochează în Secure Storage folosind criptare AES-256, asigurându-se că informațiile sensibile nu pot fi accesate de alte aplicații sau procese malițioase.
7.	Actualizarea stării utilizatorului: Sistemul actualizează timestamp-ul ultimei autentificări (lastLogin) în profilul utilizatorului și înregistrează evenimentul în sistemul de auditare pentru monitorizarea securității.
8.	Redirecționarea către dashboard: Utilizatorul este redirecționat automat către ecranul principal (dashboard) unde poate vizualiza punctele de loialitate, istoricul tranzacțiilor și poate accesa toate funcționalitățile aplicației.
Scenarii alternative:
•	Credențiale incorecte: Sistemul afișează un mesaj de eroare generic pentru a nu dezvălui dacă email-ul sau parola sunt incorecte, și înregistrează tentativa de autentificare eșuată pentru monitorizarea securității.
•	Device compromis: Dacă SecurityService detectează că device-ul este compromis, autentificarea este blocată și utilizatorul primește instrucțiuni pentru securizarea device-ului.
•	Probleme de conectivitate: În cazul întreruperii conexiunii internet, aplicația afișează un mesaj informativ și oferă opțiunea de reîncercare automată.
Postcondiții:
•	Utilizatorul este autentificat în sistem cu o sesiune activă
•	Token-ul de autentificare este stocat securizat pe device
•	Toate funcționalitățile aplicației sunt disponibile utilizatorului
•	Evenimentul de autentificare este înregistrat în sistemul de auditare
Cazul de utilizare 2: Scanarea QR Code pentru acumularea punctelor de loialitateActori implicați: Utilizator autentificat, Comerciant/Cafenea parteneră, QRService, UserService, TransactionServicePrecondiții:
•	Utilizatorul este autentificat în aplicația CoffeeShare
•	Device-ul are cameră funcțională cu permisiuni acordate aplicației
•	Comerciantul a generat un QR code valid prin sistemul partener
•	QR code-ul nu a expirat și este activ în sistem
Scenariul principal de succes:
1.	Accesarea scanner-ului QR: Utilizatorul navighează către funcționalitatea de scanare prin apăsarea butonului "Scanează QR" de pe dashboard-ul principal sau prin utilizarea navigației rapide din meniul inferior.
2.	Solicitarea permisiunilor cameră: La prima utilizare, aplicația solicită permisiunea de acces la cameră. Utilizatorul acordă permisiunea, iar aplicația salvează această preferință pentru utilizări viitoare.
3.	Activarea camerei și interfața de scanare: Se deschide interfața de scanare cu preview-ul camerei în timp real, ghiduri vizuale pentru poziționarea corectă a QR code-ului, și instrucțiuni clare pentru utilizator ("Poziționează QR code-ul în cadrul marcat").
4.	Detectarea și citirea QR code-ului: Când camera detectează un QR code în cadru, sistemul îl citește automat și extrage datele JSON care conțin:
•	ID-ul unic al QR code-ului
•	Timestamp-ul generării
•	Suma tranzacției asociate
•	ID-ul cafenelei emitente
•	Semnătura digitală pentru validare
5.	Validarea autenticității QR code-ului: QRService execută o serie de verificări:
•	Validarea formatului JSON și a structurii datelor
•	Verificarea semnăturii digitale pentru prevenirea falsificării
•	Controlul că QR code-ul nu a fost folosit anterior
•	Verificarea că nu a expirat (validitate de 24 ore)
•	Confirmarea că cafeneaua emitentă este activă în sistem
6.	Calcularea punctelor de loialitate: Pe baza sumei tranzacției și a algoritmului de loialitate configurat (de exemplu, 1 punct pentru fiecare 10 lei cheltuiți), sistemul calculează numărul de puncte care vor fi acordate utilizatorului.
7.	Procesarea tranzacției: TransactionService creează o nouă înregistrare în baza de date cu toate detaliile:
•	ID-ul utilizatorului
•	Suma tranzacției
•	Punctele câștigate
•	Data și ora scanării
•	ID-ul QR code-ului
•	Statusul "completed"
8.	Actualizarea punctelor utilizatorului: UserService actualizează soldul de puncte de loialitate al utilizatorului în timp real, adăugând punctele nou câștigate la totalul existent.
9.	Dezactivarea QR code-ului: Pentru a preveni reutilizarea, QR code-ul este marcat ca folosit în baza de date și nu mai poate fi scanat din nou.
10.	Afișarea confirmării: Utilizatorul primește o confirmare vizuală cu animație de succes care afișează:
•	Numărul de puncte câștigate
•	Noul sold total de puncte
•	Detaliile tranzacției (suma, cafeneaua, data)
•	Opțiuni pentru partajarea realizării pe rețelele sociale
Scenarii alternative:
•	QR code invalid sau corupt: Sistemul afișează mesajul "QR code invalid. Te rugăm să încerci din nou sau să contactezi personalul cafenelei."
•	QR code expirat: Se afișează mesajul "QR code-ul a expirat. Te rugăm să soliciți unul nou de la comerciant."
•	QR code deja folosit: Sistemul informează utilizatorul că "QR code-ul a fost deja folosit" și sugerează verificarea cu personalul cafenelei.
•	Probleme de conectivitate: Tranzacția este salvată local și sincronizată automat când conexiunea este restabilită.
Postcondiții:
•	Punctele de loialitate ale utilizatorului sunt actualizate
•	Tranzacția este înregistrată complet în sistem
•	QR code-ul este dezactivat pentru a preveni reutilizarea
•	Utilizatorul primește confirmarea vizuală a operației reușite
Cazul de utilizare 3: Administrarea utilizatorilor și generarea rapoartelor analiticeActori implicați: Administrator sistem, AnalyticsService, UserService, SecurityServicePrecondiții:
•	Administratorul este autentificat cu credențiale de admin
•	Administratorul are permisiunile necesare pentru gestionarea utilizatorilor
•	Sistemul de analytics este operațional și colectează date
•	Baza de date conține suficiente date pentru generarea rapoartelor
Scenariul principal de succes:
1.	Accesarea panoului administrativ: Administratorul se autentifică în aplicația web de administrare folosind credențialele speciale și accesează dashboard-ul administrativ care afișează o privire de ansamblu asupra sistemului.
2.	Navigarea către gestionarea utilizatorilor: Din meniul principal, administratorul selectează secțiunea "Gestionare Utilizatori" care afișează o listă paginată cu toți utilizatorii înregistrați în sistem.
3.	Vizualizarea listei utilizatorilor: Sistemul afișează o tabelă comprehensivă cu informații despre utilizatori:
•	Numele complet și adresa de email
•	Data înregistrării și ultima autentificare
•	Statusul contului (activ, suspendat, inactiv)
•	Numărul total de puncte de loialitate
•	Numărul de tranzacții efectuate
•	Tipul de abonament (dacă există)
4.	Aplicarea filtrelor și căutării: Administratorul poate filtra utilizatorii după diverse criterii:
•	Perioada de înregistrare
•	Statusul contului
•	Nivelul de activitate
•	Tipul de abonament
•	Regiunea geografică
5.	Selectarea unui utilizator pentru gestionare: Administratorul selectează un utilizator specific din listă pentru a accesa profilul detaliat care conține:
•	Informații complete de profil
•	Istoricul complet al tranzacțiilor
•	Activitatea recentă în aplicație
•	Setările de securitate și preferințe
•	Logurile de autentificare și activitate
6.	Executarea acțiunilor administrative: Administratorul poate efectua diverse operații:
•	Suspendarea contului: Pentru utilizatori care încalcă termenii de utilizare
•	Reactivarea contului: Pentru utilizatori care au rezolvat problemele
•	Modificarea punctelor de loialitate: Pentru corecții sau bonusuri speciale
•	Resetarea parolei: Pentru utilizatori care au probleme de acces
•	Actualizarea informațiilor de profil: Pentru corecții sau actualizări
7.	Accesarea modulului de analytics: Administratorul navighează către secțiunea "Analytics și Rapoarte" pentru a vizualiza performanța sistemului și comportamentul utilizatorilor.
8.	Configurarea parametrilor raportului: Administratorul configurează raportul dorit specificând:
•	Perioada de analiză (ultima săptămână, luna, trimestrul)
•	Tipurile de metrici dorite (utilizatori activi, tranzacții, venituri)
•	Segmentarea datelor (pe regiuni, tipuri de utilizatori, cafenele)
•	Formatul de export (PDF, Excel, CSV)
9.	Generarea raportului analitic: AnalyticsService procesează cererea și generează un raport comprehensiv care include:
•	Metrici de utilizatori: Numărul de utilizatori noi, activi, și inactivi
•	Analiza tranzacțiilor: Volumul total, valoarea medie, tendințele temporale
•	Performanța cafenelelor: Ranking-ul partenerilor după numărul de tranzacții
•	Analiza comportamentală: Orele de vârf, zilele cu cea mai mare activitate
•	Indicatori financiari: Venituri generate, comisioane, profitabilitate
10.	Vizualizarea și exportul raportului: Administratorul poate vizualiza raportul în interfața web cu grafice interactive și poate exporta datele în formatul dorit pentru analize ulterioare sau prezentări către management.
11.	Configurarea alertelor automate: Administratorul poate configura alerte automate pentru:
•	Scăderea numărului de utilizatori activi sub un prag
•	Creșterea anormală a tranzacțiilor (posibil fraud)
•	Probleme tehnice în sistem
•	Atingerea unor obiective de business
Scenarii alternative:
•	Permisiuni insuficiente: Dacă administratorul nu are permisiunile necesare pentru o anumită operație, sistemul afișează un mesaj de eroare și înregistrează tentativa în logurile de securitate.
•	Utilizator inexistent: Dacă se încearcă gestionarea unui utilizator care nu mai există, sistemul afișează o eroare și actualizează lista.
•	Erori în generarea raportului: Dacă există probleme cu datele sau cu serviciul de analytics, sistemul oferă opțiuni de reîncercare și notifică echipa tehnică.
Postcondiții:
•	Modificările asupra utilizatorilor sunt salvate și auditate
•	Rapoartele generate sunt disponibile pentru download și analiză
•	Toate acțiunile administrative sunt înregistrate în logurile de sistem
•	Alertele configurate sunt active și monitorizează sistemul continuu
Aceste trei cazuri de utilizare ilustrează complexitatea și robustețea sistemului CoffeeShare, demonstrând cum am proiectat fiecare funcționalitate să gestioneze atât scenariile normale de utilizare, cât și situațiile excepționale, asigurând o experiență completă și sigură pentru toți utilizatorii platformei.

4.5 Prezentarea bazei de date și a structurii colecțiilorÎn dezvoltarea aplicației CoffeeShare, am proiectat o arhitectură de bază de date NoSQL folosind Firebase Firestore care să susțină toate funcționalitățile complexe ale sistemului. Structura pe care am conceput-o reflectă nevoile specifice ale unei platforme de coffee loyalty și gestionează eficient relațiile dintre utilizatori, parteneri, cafenele și tranzacții.

 

Am structurat baza de date în jurul a patru piloni principali: gestionarea utilizatorilor cu roluri diferențiate, sistemul de business pentru cafenele și produse, mecanismul de loialitate prin QR și tranzacții, și modulul de analytics pentru monitorizarea performanței. Această abordare modulară pe care am adoptat-o permite scalabilitatea și mentenanța facilă a sistemului.
Colecțiile pentru gestionarea utilizatorilor
Pentru a implementa un sistem robust de management al utilizatorilor cu roluri diferențiate, am creat trei colecții principale: users, admins și partners. Această separare pe care am proiectat-o permite gestionarea eficientă a permisiunilor și a datelor specifice fiecărui tip de utilizator.
Colecția users pe care am dezvoltat-o conține utilizatorii obișnuiți ai aplicației și include câmpurile esențiale: uid ca identificator unic, email și displayName pentru informații de bază, role pentru diferențierea tipurilor de utilizatori, status pentru controlul accesului, și subscription pentru datele de abonament. Am inclus și câmpuri pentru preferences și stats care îmi permit să personalizez experiența fiecărui utilizator.
Colecția admins pe care am creat-o extinde conceptul de utilizator cu funcționalități administrative specifice. Am adăugat câmpuri pentru permissions care definesc exact ce operații poate efectua fiecare administrator, și accessLevel care diferențiază între administratori standard și super-administratori.

Pentru colecția partners pe care am implementat-o, am inclus informații specifice business-ului: businessName, businessAddress, verificationStatus pentru controlul calității partenerilor, și businessInfo pentru detalii suplimentare despre afacere.

Sistemul de business pentru cafenele și produse
Colecția cafes pe care am proiectat-o reprezintă inima sistemului de parteneri și conține toate informațiile necesare pentru gestionarea locațiilor comerciale. Am inclus câmpuri pentru businessName, address, location cu coordonate GPS pentru integrarea cu hărțile, openingHours pentru afișarea programului, și câmpuri boolean pentru tipurile de abonamente acceptate (acceptsStudentSubscription, acceptsEliteSubscription, etc.).
Relația dintre cafenele și proprietari o gestionez prin câmpurile ownerEmail și partnerUid, care îmi permit să identific rapid toate cafenelele unui partener. Câmpul status pe care l-am implementat controlează vizibilitatea cafenelelor în aplicație.
Colecția products pe care am dezvoltat-o stochează toate produsele disponibile în cafenele. Fiecare produs are name, priceLei pentru prețul în lei, beansValue pentru valoarea în puncte de loialitate, imageUrl pentru afișarea vizuală, cafeId pentru legătura cu cafeneaua, și category pentru organizarea produselor.
Sistemul de abonamente și loialitate
Pentru gestionarea abonamentelor, am creat două colecții complementare: subscriptions pentru planurile disponibile și userSubscriptions pentru abonamentele active ale utilizatorilor.
Colecția subscriptions pe care am proiectat-o conține planurile de abonament cu name, credits pentru numărul de puncte incluse, price pentru costul în lei, și câmpuri pentru marketing precum popular și tag. Câmpul isActive îmi permite să controlez vizibilitatea planurilor.
În colecția userSubscriptions pe care am implementat-o, gestionez abonamentele active ale utilizatorilor cu creditsTotal și creditsLeft pentru tracking-ul punctelor, status pentru starea abonamentului, și timestamp-uri pentru activatedAt și expiresAt.
Sistemul QR și tranzacții
Colecția qrTokens pe care am dezvoltat-o gestionează codurile QR generate de utilizatori. Fiecare token are userId pentru proprietar, token pentru valoarea unică, expiresAt pentru limitarea în timp, isActive pentru controlul validității, și type care diferențiază între "instant" și "checkout". Câmpul cartTotalBeans îmi permite să stochez valoarea coșului pentru evitarea problemelor de permisiuni.
Colecția transactions pe care am creat-o înregistrează toate tranzacțiile din sistem și servește ca audit trail complet. Include informații despre partnerId, userId, cafeId, beansUsed, earningsRon, și scannedAt pentru timestamp-ul exact. Câmpul items stochează detaliile produselor pentru tranzacțiile de tip checkout.
Gestionarea coșului și wishlist-ului
Colecția userCarts pe care am implementat-o gestionează coșurile de cumpărături ale utilizatorilor. Fiecare coș conține items ca array de produse, totalBeans pentru valoarea totală, și cafeId pentru a asigura că toate produsele sunt din aceeași cafenea.
Colecția wishlist pe care am dezvoltat-o permite utilizatorilor să salveze cafenelele favorite. Include userId, cafeId, și informații denormalizate precum cafeName și cafeAddress pentru afișarea rapidă.
Sistemul de analytics și raportare
Pentru monitorizarea performanței, am creat mai multe colecții specializate. Colecția partnerAnalyticsProfiles pe care am proiectat-o stochează statistici cumulative pentru fiecare partener: totalEarnings, totalScans, totalBeansProcessed, și timestamp-uri pentru firstScanAt și lastScanAt.
Colecția partnerReports pe care am implementat-o generează rapoarte zilnice detaliate cu scansCount, totalBeansUsed, totalEarningsRON, uniqueCustomers ca array de ID-uri, și hourlyDistribution pentru analiza orelor de vârf.
Pentru statistici globale, am creat colecția globalStatistics care agregă date din întregul sistem: numărul total de utilizatori, parteneri, cafenele, venituri, și rate de creștere. Această colecție o actualizez periodic pentru a oferi dashboard-uri administrative în timp real.
Sistemul de activități și notificări
Colecția userActivities pe care am dezvoltat-o înregistrează toate acțiunile importante ale utilizatorilor pentru analytics și personalizare. Fiecare activitate are type, description, data pentru informații suplimentare, și referințe către cafeId și productId când este relevant.
Colecția userNotifications pe care am implementat-o gestionează sistemul de notificări cu type, title, message, priority, și read pentru statusul de citire. Câmpurile expiresAt și actionUrl îmi permit să creez notificări interactive și temporare.
Gestionarea parteneriatelor
Pentru procesul de înregistrare a partenerilor, am creat colecția pendingPartnerRegistrations care gestionează invitațiile administrative. Include confirmationToken pentru linkurile de confirmare, status pentru tracking-ul procesului, și expiresAt pentru limitarea în timp a invitațiilor.
Colecția partnership_requests pe care am dezvoltat-o gestionează cererile spontane de parteneriat cu informații de contact și business.
Indexarea și optimizarea performanței
Pentru a asigura performanțe optime, am proiectat indexuri composite strategice. Pentru colecția transactions, am creat indexuri pentru (userId, scannedAt desc) și (partnerId, scannedAt desc) care optimizează query-urile de istoric. Pentru qrTokens, indexul (userId, isActive) accelerează căutarea token-urilor active.
Am implementat și indexuri simple pentru câmpurile frecvent căutate: email în users, status în cafes, și cafeId în products. Aceste indexuri pe care le-am configurat reduc semnificativ timpul de răspuns al aplicației.
Strategii de denormalizare
Pentru a optimiza performanțele, am adoptat strategii de denormalizare controlată. În colecția transactions, stochez partnerName și cafeName pentru a evita join-uri costisitoare. În userCarts, includ cafeName pentru afișarea rapidă fără query-uri suplimentare.
Această denormalizare pe care am implementat-o necesită actualizări coordonate când se modifică datele principale, dar îmbunătățește semnificativ experiența utilizatorului prin reducerea timpilor de încărcare.
Securitatea și validarea datelor
Am implementat reguli de securitate Firestore care controlează accesul la fiecare colecție. Utilizatorii pot accesa doar propriile date din userCarts și wishlist, partenerii pot modifica doar cafenelele și produsele proprii, iar administratorii au acces complet controlat prin verificarea rolului.
Validarea datelor o realizez atât pe client prin TypeScript interfaces, cât și pe server prin Firebase Security Rules care verifică tipurile de date și restricțiile de business.
Scalabilitatea și mentenanța
Arhitectura pe care am proiectat-o permite scalarea orizontală prin sharding-ul natural al Firestore. Colecțiile sunt organizate pentru a minimiza hot-spots și a distribui uniform încărcarea.
Pentru mentenanță, am implementat servicii de curățare automată pentru token-urile expirate și notificările vechi. Serviciul statisticsUpdateService pe care l-am dezvoltat actualizează automat statisticile globale când se produc modificări în datele de bază.
Această arhitectură de bază de date pe care am conceput-o oferă fundația solidă pentru toate funcționalitățile CoffeeShare, asigurând performanțe optime, securitate robustă și scalabilitate pentru creșterea viitoare a platformei.

6. UTILIZAREA - TESTE AUTOMATE
6.1 Introducere în testarea automată
Testarea automată reprezintă o componentă esențială în dezvoltarea aplicațiilor mobile moderne, asigurând calitatea și fiabilitatea funcționalităților implementate. Pentru aplicația CoffeeShare, am implementat un sistem complet de teste automate utilizând framework-ul Cypress, care permite testarea end-to-end (E2E) a aplicației React Native prin interfața web Expo.Alegerea Cypress s-a bazat pe următoarele criterii tehnice: suport nativ pentru aplicațiile JavaScript/TypeScript, capacitatea de a testa aplicații React Native prin Expo web, interfață intuitivă pentru debugging și dezvoltare, integrare cu servicii cloud pentru raportare centralizată și suport pentru teste în timp real cu înregistrare video.
6.2 Configurarea infrastructurii de testare
6.2.1 Setup-ul inițial Cypress
Am configurat Cypress pentru a funcționa cu aplicația CoffeeShare prin următoarea arhitectură de bază:

 

Configurația reflectă specificul aplicației mobile prin setarea unui viewport de 375x667 pixeli, simulând un ecran de telefon, și prin activarea înregistrării video pentru toate testele. Această abordare permite testarea aplicației React Native într-un mediu web controlat, menținând în același timp comportamentul specific platformei mobile.

 

6.2.2 Comenzi personalizate pentru CoffeeShare
Am dezvoltat un set de comenzi personalizate specifice funcționalităților aplicației, care encapsulează logica complexă de interacțiune și permit reutilizarea în multiple teste:

 

Aceste comenzi simplifică procesul de testare prin abstractizarea operațiunilor complexe precum autentificarea utilizatorilor și simularea scanării codurilor QR, aspecte fundamentale ale aplicației CoffeeShare.

6.2.3 Structura organizațională a testelor
Am organizat testele într-o structură modulară care reflectă arhitectura aplicației, cu fișiere separate pentru fiecare funcționalitate majoră: auth.cy.js pentru autentificare, qr-system-working.cy.js pentru sistemul QR funcțional, și subscription-management.cy.js pentru gestionarea abonamentelor. Această organizare facilitează mentenanța și extinderea testelor pe măsură ce aplicația evoluează.
6.3 Implementarea testelor pentru sistemul QR
6.3.1 Testarea generării și validării codurilor QR
Sistemul QR reprezintă funcționalitatea centrală a aplicației CoffeeShare. Am implementat teste comprehensive pentru validarea întregului flux, de la generarea codurilor până la procesarea lor în cafenele:

 

Aceste teste asigură că sistemul de securitate funcționează corect, respingând codurile QR expirate sau invalide și acceptând doar cele autentice. Validarea include verificarea timestamp-urilor, semnăturilor digitale și integritatea datelor transmise.
6.4 Testarea sistemului de abonamente
6.4.1 Validarea statusului și restricțiilor abonamentului
Am dezvoltat teste pentru verificarea corectitudinii afișării informațiilor despre abonament și aplicarea restricțiilor corespunzătoare:

 

Testele verifică că aplicația afișează corect informațiile despre abonament, inclusiv numărul de beans rămase și statusul activ. De asemenea, validează că restricțiile sunt aplicate corect când abonamentul expiră, blocând generarea de noi coduri QR.

 

6.5 Integrarea cu Cypress Cloud și monitorizarea
6.5.1 Configurarea pentru cloud recording
Am configurat proiectul pentru a utiliza Cypress Cloud, permițând monitorizarea centralizată a testelor și accesul la un dashboard complet cu statistici și istoric:

 

Integrarea cu Cypress Cloud oferă beneficii semnificative: dashboard centralizat cu rezultatele testelor, înregistrări video automate pentru fiecare test, screenshots la eșecuri pentru debugging rapid, istoric complet al rulărilor pentru tracking progres și analytics despre performanța testelor în timp.

6.5.2 Utilizarea datelor mock și fixtures
Am creat un sistem robust de date mock pentru a asigura consistența testelor, utilizând fișiere JSON cu date predefinite pentru utilizatori, abonamente și tokeni QR. Această abordare permite testarea în condiții controlate, fără dependențe externe:

 


6.6 Rezultatele testării și analiza performanței
6.6.1 Statistici generale și rata de succes
După implementarea completă a infrastructurii de testare, am obținut următoarele rezultate concrete:

 
6.6.2 Analiza detaliată a funcționalităților testate
Testele QR au atins o rată de succes de 100%, validând complet funcționalitatea centrală a aplicației. Acestea includ: generarea codurilor QR, validarea securității, procesarea răspunsurilor API, gestionarea erorilor și integrarea cu sistemul de abonamente. Fiecare test rulează în aproximativ 2-4 secunde, demonstrând performanța optimă a aplicației.
Testele de autentificare, deși implementate corect din punct de vedere logic, nu pot fi executate din cauza lipsei atributelor data-testid în componentele React Native. Această problemă tehnică poate fi rezolvată prin adăugarea acestor atribute în fișierele .tsx din directorul app/(auth)/.
6.7 Provocări tehnice și soluții implementate
6.7.1 Compatibilitatea React Native - Cypress
Principala provocare a fost adaptarea Cypress, optimizat pentru aplicații web, la testarea aplicațiilor React Native. Am rezolvat această problemă prin utilizarea Expo web pentru a rula aplicația în browser, configurarea viewport-ului pentru a simula experiența mobile și adaptarea selectorilor pentru componentele React Native transpilate.
6.7.2 Gestionarea stării aplicației și mockarea serviciilor
Pentru a menține o stare consistentă între teste, am implementat proceduri de curățare a localStorage, cookies și sessionStorage înainte de fiecare test. De asemenea, am dezvoltat un sistem complet de mockare a serviciilor Firebase pentru a evita dependențele externe și a asigura rezultate predictibile.
6.8 Beneficiile și impactul implementării
Implementarea sistemului de teste automate pentru CoffeeShare a demonstrat valoarea acestei abordări în dezvoltarea aplicațiilor mobile. Cu o rată de succes de 100% pentru testele sistemului QR, am validat funcționalitatea centrală a aplicației și am creat o fundație solidă pentru dezvoltarea viitoare.
Beneficiile concrete includ: detectarea timpurie a bug-urilor, refactoring sigur cu validare automată, documentație vie a funcționalităților și feedback rapid pentru dezvoltatori. Pentru proiectul academic, testele demonstrează competențe tehnice avansate, utilizarea metodologiilor profesionale și validarea completă a funcționalităților implementate.
Următorii pași pentru îmbunătățirea testării includ completarea testelor de autentificare prin adăugarea atributelor data-testid, extinderea testelor de performanță, implementarea testelor de securitate pentru validarea SSL pinning și integrarea cu CI/CD pipeline pentru rularea automată la fiecare commit.


7. CONCLUZII
7.1 Realizări obținute
În cadrul acestei lucrări de licență am reușit să dezvolt o aplicație mobilă completă și funcțională pentru industria cafelei, numită CoffeeShare, care implementează tehnologii moderne și practici avansate de securitate. Aplicația dezvoltată reprezintă o soluție inovatoare care combină conceptele de customer loyalty, plăți digitale și management centralizat într-o arhitectură scalabilă și sigură.
Principalele realizări concrete includ:
•	Dezvoltarea unei aplicații React Native cu TypeScript care funcționează pe ambele platforme mobile (iOS și Android)
•	Implementarea unui sistem complet de autentificare Firebase cu măsuri suplimentare de securitate
•	Crearea unui sistem QR de scanare pentru acumularea punctelor de loialitate
•	Dezvoltarea unui dashboard administrativ pentru gestionarea utilizatorilor și analizarea datelor
•	Implementarea unui sistem robust de teste automate folosind Cypress pentru validarea funcționalităților
7.2 Probleme tehnice întâmpinate și soluții implementate
Pe parcursul dezvoltării aplicației CoffeeShare am întâmpinat mai multe provocări tehnice semnificative care au necesitat soluții creative și aprofundarea cunoștințelor în domeniul dezvoltării mobile.
Problema 1: Conflicte de dependențe în ecosystemul React Native
Prima provocare majoră a fost gestionarea conflictelor între diferitele versiuni ale bibliotecilor și SDK-ul Expo. Inițial am întâmpinat incompatibilități între Expo SDK 52 și instrumentele moderne de build, ceea ce genera erori în procesul de compilare. Soluția implementată a constat în actualizarea la Expo SDK 53 și configurarea corectă a tuturor dependențelor prin utilizarea flag-ului --legacy-peer-deps pentru instalarea pachetelor cu conflicte de versiuni.
Problema 2: Implementarea SSL Pinning în React Native
O altă provocare tehnică complexă a fost implementarea SSL Certificate Pinning pentru a asigura securitatea comunicării cu backend-ul Firebase. Această funcționalitate nu este disponibilă nativ în React Native, ceea ce a necesitat utilizarea bibliotecii react-native-ssl-pinning și configurarea manuală a certificatelor pentru fiecare platformă (iOS și Android). Soluția finală include validarea certificatelor la nivel de aplicație și gestionarea erorilor de conexiune în cazul în care certificatul nu corespunde.
Problema 3: Integrarea TypeScript cu Firebase
Asigurarea type safety-ului în contextul Firebase a reprezentat o provocare deoarece multe dintre funcțiile Firebase returnează tipuri generice care nu oferă informații complete despre structura datelor. Am rezolvat această problemă prin definirea interfețelor TypeScript personalizate pentru toate entitățile din aplicație (User, Transaction, QRCode, etc.) și crearea de wrapper-e tipizate pentru serviciile Firebase.
Problema 4: Configurarea testelor Cypress pentru React Native
Implementarea testelor automate pentru o aplicație React Native prin Expo web a necesitat configurări specifice deoarece Cypress nu suportă nativ testarea aplicațiilor mobile. Soluția implementată a constat în configurarea Cypress pentru a testa versiunea web a aplicației Expo, crearea de comenzi personalizate pentru simularea funcționalităților mobile și implementarea unui sistem de mock-uri pentru componentele native.
7.3 Plusurile aplicației dezvoltate față de soluțiile existente
CoffeeShare se diferențiază semnificativ de aplicațiile similare existente pe piață prin mai multe aspecte inovatoare și tehnice avansate.
Din punct de vedere al securității, aplicația implementează măsuri de protecție care lipsesc din majoritatea soluțiilor concurente. SSL Certificate Pinning asigură că comunicarea cu serverul nu poate fi interceptată prin atacuri man-in-the-middle, în timp ce sistemul de device detection previne utilizarea aplicației pe dispozitive compromise. Aceste funcționalități de securitate avansată nu sunt prezente în aplicații precum Costa Coffee Club sau aplicațiile generice de loyalty cards.
Arhitectura tehnică modernă bazată pe React Native cu TypeScript oferă avantaje semnificative în ceea ce privește mentenabilitatea și scalabilitatea codului. Spre deosebire de aplicații native separate pentru iOS și Android (cum este cazul Starbucks), CoffeeShare beneficiază de o bază de cod unificată care reduce costurile de dezvoltare și mentenanță.
Sistemul de management centralizat prin dashboard-ul administrativ permite gestionarea în timp real a utilizatorilor, configurarea parametrilor sistemului și analiza detaliată a comportamentului clienților. Această funcționalitate lipsește din majoritatea aplicațiilor concurente care se concentrează exclusiv pe experiența utilizatorului final.
Suportul offline complet cu sincronizare automată asigură funcționarea aplicației chiar și în condiții de conectivitate limitată, o caracteristică care nu este disponibilă în aplicații precum Pret A Manger sau aplicațiile de tip Progressive Web App.
7.4 Dezvoltări viitoare și direcții de extindere
Aplicația CoffeeShare reprezintă o fundație solidă pentru dezvoltări ulterioare care pot extinde semnificativ funcționalitatea și valoarea oferită utilizatorilor.
În primul rând, planific integrarea sistemelor de plată moderne precum Stripe și PayPal pentru a permite tranzacții complete în cadrul aplicației. Această funcționalitate va transforma CoffeeShare dintr-o aplicație de loyalty într-o platformă completă de e-commerce pentru industria cafelei.
O direcție promițătoare de dezvoltare este implementarea algoritmilor de machine learning pentru recomandări personalizate bazate pe istoricul de consum al utilizatorilor. Prin analizarea datelor de tranzacții și preferințelor individuale, aplicația va putea sugera produse și oferte personalizate, crescând astfel angajamentul clienților.
Expansiunea către multiple cafenele și rețele de magazine reprezintă o oportunitate majoră de scalare. Planific dezvoltarea unui sistem multi-tenant care să permită mai multor business-uri să utilizeze platforma CoffeeShare, fiecare cu propriile configurări și branding.
Explorarea tehnologiei blockchain pentru tokenizarea punctelor de loialitate ar putea revoluționa conceptul de fidelizare a clienților, permițând transferul și schimbul de puncte între diferite rețele de cafenele partenere.
Implementarea funcționalităților de Augmented Reality (AR) pentru meniuri interactive și prezentarea produselor ar putea îmbunătăți semnificativ experiența utilizatorului și diferenția aplicația pe piața din ce în ce mai competitivă.
În final, adăugarea componentelor sociale precum partajarea experiențelor, review-uri și recomandări între utilizatori ar putea transforma CoffeeShare într-o comunitate activă de iubitori de cafea, crescând retenția și angajamentul utilizatorilor pe termen lung.
Această lucrare de licență demonstrează că prin combinarea tehnologiilor moderne cu o înțelegere profundă a nevoilor pieței, se pot dezvolta soluții software inovatoare care aduc valoare reală atât pentru utilizatorii finali, cât și pentru business-urile din industria ospitalității.

BIBLIOGRAFIE

[1] Starbucks Corporation. (2024). "Starbucks Mobile App - Features and Analytics". Disponibil la: https://www.starbucks.com/rewards/mobile-apps [Accesat: 15 ianuarie 2025]

[2] Costa Coffee. (2024). "Costa Coffee Club App - User Guide and Features". Disponibil la: https://www.costa.co.uk/costa-coffee-club [Accesat: 15 ianuarie 2025]

[3] Pret A Manger. (2024). "YourPret Coffee Subscription Service". Disponibil la: https://www.pret.co.uk/en-GB/yourpret-coffee-subscription [Accesat: 15 ianuarie 2025]

[4] Edenred România. (2024). "ESX - Soluții digitale pentru beneficii angajați". Disponibil la: https://www.edenred.ro/esx [Accesat: 15 ianuarie 2025]

[5] 7card România. (2024). "Abonamente sportive și wellness". Disponibil la: https://7card.ro [Accesat: 15 ianuarie 2025]

[6] Stocard GmbH. (2024). "Digital Wallet for Loyalty Cards". Disponibil la: https://stocardapp.com [Accesat: 15 ianuarie 2025]

[7] Meta Platforms Inc. (2024). "React Native Documentation". Disponibil la: https://reactnative.dev/docs/getting-started [Accesat: 10 ianuarie 2025]

[8] Expo. (2024). "Expo SDK Documentation". Disponibil la: https://docs.expo.dev [Accesat: 10 ianuarie 2025]

[9] Microsoft Corporation. (2024). "TypeScript Handbook". Disponibil la: https://www.typescriptlang.org/docs [Accesat: 10 ianuarie 2025]

[10] Google LLC. (2024). "Firebase Documentation". Disponibil la: https://firebase.google.com/docs [Accesat: 10 ianuarie 2025]

[11] Google LLC. (2024). "Cloud Firestore Documentation". Disponibil la: https://firebase.google.com/docs/firestore [Accesat: 10 ianuarie 2025]

[12] Cypress.io. (2024). "Cypress Testing Framework Documentation". Disponibil la: https://docs.cypress.io [Accesat: 12 ianuarie 2025]

[13] React Native Maps. (2024). "React Native Maps Documentation". Disponibil la: https://github.com/react-native-maps/react-native-maps [Accesat: 12 ianuarie 2025]

[14] Expo Location. (2024). "Expo Location API Documentation". Disponibil la: https://docs.expo.dev/versions/latest/sdk/location [Accesat: 12 ianuarie 2025]

[15] React Native SSL Pinning. (2024). "SSL Certificate Pinning for React Native". Disponibil la: https://github.com/MaxToyberman/react-native-ssl-pinning [Accesat: 12 ianuarie 2025]

[16] Sentry. (2024). "Application Performance Monitoring". Disponibil la: https://docs.sentry.io/platforms/react-native [Accesat: 12 ianuarie 2025]

[17] Institutul Național de Statistică. (2024). "Statistici privind sectorul HoReCa în România". Disponibil la: https://insse.ro [Accesat: 8 ianuarie 2025]

[18] Euromonitor International. (2024). "Coffee Market in Romania - Industry Report". Disponibil la: https://www.euromonitor.com [Accesat: 8 ianuarie 2025]

[19] Statista. (2024). "Mobile App Usage Statistics in Romania". Disponibil la: https://www.statista.com [Accesat: 8 ianuarie 2025]

[20] Nielsen. (2024). "Consumer Behavior in Digital Payments - Romania". Disponibil la: https://www.nielsen.com [Accesat: 8 ianuarie 2025]

