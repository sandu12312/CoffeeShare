rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuth() {
      return request.auth != null;
    }
    
    // MIGRATION SUPER USER - temporary full access for YywOKLC2d9MVBQjrCuUcUbBc7Vx1
    function isMigrationSuperUser() {
      return request.auth != null && request.auth.uid == "YywOKLC2d9MVBQjrCuUcUbBc7Vx1";
    }
    
    // TEMPORARY DEBUG ADMIN - Remove this in production!
    function isDebugAdmin() {
      return request.auth != null && (
        request.auth.token.email == "admin@coffeeshare.com" || // Replace with your email
        request.auth.uid == "YywOKLC2d9MVBQjrCuUcUbBc7Vx1" || // Your specific user ID
        request.auth.token.email == "maximcapinus@gmail.com" // Your email
      );
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    // Helper function to check if user has admin role
    function isAdmin() {
      return isMigrationSuperUser() || 
        isDebugAdmin() ||
        (isAuth() && (
          // Check in legacy users collection
          (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin") ||
          // Check in new admins collection
          exists(/databases/$(database)/documents/admins/$(request.auth.uid))
        ));
    }
    
    // Helper function to check if user has partner role (cafe owner)
    function isPartner() {
      return isMigrationSuperUser() || (isAuth() && (
        // Check in legacy users collection
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "partner") ||
        // Check in new coffeePartners collection by email
        (request.auth.token.email != null &&
         exists(/databases/$(database)/documents/coffeePartners/$(request.auth.token.email))) ||
        // Check in new coffeePartners collection by uid
        exists(/databases/$(database)/documents/coffeePartners/$(request.auth.uid))
      ));
    }
    
    // User profiles - MODIFIED: less restrictive update rules for self-updates
    match /users/{userId} {
      // Migration super user gets full access
      allow read, write: if isMigrationSuperUser();
      
      // Anyone can create a profile, including admins creating profiles for others
      allow create: if isAuth() && (request.auth.uid == userId || isAdmin());
      
      // Users can read their own profile, admins can read any profile
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can update their own profile (but not role), admins can update any profile
      allow update: if isAuth() && (
        (request.auth.uid == userId && 
         (!request.resource.data.keys().hasAny(['role']) || 
          resource.data.role == request.resource.data.role)) ||
        isAdmin()
      );
      
      // Only admins can delete profiles
      allow delete: if isAdmin();
    }
    
    // Admins collection - for admin users in new structure
    match /admins/{adminId} {
      // Migration super user gets full access
      allow read, write: if isMigrationSuperUser();
      
      // Admins can read all admin profiles
      allow read: if isAdmin();
      
      // Only admins can create new admin profiles
      allow create: if isAdmin();
      
      // Admins can update admin profiles
      allow update: if isAdmin();
      
      // Only admins can delete admin profiles
      allow delete: if isAdmin();
    }
    
    // Partners - main partner documents and subcollections
    match /partners/{partnerId} {
      // Allow partners to read/write their own main document, admins can access all
      allow read, write: if isAuth() && (
        request.auth.uid == partnerId ||
        request.auth.token.email == partnerId ||
        isAdmin()
      );
      
      // Analytics subcollection - partners can read their own, admins can read/write all
      match /analytics/{document=**} {
        allow read: if isAuth() && (
          request.auth.token.email == partnerId ||
          request.auth.uid == partnerId ||
          isAdmin()
        );
        allow write: if isAdmin(); // Only admins or system can write analytics
      }
      
      // Monthly summary subcollection
      match /monthlySummary/{document=**} {
        allow read: if isAuth() && (
          request.auth.token.email == partnerId ||
          request.auth.uid == partnerId ||
          isAdmin()
        );
        allow write: if isAdmin(); // Only admins or system can write summaries
      }
    }

    // Coffee Partners - partners can read/write their own data, admins can read/write all
    match /coffeePartners/{partnerId} {
      // Migration super user gets full access
      allow read, write: if isMigrationSuperUser();
      
      allow read: if isAuth() && (
        request.auth.token.email == partnerId || 
        request.auth.uid == partnerId ||
        isAdmin()
      );
      allow write: if isAuth() && (
        request.auth.token.email == partnerId || 
        request.auth.uid == partnerId ||
        isAdmin()
      );
    }
    
    // Activity logs - only accessible by the user or admins
    match /activityLogs/{logId} {
      // Migration super user gets full access
      allow read, write: if isMigrationSuperUser();
      
      allow create: if isAuth();
      allow read: if isAuth();
      allow update, delete: if isAdmin();
    }
    
    // Notifications - only accessible by the user
    match /notifications/{notificationId} {
      // Migration super user gets full access
      allow read, write: if isMigrationSuperUser();
      
      allow read, update: if isAuth() && resource.data.userId == request.auth.uid;
      allow create: if isAuth() && (request.resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }
    
    // QR codes - user can create, cafe can read and update
    match /qrCodes/{qrId} {
      // Migration super user gets full access
      allow read, write: if isMigrationSuperUser();
      
      allow create: if isAuth();
      allow read: if isAuth() && (
        resource.data.userId == request.auth.uid || 
        isPartner() || 
        isAdmin()
      );
      allow update: if isAuth() && (
        isPartner() || isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // Cafes - public read, partner/admin write
    match /cafes/{cafeId} {
      // Migration super user gets full access
      allow read, write: if isMigrationSuperUser();
      
      // Allow public read access to individual cafe documents
      allow get: if true;
      
      // Allow authenticated users to list all cafes (needed for admin functionality)
      allow list: if isAuth();
      
      // Allow creation of new cafes (needed for transferring partnership requests and admin registration)
      allow create: if isAuth();
      
      // Allow cafe owners to update their own cafes (check both ownerId and ownerEmail)
      allow update: if isAuth() && (
        resource.data.ownerId == request.auth.uid || 
        resource.data.ownerEmail == request.auth.token.email ||
        isAdmin()
      );
      
      // Only admins can delete cafes
      allow delete: if isAdmin();
    }
    
    // Products subcollection structure - cafe-specific products
    match /products/{cafeEmail}/items/{productId} {
      allow read: if true; // Public read for menu display
      allow write: if isAuth() && (
        request.auth.token.email == cafeEmail ||
        isPartner() || 
        isAdmin()
      );
    }
    
    // Products placeholder documents
    match /products/{cafeEmail}/placeholder/{placeholderId} {
      allow read, write: if isAuth() && (
        request.auth.token.email == cafeEmail ||
        isPartner() || 
        isAdmin()
      );
    }

    // Products - fallback for single-level products collection
    match /products/{productId} {
      allow read: if true;
      allow write: if isAuth() && (
        isPartner() || isAdmin()
      );
    }
    
    // Subscriptions - user can read/write their own, admin can read/write all
    // MODIFIED: more permissive to allow user subscription management and partner updates
    match /subscriptions/{subscriptionId} {
      // Migration super user gets full access
      allow read, write: if isMigrationSuperUser();
      
      // Read: any authenticated user can read subscriptions
      allow read: if isAuth();
      
      // Create: any authenticated user can create a subscription for themselves
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      
      // Update: partners can update subscriptions (for QR redemption), users can update their own
      allow update: if isAuth() && (
        isPartner() ||
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Delete: only admins can delete subscriptions
      allow delete: if isAdmin();
    }
    
    // Reviews - anyone can read, authenticated users can create
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuth() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
    }
    
    // Partnership requests - allow public write for form submissions
    match /partnership_requests/{requestId} {
      // Allow public read access to individual request documents
      allow get: if true;
      
      // Allow authenticated users to list all requests (needed for admin functionality)
      allow list: if isAuth();
      
      // Allow anyone to create a partnership request
      allow create: if true;
      
      // Allow authenticated users to delete requests (needed for transferring to cafes)
      allow delete: if isAuth();
      
      // Only admins can update requests
      allow update: if isAdmin();
    }
    
    // Pending Partner Registrations - admin-managed registration requests
    match /pendingPartnerRegistrations/{registrationId} {
      // Only admins can read pending registrations
      allow read: if isAdmin();
      
      // Only admins can create new registration requests
      allow create: if isAdmin();
      
      // Admins can update status, system can update via confirmation token
      allow update: if isAdmin();
      
      // Only admins can delete registrations
      allow delete: if isAdmin();
    }
    
    // Subscription Plans - admin-managed subscription offerings
    match /subscriptionPlans/{planId} {
      // Anyone can read subscription plans (for display)
      allow read: if true;
      
      // Only admins can create new plans
      allow create: if isAdmin();
      
      // Only admins can update plans
      allow update: if isAdmin();
      
      // Only admins can delete plans
      allow delete: if isAdmin();
    }
    
    // User Subscriptions - individual user subscription records
    match /userSubscriptions/{subscriptionId} {
      // Migration super user gets full access
      allow read, write: if isMigrationSuperUser();
      
      // Users can read their own subscriptions, admins can read all
      allow read: if isAuth();
      
      // Users can create their own subscriptions
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      
      // Partners can update subscriptions (for QR redemption), users can update their own
      allow update: if isAuth() && (
        isPartner() ||
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Only admins can delete subscriptions
      allow delete: if isAdmin();
    }
    
    // QR Tokens - secure token management for coffee redemption
    match /qrTokens/{tokenId} {
      // Migration super user gets full access
      allow read, write: if isMigrationSuperUser();
      
      // Any authenticated user can read QR tokens (needed for scanning)
      allow read: if isAuth();
      
      // Users can only create tokens for themselves
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      
      // Coffee partners can update tokens (for redemption), users can update their own
      allow update: if isAuth() && (
        isPartner() || 
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      
      // Tokens can be deleted by their owner, partners (for cleanup), or admins
      allow delete: if isAuth() && (
        resource.data.userId == request.auth.uid || 
        isPartner() ||
        isAdmin()
      );
    }
    
    // User Activities - logging system for coffee redemptions and other activities
    match /userActivities/{activityId} {
      // Migration super user gets full access
      allow read, write: if isMigrationSuperUser();
      
      // Users can read their own activities, admins can read all
      // Made more permissive for queries
      allow read: if isAuth();
      
      // Authenticated users can create activity logs (including partners for QR redemptions)
      allow create: if isAuth();
      
      // Partners can update activities (for QR redemption status), admins can update any
      allow update: if isAuth() && (
        isPartner() ||
        isAdmin()
      );
      
      // Only admins can delete activities
      allow delete: if isAdmin();
    }
    
    // User Carts - for shopping cart functionality
    match /userCarts/{userId} {
      // Migration super user gets full access
      allow read, write: if isMigrationSuperUser();
      
      // Users can read/write their own cart
      allow read, write: if isAuth() && request.auth.uid == userId;
      
      // Coffee partners can read/write user carts (needed for QR redemption and cart clearing)
      allow read, write: if isAuth() && isPartner();
      
      // Admins can read/write all carts
      allow read, write: if isAdmin();
    }
    
    // Orders - completed checkout transactions
    match /orders/{orderId} {
      // Migration super user gets full access
      allow read, write: if isMigrationSuperUser();
      
      // Users can read their own orders
      allow read: if isAuth() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      
      // Partners can read orders for their cafes
      allow read: if isAuth() && isPartner() && 
        resource.data.cafeId in 
        get(/databases/$(database)/documents/cafes/$(resource.data.cafeId)).data.ownerEmail == request.auth.token.email;
      
      // System can create orders (via QR validation)
      allow create: if isAuth();
      
      // Only admins can update/delete orders
      allow update, delete: if isAdmin();
    }

    // Partner Reports - daily aggregated analytics
    match /partnerReports/{reportId} {
      // Migration super user gets full access
      allow read, write: if isMigrationSuperUser();
      
      // Coffee partners can read/write/create their own reports
      allow read, write, create: if isAuth() && isPartner();
      
      // Additional check for existing documents - partners can only access their own
      allow read, write: if isAuth() && isPartner() && 
        resource.data.partnerId == request.auth.uid;
      
      // Admins can read all reports
      allow read: if isAdmin();
      
      // Only admins can delete reports
      allow delete: if isAdmin();
    }

    // Transactions - individual scan records for traceability
    match /transactions/{transactionId} {
      // Migration super user gets full access
      allow read, write: if isMigrationSuperUser();
      
      // Coffee partners can read/create transactions
      allow read, create: if isAuth() && isPartner();
      
      // Additional check for existing documents - partners can only read their own
      allow read: if isAuth() && isPartner() && 
        resource.data.partnerId == request.auth.uid;
      
      // Admins can read all transactions
      allow read: if isAdmin();
      
      // Only admins can update/delete transactions
      allow update, delete: if isAdmin();
    }

    // Partner Analytics Profiles - partner aggregate statistics
    match /partnerAnalyticsProfiles/{partnerId} {
      // Migration super user gets full access
      allow read, write: if isMigrationSuperUser();
      
      // Coffee partners can read/write their own profile (using document ID)
      allow read, write, create: if isAuth() && isPartner() && partnerId == request.auth.uid;
      
      // Admins can read all profiles
      allow read: if isAdmin();
      
      // Only admins can delete profiles
      allow delete: if isAdmin();
    }
  }
} 