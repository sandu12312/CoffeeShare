rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuth() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    // Helper function to check if user has admin role
    function isAdmin() {
      return isAuth() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }
    
    // Helper function to check if user has partner role (cafe owner)
    function isPartner() {
      return isAuth() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "partner";
    }
    
    // User profiles
    match /users/{userId} {
      // Anyone can create a profile
      allow create: if isAuth() && request.auth.uid == userId;
      
      // Users can read and update their own profile
      allow read, update: if isOwner(userId) || isAdmin();
      
      // Only admins can delete profiles
      allow delete: if isAdmin();
    }
    
    // Activity logs - only accessible by the user or admins
    match /activityLogs/{logId} {
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      allow read: if isAuth() && (
        request.auth.uid == resource.data.userId || isAdmin()
      );
      allow update, delete: if isAdmin();
    }
    
    // Notifications - only accessible by the user
    match /notifications/{notificationId} {
      allow read, update: if isAuth() && resource.data.userId == request.auth.uid;
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      allow delete: if isAdmin();
    }
    
    // QR codes - user can create, cafe can read and update
    match /qrCodes/{qrId} {
      allow create: if isAuth();
      allow read: if isAuth() && (
        resource.data.userId == request.auth.uid || 
        isPartner() || 
        isAdmin()
      );
      allow update: if isAuth() && (
        isPartner() || isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // Cafes - public read, partner/admin write
    match /cafes/{cafeId} {
      allow read: if true; // Public read for all cafes
      allow create, update: if isAuth() && (
        resource.data.ownerId == request.auth.uid || 
        isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // Products - public read, partner/admin write
    match /products/{productId} {
      allow read: if true;
      allow write: if isAuth() && (
        isPartner() || isAdmin()
      );
    }
    
    // Subscriptions - user can read their own, admin can read/write all
    match /subscriptions/{subscriptionId} {
      allow read: if isAuth() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow write: if isAdmin();
    }
    
    // Reviews - anyone can read, authenticated users can create
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuth() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
    }
    
    // Partnership requests - allow public write for form submissions
    match /partnership_requests/{requestId} {
      allow read: if isAdmin();
      allow create: if true; // Allow anyone to create a partnership request
      allow update, delete: if isAdmin();
    }
  }
} 