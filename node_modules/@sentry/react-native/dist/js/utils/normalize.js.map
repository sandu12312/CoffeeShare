{"version":3,"file":"normalize.js","sourceRoot":"","sources":["../../../src/js/utils/normalize.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAEzC,MAAM,GAAG,GAAG,OAAO,CAAC;AAEpB;;GAEG;AACH,8DAA8D;AAC9D,MAAM,UAAU,yBAAyB,CAAC,IAAa;IACrD,MAAM,UAAU,GAAY,SAAS,CAAC,IAAI,CAAC,CAAC;IAC5C,IACE,UAAU,KAAK,IAAI;QACnB,OAAO,UAAU,KAAK,QAAQ;QAC9B,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC;QAC1B,UAAU,CAAC,WAAW,KAAK,MAAM,EACjC;QACA,8DAA8D;QAC9D,OAAO,UAAiC,CAAC;KAC1C;SAAM;QACL,OAAO;YACL,CAAC,GAAG,CAAC,EAAE,UAAU;SAClB,CAAC;KACH;AACH,CAAC","sourcesContent":["import { normalize } from '@sentry/core';\n\nconst KEY = 'value';\n\n/**\n * Converts any input into a valid record with string keys.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function convertToNormalizedObject(data: unknown): Record<string, any> {\n  const normalized: unknown = normalize(data);\n  if (\n    normalized !== null &&\n    typeof normalized === 'object' &&\n    !Array.isArray(normalized) &&\n    normalized.constructor === Object\n  ) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return normalized as Record<string, any>;\n  } else {\n    return {\n      [KEY]: normalized,\n    };\n  }\n}\n"]}