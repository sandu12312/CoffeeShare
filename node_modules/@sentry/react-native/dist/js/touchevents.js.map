{"version":3,"file":"touchevents.js","sourceRoot":"","sources":["../../src/js/touchevents.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { SeverityLevel } from '@sentry/core';\nimport { addBreadcrumb, dropUndefinedKeys, getClient, logger, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '@sentry/core';\nimport * as React from 'react';\nimport type { GestureResponderEvent } from 'react-native';\nimport { StyleSheet, View } from 'react-native';\n\nimport { createIntegration } from './integrations/factory';\nimport { startUserInteractionSpan } from './tracing/integrations/userInteraction';\nimport { UI_ACTION_TOUCH } from './tracing/ops';\nimport { SPAN_ORIGIN_AUTO_INTERACTION } from './tracing/origin';\n\nexport type TouchEventBoundaryProps = {\n  /**\n   * The category assigned to the breadcrumb that is logged by the touch event.\n   */\n  breadcrumbCategory?: string;\n  /**\n   * The type assigned to the breadcrumb that is logged by the touch event.\n   */\n  breadcrumbType?: string;\n  /**\n   * The max number of components to display when logging a touch's component tree.\n   */\n  maxComponentTreeSize?: number;\n  /**\n   * Component name(s) to ignore when logging the touch event. This prevents unhelpful logs such as\n   * \"Touch event within element: View\" where you still can't tell which View it occurred in.\n   */\n  ignoreNames?: Array<string | RegExp>;\n  /**\n   * Deprecated, use ignoreNames instead\n   * @deprecated\n   */\n  ignoredDisplayNames?: Array<string | RegExp>;\n  /**\n   * React Node wrapped by TouchEventBoundary.\n   */\n  children?: React.ReactNode;\n  /**\n   * Label Name used to identify the touched element.\n   */\n  labelName?: string;\n};\n\nconst touchEventStyles = StyleSheet.create({\n  wrapperView: {\n    flex: 1,\n  },\n});\n\nconst DEFAULT_BREADCRUMB_CATEGORY = 'touch';\nconst DEFAULT_BREADCRUMB_TYPE = 'user';\nconst DEFAULT_MAX_COMPONENT_TREE_SIZE = 20;\n\nconst SENTRY_LABEL_PROP_KEY = 'sentry-label';\nconst SENTRY_COMPONENT_PROP_KEY = 'data-sentry-component';\nconst SENTRY_ELEMENT_PROP_KEY = 'data-sentry-element';\nconst SENTRY_FILE_PROP_KEY = 'data-sentry-source-file';\n\ninterface ElementInstance {\n  elementType?: {\n    displayName?: string;\n    name?: string;\n  };\n  memoizedProps?: Record<string, unknown>;\n  return?: ElementInstance;\n}\n\ninterface TouchedComponentInfo {\n  name?: string;\n  label?: string;\n  element?: string;\n  file?: string;\n}\n\ninterface PrivateGestureResponderEvent extends GestureResponderEvent {\n  _targetInst?: ElementInstance;\n}\n\n/**\n * Boundary to log breadcrumbs for interaction events.\n */\nclass TouchEventBoundary extends React.Component<TouchEventBoundaryProps> {\n  public static displayName: string = '__Sentry.TouchEventBoundary';\n  public static defaultProps: Partial<TouchEventBoundaryProps> = {\n    breadcrumbCategory: DEFAULT_BREADCRUMB_CATEGORY,\n    breadcrumbType: DEFAULT_BREADCRUMB_TYPE,\n    ignoreNames: [],\n    maxComponentTreeSize: DEFAULT_MAX_COMPONENT_TREE_SIZE,\n  };\n\n  public readonly name: string = 'TouchEventBoundary';\n\n  /**\n   * Registers the TouchEventBoundary as a Sentry Integration.\n   */\n  public componentDidMount(): void {\n    const client = getClient();\n    client?.addIntegration?.(createIntegration(this.name));\n  }\n\n  /**\n   *\n   */\n  public render(): React.ReactNode {\n    return (\n      <View\n        style={touchEventStyles.wrapperView}\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        onTouchStart={this._onTouchStart.bind(this) as any}\n      >\n        {this.props.children}\n      </View>\n    );\n  }\n\n  /**\n   * Logs the touch event given the component tree names and a label.\n   */\n  private _logTouchEvent(touchPath: TouchedComponentInfo[], label?: string): void {\n    const level = 'info' as SeverityLevel;\n\n    const root = touchPath[0];\n    const detail = label ? label : `${root.name}${root.file ? ` (${root.file})` : ''}`;\n\n    const crumb = {\n      category: this.props.breadcrumbCategory,\n      data: { path: touchPath },\n      level: level,\n      message: `Touch event within element: ${detail}`,\n      type: this.props.breadcrumbType,\n    };\n    addBreadcrumb(crumb);\n\n    logger.log(`[TouchEvents] ${crumb.message}`);\n  }\n\n  /**\n   * Checks if the name is supposed to be ignored.\n   */\n  private _isNameIgnored(name: string): boolean {\n    let ignoreNames = this.props.ignoreNames || [];\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.props.ignoredDisplayNames) {\n      // This is to make it compatible with prior version.\n      // eslint-disable-next-line deprecation/deprecation\n      ignoreNames = [...ignoreNames, ...this.props.ignoredDisplayNames];\n    }\n\n    return ignoreNames.some(\n      (ignoreName: string | RegExp) =>\n        (typeof ignoreName === 'string' && name === ignoreName) ||\n        (ignoreName instanceof RegExp && name.match(ignoreName)),\n    );\n  }\n\n  // Originally was going to clean the names of any HOCs as well but decided that it might hinder debugging effectively. Will leave here in case\n  // private readonly _cleanName = (name: string): string =>\n  //   name.replace(/.*\\(/g, \"\").replace(/\\)/g, \"\");\n\n  /**\n   * Traverses through the component tree when a touch happens and logs it.\n   * @param e\n   */\n  // eslint-disable-next-line complexity\n  private _onTouchStart(e: PrivateGestureResponderEvent): void {\n    if (!e._targetInst) {\n      return;\n    }\n\n    let currentInst: ElementInstance | undefined = e._targetInst;\n    const touchPath: TouchedComponentInfo[] = [];\n\n    while (\n      currentInst &&\n      // maxComponentTreeSize will always be defined as we have a defaultProps. But ts needs a check so this is here.\n      this.props.maxComponentTreeSize &&\n      touchPath.length < this.props.maxComponentTreeSize\n    ) {\n      if (\n        // If the loop gets to the boundary itself, break.\n        currentInst.elementType?.displayName === TouchEventBoundary.displayName\n      ) {\n        break;\n      }\n\n      const info = getTouchedComponentInfo(currentInst, this.props.labelName);\n      this._pushIfNotIgnored(touchPath, info);\n\n      currentInst = currentInst.return;\n    }\n\n    const label = touchPath.find(info => info.label)?.label;\n    if (touchPath.length > 0) {\n      this._logTouchEvent(touchPath, label);\n    }\n\n    const span = startUserInteractionSpan({\n      elementId: label,\n      op: UI_ACTION_TOUCH,\n    });\n    if (span) {\n      span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SPAN_ORIGIN_AUTO_INTERACTION);\n    }\n  }\n\n  /**\n   * Pushes the name to the componentTreeNames array if it is not ignored.\n   */\n  private _pushIfNotIgnored(touchPath: TouchedComponentInfo[], value: TouchedComponentInfo | undefined): boolean {\n    if (!value) {\n      return false;\n    }\n\n    if (!value.name && !value.label) {\n      return false;\n    }\n    if (value.name && this._isNameIgnored(value.name)) {\n      return false;\n    }\n    if (value.label && this._isNameIgnored(value.label)) {\n      return false;\n    }\n\n    // Deduplicate same subsequent items.\n    if (touchPath.length > 0 && JSON.stringify(touchPath[touchPath.length - 1]) === JSON.stringify(value)) {\n      return false;\n    }\n\n    touchPath.push(value);\n    return true;\n  }\n}\n\nfunction getTouchedComponentInfo(currentInst: ElementInstance, labelKey: string | undefined): TouchedComponentInfo | undefined {\n  const displayName = currentInst.elementType?.displayName;\n\n  const props = currentInst.memoizedProps;\n  if (!props) {\n    // Early return if no props are available, as we can't extract any useful information\n    if (displayName) {\n      return {\n        name: displayName,\n      };\n    }\n    return undefined;\n  }\n\n  return dropUndefinedKeys<TouchedComponentInfo>({\n    // provided by @sentry/babel-plugin-component-annotate\n    name: getComponentName(props) || displayName,\n    element: getElementName(props),\n    file: getFileName(props),\n\n    // `sentry-label` or user defined label key\n    label: getLabelValue(props, labelKey),\n  });\n}\n\nfunction getComponentName(props: Record<string, unknown>): string | undefined {\n  return typeof props[SENTRY_COMPONENT_PROP_KEY] === 'string' &&\n    props[SENTRY_COMPONENT_PROP_KEY].length > 0 &&\n    props[SENTRY_COMPONENT_PROP_KEY] !== 'unknown' &&\n    props[SENTRY_COMPONENT_PROP_KEY] || undefined;\n}\n\nfunction getElementName(props: Record<string, unknown>): string | undefined {\n  return typeof props[SENTRY_ELEMENT_PROP_KEY] === 'string' &&\n    props[SENTRY_ELEMENT_PROP_KEY].length > 0 &&\n    props[SENTRY_ELEMENT_PROP_KEY] !== 'unknown' &&\n    props[SENTRY_ELEMENT_PROP_KEY] || undefined;\n}\n\nfunction getFileName(props: Record<string, unknown>): string | undefined {\n  return typeof props[SENTRY_FILE_PROP_KEY] === 'string' &&\n    props[SENTRY_FILE_PROP_KEY].length > 0 &&\n    props[SENTRY_FILE_PROP_KEY] !== 'unknown' &&\n    props[SENTRY_FILE_PROP_KEY] || undefined;\n}\n\nfunction getLabelValue(props: Record<string, unknown>, labelKey: string | undefined): string | undefined {\n  return typeof props[SENTRY_LABEL_PROP_KEY] === 'string' && props[SENTRY_LABEL_PROP_KEY].length > 0\n    ? props[SENTRY_LABEL_PROP_KEY] as string\n    // For some reason type narrowing doesn't work as expected with indexing when checking it all in one go in\n    // the \"check-label\" if sentence, so we have to assign it to a variable here first\n    : typeof labelKey === 'string' && typeof props[labelKey] == 'string' && (props[labelKey] as string).length > 0\n      ? props[labelKey] as string\n      : undefined;\n}\n\n/**\n * Convenience Higher-Order-Component for TouchEventBoundary\n * @param WrappedComponent any React Component\n * @param boundaryProps TouchEventBoundaryProps\n */\nconst withTouchEventBoundary = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  InnerComponent: React.ComponentType<any>,\n  boundaryProps?: TouchEventBoundaryProps,\n): React.FunctionComponent => {\n  const WrappedComponent: React.FunctionComponent = props => (\n    <TouchEventBoundary {...(boundaryProps ?? {})}>\n      <InnerComponent {...props} />\n    </TouchEventBoundary>\n  );\n\n  WrappedComponent.displayName = 'WithTouchEventBoundary';\n\n  return WrappedComponent;\n};\n\nexport { TouchEventBoundary, withTouchEventBoundary };\n"]}