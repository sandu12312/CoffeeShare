{"version":3,"file":"FeedbackWidget.types.js","sourceRoot":"","sources":["../../../src/js/feedback/FeedbackWidget.types.ts"],"names":[],"mappings":"","sourcesContent":["import type { FeedbackFormData } from '@sentry/core';\nimport type { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\n/**\n * The props for the feedback form\n */\nexport interface FeedbackWidgetProps\n  extends FeedbackGeneralConfiguration,\n    FeedbackTextConfiguration,\n    FeedbackCallbacks,\n    ImagePickerConfiguration {\n  styles?: FeedbackWidgetStyles;\n}\n\n/**\n * General feedback configuration\n */\nexport interface FeedbackGeneralConfiguration {\n  /**\n   * Show the Sentry branding\n   *\n   * @default true\n   */\n  showBranding?: boolean;\n\n  /**\n   * Should the email field be required?\n   */\n  isEmailRequired?: boolean;\n\n  /**\n   * Should the email field be validated?\n   */\n  shouldValidateEmail?: boolean;\n\n  /**\n   * Should the name field be required?\n   */\n  isNameRequired?: boolean;\n\n  /**\n   * Should the email input field be visible? Note: email will still be collected if set via `Sentry.setUser()`\n   */\n  showEmail?: boolean;\n\n  /**\n   * Should the name input field be visible? Note: name will still be collected if set via `Sentry.setUser()`\n   */\n  showName?: boolean;\n\n  /**\n   * This flag determines whether the \"Add Screenshot\" button is displayed\n   * @default false\n   */\n  enableScreenshot?: boolean;\n\n  /**\n   * This flag determines whether the \"Take Screenshot\" button is displayed\n   * @default false\n   */\n  enableTakeScreenshot?: boolean;\n\n  /**\n   * Fill in email/name input fields with Sentry user context if it exists.\n   * The value of the email/name keys represent the properties of your user context.\n   */\n  useSentryUser?: {\n    email: string;\n    name: string;\n  };\n}\n\n/**\n * All of the different text labels that can be customized\n */\nexport interface FeedbackTextConfiguration {\n  /**\n   * The label for the Feedback form cancel button that closes dialog\n   */\n  cancelButtonLabel?: string;\n\n  /**\n   * The label for the Feedback form submit button that sends feedback\n   */\n  submitButtonLabel?: string;\n\n  /**\n   * The title of the Feedback form\n   */\n  formTitle?: string;\n\n  /**\n   * Label for the email input\n   */\n  emailLabel?: string;\n\n  /**\n   * Placeholder text for Feedback email input\n   */\n  emailPlaceholder?: string;\n\n  /**\n   * Label for the message input\n   */\n  messageLabel?: string;\n\n  /**\n   * Placeholder text for Feedback message input\n   */\n  messagePlaceholder?: string;\n\n  /**\n   * Label for the name input\n   */\n  nameLabel?: string;\n\n  /**\n   * Message after feedback was sent successfully\n   */\n  successMessageText?: string;\n\n  /**\n   * Placeholder text for Feedback name input\n   */\n  namePlaceholder?: string;\n\n  /**\n   * Text which indicates that a field is required\n   */\n  isRequiredLabel?: string;\n\n  /**\n   * The label for the button that adds a screenshot\n   */\n  addScreenshotButtonLabel?: string;\n\n  /**\n   * The label for the button that removes a screenshot\n   */\n  removeScreenshotButtonLabel?: string;\n\n  /**\n   * The label for the button that shows the capture screenshot button\n   */\n  captureScreenshotButtonLabel?: string;\n\n  /**\n   * The title of the error dialog\n   */\n  errorTitle?: string;\n\n  /**\n   * The error message when the form is invalid\n   */\n  formError?: string;\n\n  /**\n   * The error message when the email is invalid\n   */\n  emailError?: string;\n\n  /**\n   * The error message when the capture screenshot fails\n   */\n  captureScreenshotError?: string;\n\n  /**\n   * Message when there is a generic error\n   */\n  genericError?: string;\n}\n\n/**\n * The FeedbackButton text labels that can be customized\n */\nexport interface FeedbackButtonTextConfiguration {\n  /**\n   * The label for the Feedback widget button that opens the dialog\n   */\n  triggerLabel?: string;\n\n  /**\n   * The aria label for the Feedback widget button that opens the dialog\n   */\n  triggerAriaLabel?: string;\n}\n\n/**\n * The ScreenshotButton text labels that can be customized\n */\nexport interface ScreenshotButtonTextConfiguration {\n  /**\n   * The label for the Screenshot button\n   */\n  triggerLabel?: string;\n\n  /**\n   * The aria label for the Screenshot button\n   */\n  triggerAriaLabel?: string;\n}\n\n/**\n * The public callbacks available for the feedback integration\n */\nexport interface FeedbackCallbacks {\n  /**\n   * Callback when form is opened\n   */\n  onFormOpen?: () => void;\n\n  /**\n   * Callback when form is closed and not submitted\n   */\n  onFormClose?: () => void;\n\n  /**\n   * Callback when a screenshot is added\n   */\n  onAddScreenshot?: (addScreenshot: (uri: string) => void) => void;\n\n  /**\n   * Callback when feedback is successfully submitted\n   *\n   * After this you'll see a SuccessMessage on the screen for a moment.\n   */\n  onSubmitSuccess?: (data: FeedbackFormData) => void;\n\n  /**\n   * Callback when feedback is unsuccessfully submitted\n   */\n  onSubmitError?: (error: Error) => void;\n\n  /**\n   * Callback when the feedback form is submitted successfully, and the SuccessMessage is complete, or dismissed\n   */\n  onFormSubmitted?: () => void;\n}\n\n/**\n * Image Picker configuration interface compatible with:\n * - `react-native-image-picker`: 7.2, 8.0\n * - `expo-image-picker`: 16.0`\n */\nexport interface ImagePickerConfiguration {\n  imagePicker?: ImagePicker;\n}\n\ninterface ImagePickerResponse {\n  assets?: ImagePickerAsset[];\n}\n\ninterface ImagePickerAsset {\n  fileName?: string;\n  uri?: string;\n  base64?: string;\n}\n\ninterface ExpoImageLibraryOptions {\n  mediaTypes?: 'images'[];\n  base64?: boolean;\n}\n\ninterface ReactNativeImageLibraryOptions {\n  mediaType: 'photo';\n  includeBase64?: boolean;\n}\n\nexport interface ImagePicker {\n  launchImageLibraryAsync?: (options?: ExpoImageLibraryOptions) => Promise<ImagePickerResponse>;\n\n  launchImageLibrary?: (options: ReactNativeImageLibraryOptions) => Promise<ImagePickerResponse>;\n}\n\n/**\n * The styles for the feedback form\n */\nexport interface FeedbackWidgetStyles {\n  container?: ViewStyle;\n  title?: TextStyle;\n  label?: TextStyle;\n  input?: TextStyle;\n  textArea?: TextStyle;\n  submitButton?: ViewStyle;\n  submitText?: TextStyle;\n  cancelButton?: ViewStyle;\n  cancelText?: TextStyle;\n  screenshotButton?: ViewStyle;\n  screenshotContainer?: ViewStyle;\n  screenshotThumbnail?: ImageStyle;\n  screenshotText?: TextStyle;\n  takeScreenshotButton?: ViewStyle;\n  takeScreenshotText?: TextStyle;\n  titleContainer?: ViewStyle;\n  sentryLogo?: ImageStyle;\n}\n\n/**\n * The props for the feedback button\n */\nexport interface FeedbackButtonProps extends FeedbackButtonTextConfiguration {\n  styles?: FeedbackButtonStyles;\n}\n\n/**\n * The styles for the feedback button\n */\nexport interface FeedbackButtonStyles {\n  triggerButton?: ViewStyle;\n  triggerText?: TextStyle;\n  triggerIcon?: ImageStyle;\n}\n\n/**\n * The props for the screenshot button\n */\nexport interface ScreenshotButtonProps extends ScreenshotButtonTextConfiguration {\n  styles?: ScreenshotButtonStyles;\n}\n\n/**\n * The styles for the screenshot button\n */\nexport interface ScreenshotButtonStyles {\n  triggerButton?: ViewStyle;\n  triggerText?: TextStyle;\n  triggerIcon?: ImageStyle;\n}\n\n/**\n * The state of the feedback form\n */\nexport interface FeedbackWidgetState {\n  isVisible: boolean;\n  name: string;\n  email: string;\n  description: string;\n  filename?: string;\n  attachment?: string | Uint8Array;\n  attachmentUri?: string;\n}\n"]}