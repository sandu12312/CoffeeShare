{"version":3,"file":"FeedbackWidget.js","sourceRoot":"","sources":["../../../src/js/feedback/FeedbackWidget.tsx"],"names":[],"mappings":";;;;;;;;;AAEA,OAAO,EAAE,eAAe,EAAE,eAAe,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AACrF,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,OAAO,EACL,UAAU,EACV,KAAK,EACL,QAAQ,EACR,IAAI,EACJ,SAAS,EACT,gBAAgB,EAChB,wBAAwB,EACxB,IAAI,EACL,MAAM,cAAc,CAAC;AAEtB,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAErD,OAAO,EAAE,cAAc,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,MAAM,YAAY,CAAC;AACxC,OAAO,EAAE,oBAAoB,EAAE,MAAM,YAAY,CAAC;AAClD,OAAO,aAAa,MAAM,yBAAyB,CAAC;AACpD,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAElD,OAAO,EAAE,kBAAkB,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AACnF,OAAO,EAAE,2BAA2B,EAAE,MAAM,QAAQ,CAAC;AACrD,OAAO,EAAE,qBAAqB,EAAE,MAAM,oBAAoB,CAAC;AAC3D,OAAO,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,YAAY,EAAG,MAAM,SAAS,CAAC;AAEjF;;;GAGG;AACH,MAAM,OAAO,cAAe,SAAQ,KAAK,CAAC,SAAmD;IAkB3F,YAAmB,KAA0B;;QAC3C,KAAK,CAAC,KAAK,CAAC,CAAC;QAHP,mBAAc,GAAY,KAAK,CAAC;QAuCjC,yBAAoB,GAAe,GAAG,EAAE;YAC7C,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAChD,MAAM,EAAE,eAAe,EAAE,aAAa,EAAE,eAAe,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YACvE,MAAM,IAAI,GAA8B,IAAI,CAAC,KAAK,CAAC;YAEnD,MAAM,WAAW,GAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,EAAE,CAAC;YACjC,MAAM,YAAY,GAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,EAAE,CAAC;YACnC,MAAM,kBAAkB,GAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,IAAI,EAAE,CAAC;YAE/C,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBACvH,mBAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;gBACrD,OAAO;aACR;YAED,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE;gBAC5H,mBAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;gBACtD,OAAO;aACR;YAED,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU;gBAChE,CAAC,CAAC;oBACE;wBACE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;wBAC7B,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU;qBAC5B;iBACF;gBACH,CAAC,CAAC,SAAS,CAAC;YAEZ,MAAM,OAAO,GAAG,WAAW,EAAE,CAAC;YAC9B,MAAM,YAAY,GAAuB;gBACvC,OAAO,EAAE,kBAAkB;gBAC3B,IAAI,EAAE,WAAW;gBACjB,KAAK,EAAE,YAAY;gBACnB,iBAAiB,EAAE,OAAO;aAC3B,CAAC;YAEF,IAAI;gBACF,IAAI,CAAC,eAAe,EAAE;oBACpB,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;iBACrC;gBACD,eAAe,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;gBACzE,eAAe,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE,OAAO,EAAE,kBAAkB,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC;gBACnH,mBAAmB,CAAC,IAAI,CAAC,kBAAkB,EAAG,EAAE,CAAC,CAAC;gBAClD,eAAe,EAAE,CAAC;gBAClB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;aAC5B;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,WAAW,GAAG,oCAAoC,KAAK,EAAE,CAAC;gBAChE,aAAa,CAAC,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;gBACtC,mBAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;gBACxD,MAAM,CAAC,KAAK,CAAC,oCAAoC,KAAK,EAAE,CAAC,CAAC;aAC3D;QACH,CAAC,CAAC;QAEK,4BAAuB,GAAe,GAAS,EAAE;YACtD,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE;gBAC1B,MAAM,wBAAwB,GAA6B,IAAI,CAAC,KAAK,CAAC;gBACtE,IAAI,wBAAwB,CAAC,WAAW,EAAE;oBACxC,MAAM,kBAAkB,GAAG,wBAAwB,CAAC,WAAW,CAAC,uBAAuB;wBACrF,yCAAyC;wBACzC,CAAC,CAAC,GAAG,EAAE,CAAC,wBAAwB,CAAC,WAAW,CAAC,uBAAuB,CAAC,EAAE,UAAU,EAAE,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC;wBACjH,iDAAiD;wBACjD,CAAC,CAAC,wBAAwB,CAAC,WAAW,CAAC,kBAAkB;4BACvD,CAAC,CAAC,GAAG,EAAE,CAAC,wBAAwB,CAAC,WAAW,CAAC,kBAAkB,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,EAAE,CAAC;4BAC/G,CAAC,CAAC,IAAI,CAAC;oBACX,IAAI,CAAC,kBAAkB,EAAE;wBACvB,MAAM,CAAC,IAAI,CAAC,wFAAwF,CAAC,CAAC;wBACtG,IAAI,OAAO,EAAE;4BACX,mBAAmB,CACjB,kBAAkB,EAClB,sIAAsI,CACvI,CAAC;yBACH;wBACD,OAAO;qBACR;oBAED,MAAM,MAAM,GAAG,MAAM,kBAAkB,EAAE,CAAC;oBAC1C,IAAI,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC7C,IAAI,KAAK,EAAE,EAAE;4BACX,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;4BAC3C,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;4BACtC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;4BACvC,MAAM,IAAI,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC;4BACxC,IAAI,IAAI,IAAI,IAAI,EAAE;gCAChB,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC;6BACxE;iCAAM;gCACL,MAAM,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;6BACtD;yBACF;6BAAM;4BACL,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;4BAC3C,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;4BACtC,cAAc,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;gCACrC,IAAI,IAAI,IAAI,IAAI,EAAE;oCAChB,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC;iCACxE;qCAAM;oCACL,MAAM,CAAC,KAAK,CAAC,qCAAqC,EAAE,QAAQ,CAAC,CAAC;iCAC/D;4BACH,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;gCACjB,MAAM,CAAC,KAAK,CAAC,qCAAqC,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;4BAClF,CAAC,CAAC,CAAC;yBACJ;qBACF;iBACF;qBAAM;oBACL,6CAA6C;oBAC7C,MAAM,EAAE,eAAe,EAAE,mCAAQ,oBAAoB,GAAK,IAAI,CAAC,KAAK,CAAE,CAAC;oBACvE,eAAe,CAAC,CAAC,GAAW,EAAE,EAAE;wBAC9B,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;4BAChC,IAAI,IAAI,IAAI,IAAI,EAAE;gCAChB,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,qBAAqB,EAAE,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC;6BAC1F;iCAAM;gCACL,MAAM,CAAC,KAAK,CAAC,qCAAqC,EAAE,GAAG,CAAC,CAAC;6BAC1D;wBACH,CAAC,CAAC;6BACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;4BACf,MAAM,CAAC,KAAK,CAAC,qCAAqC,EAAE,GAAG,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;wBAC7E,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC,CAAC;iBACJ;aACF;iBAAM;gBACL,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,aAAa,EAAE,SAAS,EAAE,CAAC,CAAC;aACzF;QACH,CAAC,CAAA,CAAA;QA+JO,2BAAsB,GAAG,CAAC,UAAsB,EAAQ,EAAE;YAChE,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,EAAE;gBAC3B,MAAM,CAAC,KAAK,CAAC,8BAA8B,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAClE,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,YAAY,EAAE,EAAE;oBAC3D,IAAI,YAAY,IAAI,IAAI,EAAE;wBACxB,MAAM,OAAO,GAAG,QAAQ,UAAU,CAAC,WAAW,WAAW,YAAY,EAAE,CAAC;wBACxE,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,UAAU,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC,IAAI,EAAE,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC;qBACvG;yBAAM;wBACL,MAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;qBACtE;gBACH,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;oBACjB,MAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,UAAU,CAAC,QAAQ,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;gBACzF,CAAC,CAAC,CAAC;aACJ;iBAAM;gBACL,MAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;aACtE;QACH,CAAC,CAAA;QAEO,mBAAc,GAAG,GAAS,EAAE;YAClC,cAAc,CAAC,WAAW,qBAAQ,IAAI,CAAC,KAAK,CAAE,CAAC;QACjD,CAAC,CAAC;QAEM,oBAAe,GAAG,GAAS,EAAE;YACnC,cAAc,CAAC,WAAW,GAAG;gBAC3B,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE,EAAE;gBACT,WAAW,EAAE,EAAE;gBACf,QAAQ,EAAE,SAAS;gBACnB,UAAU,EAAE,SAAS;gBACrB,aAAa,EAAE,SAAS;aACzB,CAAC;QACJ,CAAC,CAAC;QAEM,mBAAc,GAAG,GAAY,EAAE;YACrC,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,KAAK,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,KAAK,SAAS,CAAC;QAC5H,CAAC,CAAA;QA5VC,MAAM,WAAW,GAAG;YAClB,aAAa,EAAE;gBACb,KAAK,EAAE,CAAA,MAAA,MAAA,IAAI,CAAC,KAAK,0CAAE,aAAa,0CAAE,KAAK,MAAI,MAAA,MAAA,eAAe,EAAE,0CAAE,OAAO,EAAE,0CAAE,KAAK,CAAA,IAAI,EAAE;gBACpF,IAAI,EAAE,CAAA,MAAA,MAAA,IAAI,CAAC,KAAK,0CAAE,aAAa,0CAAE,IAAI,MAAI,MAAA,MAAA,eAAe,EAAE,0CAAE,OAAO,EAAE,0CAAE,IAAI,CAAA,IAAI,EAAE;aAClF;SACF,CAAA;QAED,IAAI,CAAC,KAAK,GAAG;YACX,SAAS,EAAE,IAAI;YACf,IAAI,EAAE,cAAc,CAAC,WAAW,CAAC,IAAI,IAAI,WAAW,CAAC,aAAa,CAAC,IAAI;YACvE,KAAK,EAAE,cAAc,CAAC,WAAW,CAAC,KAAK,IAAI,WAAW,CAAC,aAAa,CAAC,KAAK;YAC1E,WAAW,EAAE,cAAc,CAAC,WAAW,CAAC,WAAW,IAAI,EAAE;YACzD,QAAQ,EAAE,cAAc,CAAC,WAAW,CAAC,QAAQ,IAAI,SAAS;YAC1D,UAAU,EAAE,cAAc,CAAC,WAAW,CAAC,UAAU,IAAI,SAAS;YAC9D,aAAa,EAAE,cAAc,CAAC,WAAW,CAAC,aAAa,IAAI,SAAS;SACrE,CAAC;QAEF,2BAA2B,EAAE,CAAC;IAChC,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,KAAK;QACjB,cAAc,CAAC,WAAW,GAAG;YAC3B,IAAI,EAAE,EAAE;YACR,KAAK,EAAE,EAAE;YACT,WAAW,EAAE,EAAE;YACf,QAAQ,EAAE,SAAS;YACnB,UAAU,EAAE,SAAS;YACrB,aAAa,EAAE,SAAS;SACzB,CAAC;IACJ,CAAC;IA4HD;;OAEG;IACI,iBAAiB;QACtB,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC,iBAAiB,CAAC,GAAG,EAAE;YACtD,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,oBAAoB;QACzB,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;SAC7B;aAAM;YACL,IAAI,CAAC,cAAc,EAAE,CAAC;SACvB;QACD,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;SAC9B;IACH,CAAC;IAED;;OAEG;IACI,MAAM;QACX,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;QACzB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAChD,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACnC,MAAM,MAAM,GAAiC,IAAI,CAAC,KAAK,CAAC;QACxD,MAAM,wBAAwB,GAA6B,IAAI,CAAC,KAAK,CAAC;QACtE,MAAM,IAAI,GAA8B,IAAI,CAAC,KAAK,CAAC;QACnD,MAAM,MAAM,mCAA8B,aAAa,CAAC,KAAK,CAAC,GAAK,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,CAAC;QACvF,MAAM,QAAQ,GAAG,GAAS,EAAE;YAC1B,IAAI,WAAW,EAAE;gBACf,WAAW,EAAE,CAAC;aACf;iBAAM;gBACL,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;aACrC;QACH,CAAC,CAAA;QAED,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;YACzB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,UAAU,GAAG,qBAAqB,EAAE,CAAC;QAC3C,IAAI,UAAU,KAAK,0BAA0B,EAAE;YAC7C,UAAU,CAAC,GAAS,EAAE;gBACpB,mBAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;YACpE,CAAC,CAAA,EAAE,GAAG,CAAC,CAAC;SACT;aAAM,IAAI,UAAU,EAAE;YACrB,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;SACzC;QAED,OAAO,CACL,oBAAC,wBAAwB,IACvB,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAChD,UAAU,EAAE,KAAK,EACjB,2BAA2B,EAAE,KAAK;YAElC,oBAAC,IAAI,IAAC,KAAK,EAAE,MAAM,CAAC,SAAS;gBAC3B,oBAAC,IAAI,IAAC,KAAK,EAAE,MAAM,CAAC,cAAc;oBAChC,oBAAC,IAAI,IAAC,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,EAAC,4BAA4B,IAAE,IAAI,CAAC,SAAS,CAAQ;oBACrF,MAAM,CAAC,YAAY,IAAI,CACtB,oBAAC,KAAK,IACJ,MAAM,EAAE,EAAE,GAAG,EAAE,UAAU,EAAE,EAC3B,KAAK,EAAE,MAAM,CAAC,UAAU,EACxB,MAAM,EAAC,aAAa,GACpB,CACH,CACI;gBAEN,MAAM,CAAC,QAAQ,IAAI,CACpB;oBACE,oBAAC,IAAI,IAAC,KAAK,EAAE,MAAM,CAAC,KAAK;wBACtB,IAAI,CAAC,SAAS;wBACd,MAAM,CAAC,cAAc,IAAI,IAAI,IAAI,CAAC,eAAe,EAAE,CAC/C;oBACP,oBAAC,SAAS,IACR,KAAK,EAAE,MAAM,CAAC,KAAK,EACnB,MAAM,EAAC,4BAA4B,EACnC,WAAW,EAAE,IAAI,CAAC,eAAe,EACjC,KAAK,EAAE,IAAI,EACX,YAAY,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,GACvD,CACD,CACF;gBAEA,MAAM,CAAC,SAAS,IAAI,CACrB;oBACE,oBAAC,IAAI,IAAC,KAAK,EAAE,MAAM,CAAC,KAAK;wBACtB,IAAI,CAAC,UAAU;wBACf,MAAM,CAAC,eAAe,IAAI,IAAI,IAAI,CAAC,eAAe,EAAE,CAChD;oBACP,oBAAC,SAAS,IACR,KAAK,EAAE,MAAM,CAAC,KAAK,EACnB,MAAM,EAAC,6BAA6B,EACpC,WAAW,EAAE,IAAI,CAAC,gBAAgB,EAClC,YAAY,EAAE,eAAsC,EACpD,KAAK,EAAE,KAAK,EACZ,YAAY,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,GACxD,CACD,CACF;gBAED,oBAAC,IAAI,IAAC,KAAK,EAAE,MAAM,CAAC,KAAK;oBACtB,IAAI,CAAC,YAAY;oBACjB,IAAI,IAAI,CAAC,eAAe,EAAE,CACtB;gBACP,oBAAC,SAAS,IACR,KAAK,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,EACtC,MAAM,EAAC,+BAA+B,EACtC,WAAW,EAAE,IAAI,CAAC,kBAAkB,EACpC,KAAK,EAAE,WAAW,EAClB,YAAY,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,EAC9D,SAAS,SACT;gBACD,CAAC,MAAM,CAAC,gBAAgB,IAAI,wBAAwB,CAAC,WAAW,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,CAC7F,oBAAC,IAAI,IAAC,KAAK,EAAE,MAAM,CAAC,mBAAmB;oBACpC,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,CAC3B,oBAAC,KAAK,IACJ,MAAM,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,EACzC,KAAK,EAAE,MAAM,CAAC,mBAAmB,GACjC,CACH;oBACD,oBAAC,gBAAgB,IAAC,KAAK,EAAE,MAAM,CAAC,gBAAgB,EAAE,OAAO,EAAE,IAAI,CAAC,uBAAuB;wBACrF,oBAAC,IAAI,IAAC,KAAK,EAAE,MAAM,CAAC,cAAc,IAC/B,CAAC,IAAI,CAAC,cAAc,EAAE;4BACrB,CAAC,CAAC,IAAI,CAAC,wBAAwB;4BAC/B,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAC/B,CACU,CACd,CACR;gBACA,MAAM,EAAE,IAAI,MAAM,CAAC,oBAAoB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,CACvE,oBAAC,gBAAgB,IAAC,KAAK,EAAE,MAAM,CAAC,oBAAoB,EAAE,OAAO,EAAE,GAAG,EAAE;wBAClE,kBAAkB,EAAE,CAAC;wBACrB,QAAQ,EAAE,CAAC;wBACX,oBAAoB,EAAE,CAAC;oBACzB,CAAC;oBACC,oBAAC,IAAI,IAAC,KAAK,EAAE,MAAM,CAAC,kBAAkB,IAAG,IAAI,CAAC,4BAA4B,CAAQ,CACjE,CACpB;gBACD,oBAAC,gBAAgB,IAAC,KAAK,EAAE,MAAM,CAAC,YAAY,EAAE,OAAO,EAAE,IAAI,CAAC,oBAAoB;oBAC9E,oBAAC,IAAI,IAAC,KAAK,EAAE,MAAM,CAAC,UAAU,EAAE,MAAM,EAAC,+BAA+B,IAAE,IAAI,CAAC,iBAAiB,CAAQ,CACrF;gBAEnB,oBAAC,gBAAgB,IAAC,KAAK,EAAE,MAAM,CAAC,YAAY,EAAE,OAAO,EAAE,QAAQ;oBAC7D,oBAAC,IAAI,IAAC,KAAK,EAAE,MAAM,CAAC,UAAU,IAAG,IAAI,CAAC,iBAAiB,CAAQ,CAC9C,CACd,CACkB,CAC5B,CAAC;IACJ,CAAC;;AA3Ua,2BAAY,qBACrB,oBAAoB,EACxB;AAEc,0BAAW,GAA2C;IACnE,IAAI,EAAE,EAAE;IACR,KAAK,EAAE,EAAE;IACT,WAAW,EAAE,EAAE;IACf,QAAQ,EAAE,SAAS;IACnB,UAAU,EAAE,SAAS;IACrB,aAAa,EAAE,SAAS;CACzB,CAAC","sourcesContent":["/* eslint-disable max-lines */\nimport type { SendFeedbackParams } from '@sentry/core';\nimport { captureFeedback, getCurrentScope, lastEventId, logger } from '@sentry/core';\nimport * as React from 'react';\nimport type { KeyboardTypeOptions ,\n  NativeEventSubscription} from 'react-native';\nimport {\n  Appearance,\n  Image,\n  Keyboard,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n  View\n} from 'react-native';\n\nimport { isWeb, notWeb } from '../utils/environment';\nimport type { Screenshot } from '../wrapper';\nimport { getDataFromUri, NATIVE } from '../wrapper';\nimport { sentryLogo } from './branding';\nimport { defaultConfiguration } from './defaults';\nimport defaultStyles from './FeedbackWidget.styles';\nimport { getTheme } from './FeedbackWidget.theme';\nimport type { FeedbackGeneralConfiguration, FeedbackTextConfiguration, FeedbackWidgetProps, FeedbackWidgetState, FeedbackWidgetStyles, ImagePickerConfiguration } from './FeedbackWidget.types';\nimport { hideFeedbackButton, showScreenshotButton } from './FeedbackWidgetManager';\nimport { lazyLoadFeedbackIntegration } from './lazy';\nimport { getCapturedScreenshot } from './ScreenshotButton';\nimport { base64ToUint8Array, feedbackAlertDialog, isValidEmail  } from './utils';\n\n/**\n * @beta\n * Implements a feedback form screen that sends feedback to Sentry using Sentry.captureFeedback.\n */\nexport class FeedbackWidget extends React.Component<FeedbackWidgetProps, FeedbackWidgetState> {\n  public static defaultProps: Partial<FeedbackWidgetProps> = {\n    ...defaultConfiguration\n  }\n\n  private static _savedState: Omit<FeedbackWidgetState, 'isVisible'> = {\n    name: '',\n    email: '',\n    description: '',\n    filename: undefined,\n    attachment: undefined,\n    attachmentUri: undefined,\n  };\n\n  private _themeListener: NativeEventSubscription;\n\n  private _didSubmitForm: boolean = false;\n\n  public constructor(props: FeedbackWidgetProps) {\n    super(props);\n\n    const currentUser = {\n      useSentryUser: {\n        email: this.props?.useSentryUser?.email || getCurrentScope()?.getUser()?.email || '',\n        name: this.props?.useSentryUser?.name || getCurrentScope()?.getUser()?.name || '',\n      }\n    }\n\n    this.state = {\n      isVisible: true,\n      name: FeedbackWidget._savedState.name || currentUser.useSentryUser.name,\n      email: FeedbackWidget._savedState.email || currentUser.useSentryUser.email,\n      description: FeedbackWidget._savedState.description || '',\n      filename: FeedbackWidget._savedState.filename || undefined,\n      attachment: FeedbackWidget._savedState.attachment || undefined,\n      attachmentUri: FeedbackWidget._savedState.attachmentUri || undefined,\n    };\n\n    lazyLoadFeedbackIntegration();\n  }\n\n  /**\n   * For testing purposes only.\n   */\n  public static reset(): void {\n    FeedbackWidget._savedState = {\n      name: '',\n      email: '',\n      description: '',\n      filename: undefined,\n      attachment: undefined,\n      attachmentUri: undefined,\n    };\n  }\n\n  public handleFeedbackSubmit: () => void = () => {\n    const { name, email, description } = this.state;\n    const { onSubmitSuccess, onSubmitError, onFormSubmitted } = this.props;\n    const text: FeedbackTextConfiguration = this.props;\n\n    const trimmedName = name?.trim();\n    const trimmedEmail = email?.trim();\n    const trimmedDescription = description?.trim();\n\n    if ((this.props.isNameRequired && !trimmedName) || (this.props.isEmailRequired && !trimmedEmail) || !trimmedDescription) {\n      feedbackAlertDialog(text.errorTitle, text.formError);\n      return;\n    }\n\n    if (this.props.shouldValidateEmail && (this.props.isEmailRequired || trimmedEmail.length > 0) && !isValidEmail(trimmedEmail)) {\n      feedbackAlertDialog(text.errorTitle, text.emailError);\n      return;\n    }\n\n    const attachments = this.state.filename && this.state.attachment\n    ? [\n        {\n          filename: this.state.filename,\n          data: this.state.attachment,\n        },\n      ]\n    : undefined;\n\n    const eventId = lastEventId();\n    const userFeedback: SendFeedbackParams = {\n      message: trimmedDescription,\n      name: trimmedName,\n      email: trimmedEmail,\n      associatedEventId: eventId,\n    };\n\n    try {\n      if (!onFormSubmitted) {\n        this.setState({ isVisible: false });\n      }\n      captureFeedback(userFeedback, attachments ? { attachments } : undefined);\n      onSubmitSuccess({ name: trimmedName, email: trimmedEmail, message: trimmedDescription, attachments: attachments });\n      feedbackAlertDialog(text.successMessageText , '');\n      onFormSubmitted();\n      this._didSubmitForm = true;\n    } catch (error) {\n      const errorString = `Feedback form submission failed: ${error}`;\n      onSubmitError(new Error(errorString));\n      feedbackAlertDialog(text.errorTitle, text.genericError);\n      logger.error(`Feedback form submission failed: ${error}`);\n    }\n  };\n\n  public onScreenshotButtonPress: () => void = async () => {\n    if (!this._hasScreenshot()) {\n      const imagePickerConfiguration: ImagePickerConfiguration = this.props;\n      if (imagePickerConfiguration.imagePicker) {\n        const launchImageLibrary = imagePickerConfiguration.imagePicker.launchImageLibraryAsync\n          // expo-image-picker library is available\n          ? () => imagePickerConfiguration.imagePicker.launchImageLibraryAsync({ mediaTypes: ['images'], base64: isWeb() })\n          // react-native-image-picker library is available\n          : imagePickerConfiguration.imagePicker.launchImageLibrary\n            ? () => imagePickerConfiguration.imagePicker.launchImageLibrary({ mediaType: 'photo', includeBase64: isWeb() })\n            : null;\n        if (!launchImageLibrary) {\n          logger.warn('No compatible image picker library found. Please provide a valid image picker library.');\n          if (__DEV__) {\n            feedbackAlertDialog(\n              'Development note',\n              'No compatible image picker library found. Please provide a compatible version of `expo-image-picker` or `react-native-image-picker`.',\n            );\n          }\n          return;\n        }\n\n        const result = await launchImageLibrary();\n        if (result.assets && result.assets.length > 0) {\n          if (isWeb()) {\n            const filename = result.assets[0].fileName;\n            const imageUri = result.assets[0].uri;\n            const base64 = result.assets[0].base64;\n            const data = base64ToUint8Array(base64);\n            if (data != null) {\n              this.setState({ filename, attachment: data, attachmentUri: imageUri });\n            } else {\n              logger.error('Failed to read image data on the web');\n            }\n          } else {\n            const filename = result.assets[0].fileName;\n            const imageUri = result.assets[0].uri;\n            getDataFromUri(imageUri).then((data) => {\n              if (data != null) {\n                this.setState({ filename, attachment: data, attachmentUri: imageUri });\n              } else {\n                logger.error('Failed to read image data from uri:', imageUri);\n              }\n            }).catch((error) => {\n              logger.error('Failed to read image data from uri:', imageUri, 'error: ', error);\n            });\n          }\n        }\n      } else {\n        // Defaulting to the onAddScreenshot callback\n        const { onAddScreenshot } = { ...defaultConfiguration, ...this.props };\n        onAddScreenshot((uri: string) => {\n          getDataFromUri(uri).then((data) => {\n            if (data != null) {\n              this.setState({ filename: 'feedback_screenshot', attachment: data, attachmentUri: uri });\n            } else {\n              logger.error('Failed to read image data from uri:', uri);\n            }\n          })\n          .catch((error) => {\n            logger.error('Failed to read image data from uri:', uri, 'error: ', error);\n          });\n        });\n      }\n    } else {\n      this.setState({ filename: undefined, attachment: undefined, attachmentUri: undefined });\n    }\n  }\n\n  /**\n   * Add a listener to the theme change event.\n   */\n  public componentDidMount(): void {\n    this._themeListener = Appearance.addChangeListener(() => {\n      this.forceUpdate();\n    });\n  }\n\n  /**\n   * Save the state before unmounting the component and remove the theme listener.\n   */\n  public componentWillUnmount(): void {\n    if (this._didSubmitForm) {\n      this._clearFormState();\n      this._didSubmitForm = false;\n    } else {\n      this._saveFormState();\n    }\n    if (this._themeListener) {\n      this._themeListener.remove();\n    }\n  }\n\n  /**\n   * Renders the feedback form screen.\n   */\n  public render(): React.ReactNode {\n    const theme = getTheme();\n    const { name, email, description } = this.state;\n    const { onFormClose } = this.props;\n    const config: FeedbackGeneralConfiguration = this.props;\n    const imagePickerConfiguration: ImagePickerConfiguration = this.props;\n    const text: FeedbackTextConfiguration = this.props;\n    const styles: FeedbackWidgetStyles = { ...defaultStyles(theme), ...this.props.styles };\n    const onCancel = (): void => {\n      if (onFormClose) {\n        onFormClose();\n      } else {\n        this.setState({ isVisible: false });\n      }\n    }\n\n    if (!this.state.isVisible) {\n      return null;\n    }\n\n    const screenshot = getCapturedScreenshot();\n    if (screenshot === 'ErrorCapturingScreenshot') {\n      setTimeout(async () => {\n        feedbackAlertDialog(text.errorTitle, text.captureScreenshotError);\n      }, 100);\n    } else if (screenshot) {\n      this._setCapturedScreenshot(screenshot);\n    }\n\n    return (\n      <TouchableWithoutFeedback\n        onPress={notWeb() ? Keyboard.dismiss : undefined}\n        accessible={false}\n        accessibilityElementsHidden={false}\n        >\n        <View style={styles.container}>\n          <View style={styles.titleContainer}>\n            <Text style={styles.title} testID='sentry-feedback-form-title'>{text.formTitle}</Text>\n            {config.showBranding && (\n              <Image\n                source={{ uri: sentryLogo }}\n                style={styles.sentryLogo}\n                testID='sentry-logo'\n              />\n            )}\n          </View>\n\n          {config.showName && (\n          <>\n            <Text style={styles.label}>\n              {text.nameLabel}\n              {config.isNameRequired && ` ${text.isRequiredLabel}`}\n            </Text>\n            <TextInput\n              style={styles.input}\n              testID='sentry-feedback-name-input'\n              placeholder={text.namePlaceholder}\n              value={name}\n              onChangeText={(value) => this.setState({ name: value })}\n            />\n          </>\n          )}\n\n          {config.showEmail && (\n          <>\n            <Text style={styles.label}>\n              {text.emailLabel}\n              {config.isEmailRequired && ` ${text.isRequiredLabel}`}\n            </Text>\n            <TextInput\n              style={styles.input}\n              testID='sentry-feedback-email-input'\n              placeholder={text.emailPlaceholder}\n              keyboardType={'email-address' as KeyboardTypeOptions}\n              value={email}\n              onChangeText={(value) => this.setState({ email: value })}\n            />\n          </>\n          )}\n\n          <Text style={styles.label}>\n            {text.messageLabel}\n            {` ${text.isRequiredLabel}`}\n          </Text>\n          <TextInput\n            style={[styles.input, styles.textArea]}\n            testID='sentry-feedback-message-input'\n            placeholder={text.messagePlaceholder}\n            value={description}\n            onChangeText={(value) => this.setState({ description: value })}\n            multiline\n          />\n          {(config.enableScreenshot || imagePickerConfiguration.imagePicker || this._hasScreenshot()) && (\n            <View style={styles.screenshotContainer}>\n              {this.state.attachmentUri && (\n                <Image\n                  source={{ uri: this.state.attachmentUri }}\n                  style={styles.screenshotThumbnail}\n                />\n              )}\n              <TouchableOpacity style={styles.screenshotButton} onPress={this.onScreenshotButtonPress}>\n                <Text style={styles.screenshotText}>\n                  {!this._hasScreenshot()\n                    ? text.addScreenshotButtonLabel\n                    : text.removeScreenshotButtonLabel}\n                </Text>\n              </TouchableOpacity>\n            </View>\n          )}\n          {notWeb() && config.enableTakeScreenshot && !this.state.attachmentUri && (\n            <TouchableOpacity style={styles.takeScreenshotButton} onPress={() => {\n              hideFeedbackButton();\n              onCancel();\n              showScreenshotButton();\n            }}>\n              <Text style={styles.takeScreenshotText}>{text.captureScreenshotButtonLabel}</Text>\n            </TouchableOpacity>\n          )}\n          <TouchableOpacity style={styles.submitButton} onPress={this.handleFeedbackSubmit}>\n            <Text style={styles.submitText} testID='sentry-feedback-submit-button'>{text.submitButtonLabel}</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.cancelButton} onPress={onCancel}>\n            <Text style={styles.cancelText}>{text.cancelButtonLabel}</Text>\n          </TouchableOpacity>\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n\n  private _setCapturedScreenshot = (screenshot: Screenshot): void => {\n    if (screenshot.data != null) {\n      logger.debug('Setting captured screenshot:', screenshot.filename);\n      NATIVE.encodeToBase64(screenshot.data).then((base64String) => {\n        if (base64String != null) {\n          const dataUri = `data:${screenshot.contentType};base64,${base64String}`;\n          this.setState({ filename: screenshot.filename, attachment: screenshot.data, attachmentUri: dataUri });\n        } else {\n          logger.error('Failed to read image data from:', screenshot.filename);\n        }\n      }).catch((error) => {\n        logger.error('Failed to read image data from:', screenshot.filename, 'error: ', error);\n      });\n    } else {\n      logger.error('Failed to read image data from:', screenshot.filename);\n    }\n  }\n\n  private _saveFormState = (): void => {\n    FeedbackWidget._savedState = { ...this.state };\n  };\n\n  private _clearFormState = (): void => {\n    FeedbackWidget._savedState = {\n      name: '',\n      email: '',\n      description: '',\n      filename: undefined,\n      attachment: undefined,\n      attachmentUri: undefined,\n    };\n  };\n\n  private _hasScreenshot = (): boolean => {\n    return this.state.filename !== undefined && this.state.attachment !== undefined && this.state.attachmentUri !== undefined;\n  }\n}\n"]}