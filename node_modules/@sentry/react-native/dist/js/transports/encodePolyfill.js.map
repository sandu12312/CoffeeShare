{"version":3,"file":"encodePolyfill.js","sourceRoot":"","sources":["../../../src/js/transports/encodePolyfill.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AACnD,OAAO,EAAE,WAAW,EAAE,MAAM,WAAW,CAAC;AAExC,MAAM,CAAC,MAAM,iBAAiB,GAAG,GAAS,EAAE;IAC1C,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE;QAC5B,aAAa,CAAC,UAA4D,GAAG,EAAE,CAAC;KAClF;IAED,aAAa,CAAC,UAAU,CAAC,cAAc,GAAG,cAAc,CAAC;AAC3D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,IAAY,EAAc,EAAE;IACzD,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;IAChD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC","sourcesContent":["import { RN_GLOBAL_OBJ } from '../utils/worldwide';\nimport { utf8ToBytes } from '../vendor';\n\nexport const useEncodePolyfill = (): void => {\n  if (!RN_GLOBAL_OBJ.__SENTRY__) {\n    (RN_GLOBAL_OBJ.__SENTRY__ as Partial<(typeof RN_GLOBAL_OBJ)['__SENTRY__']>) = {};\n  }\n\n  RN_GLOBAL_OBJ.__SENTRY__.encodePolyfill = encodePolyfill;\n};\n\nexport const encodePolyfill = (text: string): Uint8Array => {\n  const bytes = new Uint8Array(utf8ToBytes(text));\n  return bytes;\n};\n"]}