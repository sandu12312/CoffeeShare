{"version":3,"file":"options.js","sourceRoot":"","sources":["../../src/js/options.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAGxC,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AA+RvD;;;;GAIG;AACH,MAAM,UAAU,wBAAwB,CAAC,WAAoB;IAC3D,IAAI,OAAO,WAAW,KAAK,SAAS,EAAE;QACpC,yCAAyC;QACzC,OAAO,WAAW,CAAC;KACpB;IAED,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;QACtD,oEAAoE;QACpE,OAAO,KAAK,CAAC;KACd;IAED,MAAM,aAAa,GAAG,gBAAgB,EAAE,CAAC;IACzC,IAAI,aAAa,IAAI,aAAa,CAAC,YAAY,KAAK,MAAM,EAAE;QAC1D,yDAAyD;QACzD,OAAO,KAAK,CAAC;KACd;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import type { makeFetchTransport } from '@sentry/browser';\nimport type { CaptureContext, ClientOptions, Event, EventHint, Options } from '@sentry/core';\nimport type { Profiler } from '@sentry/react';\nimport type * as React from 'react';\nimport { Platform } from 'react-native';\n\nimport type { TouchEventBoundaryProps } from './touchevents';\nimport { getExpoConstants } from './utils/expomodules';\n\ntype ProfilerProps = React.ComponentProps<typeof Profiler>;\ntype BrowserTransportOptions = Parameters<typeof makeFetchTransport>[0];\n\nexport interface BaseReactNativeOptions {\n  /**\n   * Enables native transport + device info + offline caching.\n   * Be careful, disabling this also breaks automatic release setting.\n   * This means you have to manage setting the release yourself.\n   * Defaults to `true`.\n   */\n  enableNative?: boolean;\n\n  /**\n   * Enables native crashHandling. This only works if `enableNative` is `true`.\n   * Defaults to `true`.\n   */\n  enableNativeCrashHandling?: boolean;\n\n  /**\n   * Initializes the native SDK on init.\n   * Set this to `false` if you have an existing native SDK and don't want to re-initialize.\n   *\n   * NOTE: Be careful and only use this if you know what you are doing.\n   * If you use this flag, make sure a native SDK is running before the JS Engine initializes or events might not be captured.\n   * Also, make sure the DSN on both the React Native side and the native side are the same one.\n   * We strongly recommend checking the documentation if you need to use this.\n   *\n   * @default true\n   */\n  autoInitializeNativeSdk?: boolean;\n\n  /** Should the native nagger alert be shown or not. */\n  enableNativeNagger?: boolean;\n\n  /** Should sessions be tracked to Sentry Health or not. */\n  enableAutoSessionTracking?: boolean;\n\n  /** The interval to end a session if the App goes to the background. */\n  sessionTrackingIntervalMillis?: number;\n\n  /** Enable NDK on Android\n   *\n   * @default true\n   */\n  enableNdk?: boolean;\n\n  /** Enable scope sync from Java to NDK on Android\n   * Only has an effect if `enableNdk` is `true`.\n   */\n  enableNdkScopeSync?: boolean;\n\n  /** When enabled, all the threads are automatically attached to all logged events on Android */\n  attachThreads?: boolean;\n\n  /**\n   *  When enabled, certain personally identifiable information (PII) is added by active integrations.\n   *\n   * @default false\n   */\n  sendDefaultPii?: boolean;\n\n  /**\n   * Callback that is called after the RN SDK on the JS Layer has made contact with the Native Layer.\n   */\n  onReady?: (response: {\n    /** `true` if the native SDK has been initialized, `false` otherwise.  */\n    didCallNativeInit: boolean;\n  }) => void;\n\n  /** Enable auto performance tracking by default. Renamed from `enableAutoPerformanceTracking` in v5. */\n  enableAutoPerformanceTracing?: boolean;\n\n  /**\n   * Enables Out of Memory Tracking for iOS and macCatalyst.\n   * See the following link for more information and possible restrictions:\n   * https://docs.sentry.io/platforms/apple/guides/ios/configuration/out-of-memory/\n   *\n   * Renamed from `enableOutOfMemoryTracking` in v5.\n   *\n   * @default true\n   */\n  enableWatchdogTerminationTracking?: boolean;\n\n  /**\n   * Set data to the inital scope\n   * @deprecated Use `Sentry.configureScope(...)`\n   */\n  initialScope?: CaptureContext;\n\n  /**\n   * When enabled, Sentry will overwrite the global Promise instance to ensure that unhandled rejections are correctly tracked.\n   * If you run into issues with Promise polyfills such as `core-js`, make sure you polyfill after Sentry is initialized.\n   * Read more at https://docs.sentry.io/platforms/react-native/troubleshooting/#unhandled-promise-rejections\n   *\n   * When disabled, this option will not disable unhandled rejection tracking. Set `onunhandledrejection: false` on the `ReactNativeErrorHandlers` integration instead.\n   *\n   * @default true\n   */\n  patchGlobalPromise?: boolean;\n\n  /**\n   * The max cache items for capping the number of envelopes.\n   *\n   * @default 30\n   */\n  maxCacheItems?: number;\n\n  /**\n   * When enabled, the SDK tracks when the application stops responding for a specific amount of\n   * time defined by the `appHangTimeoutInterval` option.\n   *\n   * iOS only\n   *\n   * @default true\n   */\n  enableAppHangTracking?: boolean;\n\n  /**\n   * The minimum amount of time an app should be unresponsive to be classified as an App Hanging.\n   * The actual amount may be a little longer.\n   * Avoid using values lower than 100ms, which may cause a lot of app hangs events being transmitted.\n   * Value should be in seconds.\n   *\n   * iOS only\n   *\n   * @default 2\n   */\n  appHangTimeoutInterval?: number;\n\n  /**\n   * The max queue size for capping the number of envelopes waiting to be sent by Transport.\n   */\n  maxQueueSize?: number;\n\n  /**\n   * When enabled and a user experiences an error, Sentry provides the ability to take a screenshot and include it as an attachment.\n   *\n   * @default false\n   */\n  attachScreenshot?: boolean;\n\n  /**\n   * When enabled Sentry includes the current view hierarchy in the error attachments.\n   *\n   * @default false\n   */\n  attachViewHierarchy?: boolean;\n\n  /**\n   * When enabled, Sentry will capture failed XHR/Fetch requests. This option also enabled HTTP Errors on iOS.\n   * [Sentry Android Gradle Plugin](https://docs.sentry.io/platforms/android/configuration/integrations/okhttp/)\n   * is needed to capture HTTP Errors on Android.\n   *\n   * @default false\n   */\n  enableCaptureFailedRequests?: boolean;\n\n  /**\n   * If you use Spotlight by Sentry during development, use\n   * this option to forward captured Sentry events to Spotlight.\n   *\n   * Either set it to true, or provide a specific Spotlight Sidecar URL.\n   *\n   * More details: https://spotlightjs.com/\n   *\n   * IMPORTANT: Only set this option to `true` while developing, not in production!\n   */\n  spotlight?: boolean | string;\n\n  /**\n   * Sets a callback which is executed before capturing screenshots. Only\n   * relevant if `attachScreenshot` is set to true. When false is returned\n   * from the function, no screenshot will be attached.\n   */\n  beforeScreenshot?: (event: Event, hint: EventHint) => boolean;\n\n  /**\n   * Track the app start time by adding measurements to the first route transaction. If there is no routing instrumentation\n   * an app start transaction will be started.\n   *\n   * Requires performance monitoring to be enabled.\n   *\n   * @default true\n   */\n  enableAppStartTracking?: boolean;\n\n  /**\n   * Track the slow and frozen frames in the application. Enabling this options will add\n   * slow and frozen frames measurements to all created root spans (transactions).\n   *\n   * @default true\n   */\n  enableNativeFramesTracking?: boolean;\n\n  /**\n   * Track when and how long the JS event loop stalls for. Adds stalls as measurements to all transactions.\n   *\n   * @default true\n   */\n  enableStallTracking?: boolean;\n\n  /**\n   * Trace User Interaction events like touch and gestures.\n   *\n   * @default false\n   */\n  enableUserInteractionTracing?: boolean;\n\n  /**\n   * The sample rate for profiling\n   * 1.0 will profile all transactions and 0 will profile none.\n   */\n  profilesSampleRate?: number;\n\n  /**\n   * The sample rate for session-long replays.\n   * 1.0 will record all sessions and 0 will record none.\n   */\n  replaysSessionSampleRate?: number;\n\n  /**\n   * The sample rate for sessions that has had an error occur.\n   * This is independent of `sessionSampleRate`.\n   * 1.0 will record all sessions and 0 will record none.\n   */\n  replaysOnErrorSampleRate?: number;\n\n  /**\n   * Options which are in beta, or otherwise not guaranteed to be stable.\n   */\n  _experiments?: {\n    [key: string]: unknown;\n\n    /**\n     * @deprecated Use `replaysSessionSampleRate` in the options root instead.\n     *\n     * This will be removed in the next major version.\n     */\n    replaysSessionSampleRate?: number;\n\n    /**\n     * @deprecated Use `replaysOnErrorSampleRate` in the options root instead.\n     *\n     * This will be removed in the next major version.\n     */\n    replaysOnErrorSampleRate?: number;\n  };\n\n  /**\n   * This options changes the placement of the attached stacktrace of `captureMessage` in the event.\n   *\n   * @default false\n   * @deprecated This option will be removed in the next major version. Use `beforeSend` instead.\n   */\n  useThreadsForMessageStack?: boolean;\n}\n\nexport interface ReactNativeTransportOptions extends BrowserTransportOptions {\n  /**\n   * @deprecated use `maxQueueSize` in the root of the SDK options.\n   */\n  bufferSize?: number;\n}\n\n/**\n * Configuration options for the Sentry ReactNative SDK.\n * @see ReactNativeFrontend for more information.\n */\n\nexport interface ReactNativeOptions\n  extends Omit<Options<ReactNativeTransportOptions>, '_experiments'>,\n    BaseReactNativeOptions {}\n\nexport interface ReactNativeClientOptions\n  extends Omit<ClientOptions<ReactNativeTransportOptions>, 'tunnel' | '_experiments'>,\n    BaseReactNativeOptions {}\n\nexport interface ReactNativeWrapperOptions {\n  /** Props for the root React profiler */\n  profilerProps?: ProfilerProps;\n\n  /** Props for the root touch event boundary */\n  touchEventBoundaryProps?: TouchEventBoundaryProps;\n}\n\n/**\n * If the user has not explicitly set `enableNativeNagger`\n * the function enables native nagging based on the current\n * environment.\n */\nexport function shouldEnableNativeNagger(userOptions: unknown): boolean {\n  if (typeof userOptions === 'boolean') {\n    // User can override the default behavior\n    return userOptions;\n  }\n\n  if (Platform.OS === 'web' || Platform.OS === 'windows') {\n    // We don't want to nag on known platforms that don't support native\n    return false;\n  }\n\n  const expoConstants = getExpoConstants();\n  if (expoConstants && expoConstants.appOwnership === 'expo') {\n    // If the app is running in Expo Go, we don't want to nag\n    return false;\n  }\n\n  return true;\n}\n"]}