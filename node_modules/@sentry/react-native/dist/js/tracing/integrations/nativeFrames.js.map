{"version":3,"file":"nativeFrames.js","sourceRoot":"","sources":["../../../../src/js/tracing/integrations/nativeFrames.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Client, Event, Integration, Measurements, MeasurementUnit, Span } from '@sentry/core';\nimport { logger, timestampInSeconds } from '@sentry/core';\n\nimport type { NativeFramesResponse } from '../../NativeRNSentry';\nimport { AsyncExpiringMap } from '../../utils/AsyncExpiringMap';\nimport { isRootSpan } from '../../utils/span';\nimport { NATIVE } from '../../wrapper';\n\n/**\n * Timeout from the start of a span to fetching the associated native frames.\n */\nconst FETCH_FRAMES_TIMEOUT_MS = 2_000;\n\n/**\n * This is the time end frames data from the native layer will be\n * kept in memory and waiting for the event processing. This ensures that spans\n * which are never processed are not leaking memory.\n */\nconst END_FRAMES_TIMEOUT_MS = 2_000;\n\n/**\n * This is the time start frames data from the native layer will be\n * kept in memory and waiting for span end. This ensures that spans\n * which never end or are not processed are not leaking memory.\n */\nconst START_FRAMES_TIMEOUT_MS = 60_000;\n\n/**\n * A margin of error of 50ms is allowed for the async native bridge call.\n * Anything larger would reduce the accuracy of our frames measurements.\n */\nconst MARGIN_OF_ERROR_SECONDS = 0.05;\n\nconst INTEGRATION_NAME = 'NativeFrames';\n\nexport interface FramesMeasurements extends Measurements {\n  frames_total: { value: number; unit: MeasurementUnit };\n  frames_slow: { value: number; unit: MeasurementUnit };\n  frames_frozen: { value: number; unit: MeasurementUnit };\n}\n\ninterface NativeFramesResponseWithTimestamp {\n  timestamp: number;\n  nativeFrames: NativeFramesResponse;\n}\n\nexport const createNativeFramesIntegrations = (enable: boolean | undefined): Integration | undefined => {\n  if (!enable && NATIVE.enableNative) {\n    // On Android this will free up resource when JS reloaded (native modules stay) and thus JS side of the SDK reinitialized.\n    NATIVE.disableNativeFramesTracking();\n    return undefined;\n  }\n\n  return nativeFramesIntegration();\n};\n\n/**\n * Instrumentation to add native slow/frozen frames measurements onto transactions.\n */\nexport const nativeFramesIntegration = (): Integration => {\n  /** The native frames at the finish time of the most recent span. */\n  let _lastChildSpanEndFrames: NativeFramesResponseWithTimestamp | null = null;\n  const _spanToNativeFramesAtStartMap: AsyncExpiringMap<string, NativeFramesResponse> = new AsyncExpiringMap({\n    ttl: START_FRAMES_TIMEOUT_MS,\n  });\n  const _spanToNativeFramesAtEndMap: AsyncExpiringMap<string, NativeFramesResponseWithTimestamp | null> =\n    new AsyncExpiringMap({ ttl: END_FRAMES_TIMEOUT_MS });\n\n  /**\n   * Hooks into the client start and end span events.\n   */\n  const setup = (client: Client): void => {\n    if (!NATIVE.enableNative) {\n      logger.warn(\n        `[${INTEGRATION_NAME}] This is not available on the Web, Expo Go and other platforms without native modules.`,\n      );\n      return undefined;\n    }\n\n    NATIVE.enableNativeFramesTracking();\n    client.on('spanStart', fetchStartFramesForSpan);\n    client.on('spanEnd', fetchEndFramesForSpan);\n  };\n\n  const fetchStartFramesForSpan = (rootSpan: Span): void => {\n    if (!isRootSpan(rootSpan)) {\n      return;\n    }\n\n    const spanId = rootSpan.spanContext().spanId;\n    logger.debug(`[${INTEGRATION_NAME}] Fetching frames for root span start (${spanId}).`);\n    _spanToNativeFramesAtStartMap.set(\n      spanId,\n      new Promise<NativeFramesResponse | null>(resolve => {\n        fetchNativeFrames()\n          .then(frames => resolve(frames))\n          .then(undefined, error => {\n            logger.debug(`[${INTEGRATION_NAME}] Error while fetching native frames.`, error);\n            resolve(null);\n          });\n      }),\n    );\n  };\n\n  const fetchEndFramesForSpan = (span: Span): void => {\n    const timestamp = timestampInSeconds();\n    const spanId = span.spanContext().spanId;\n\n    if (isRootSpan(span)) {\n      const hasStartFrames = _spanToNativeFramesAtStartMap.has(spanId);\n      if (!hasStartFrames) {\n        // We don't have start frames, won't be able to calculate the difference.\n        return;\n      }\n\n      logger.debug(`[${INTEGRATION_NAME}] Fetch frames for root span end (${spanId}).`);\n      _spanToNativeFramesAtEndMap.set(\n        spanId,\n        new Promise<NativeFramesResponseWithTimestamp | null>(resolve => {\n          fetchNativeFrames()\n            .then(frames => {\n              resolve({\n                timestamp,\n                nativeFrames: frames,\n              });\n            })\n            .then(undefined, error => {\n              logger.debug(`[${INTEGRATION_NAME}] Error while fetching native frames.`, error);\n              resolve(null);\n            });\n        }),\n      );\n      return undefined;\n    } else {\n      logger.debug(`[${INTEGRATION_NAME}] Fetch frames for child span end (${spanId}).`);\n      fetchNativeFrames()\n        .then(frames => {\n          _lastChildSpanEndFrames = {\n            timestamp,\n            nativeFrames: frames,\n          };\n        })\n        .catch(error => logger.debug(`[${INTEGRATION_NAME}] Error while fetching native frames.`, error));\n    }\n  };\n\n  const processEvent = async (event: Event): Promise<Event> => {\n    if (\n      event.type !== 'transaction' ||\n      !event.transaction ||\n      !event.contexts ||\n      !event.contexts.trace ||\n      !event.timestamp ||\n      !event.contexts.trace.span_id\n    ) {\n      return event;\n    }\n\n    const traceOp = event.contexts.trace.op;\n    const spanId = event.contexts.trace.span_id;\n    const startFrames = await _spanToNativeFramesAtStartMap.pop(spanId);\n    if (!startFrames) {\n      logger.warn(\n        `[${INTEGRATION_NAME}] Start frames of transaction ${event.transaction} (eventId, ${event.event_id}) are missing, but the transaction already ended.`,\n      );\n      return event;\n    }\n\n    const endFrames = await _spanToNativeFramesAtEndMap.pop(spanId);\n    let finalEndFrames: NativeFramesResponse | undefined;\n\n    if (endFrames && isClose(endFrames.timestamp, event.timestamp)) {\n      // Must be in the margin of error of the actual transaction finish time (finalEndTimestamp)\n      logger.debug(`[${INTEGRATION_NAME}] Using frames from root span end (spanId, ${spanId}).`);\n      finalEndFrames = endFrames.nativeFrames;\n    } else if (_lastChildSpanEndFrames && isClose(_lastChildSpanEndFrames.timestamp, event.timestamp)) {\n      // Fallback to the last span finish if it is within the margin of error of the actual finish timestamp.\n      // This should be the case for trimEnd.\n      logger.debug(`[${INTEGRATION_NAME}] Using native frames from last child span end (spanId, ${spanId}).`);\n      finalEndFrames = _lastChildSpanEndFrames.nativeFrames;\n    } else {\n      logger.warn(\n        `[${INTEGRATION_NAME}] Frames were collected within larger than margin of error delay for spanId (${spanId}). Dropping the inaccurate values.`,\n      );\n      return event;\n    }\n\n    const measurements = {\n      frames_total: {\n        value: finalEndFrames.totalFrames - startFrames.totalFrames,\n        unit: 'none',\n      },\n      frames_frozen: {\n        value: finalEndFrames.frozenFrames - startFrames.frozenFrames,\n        unit: 'none',\n      },\n      frames_slow: {\n        value: finalEndFrames.slowFrames - startFrames.slowFrames,\n        unit: 'none',\n      },\n    };\n\n    if (\n      measurements.frames_frozen.value <= 0 &&\n      measurements.frames_slow.value <= 0 &&\n      measurements.frames_total.value <= 0\n    ) {\n      logger.warn(\n        `[${INTEGRATION_NAME}] Detected zero slow or frozen frames. Not adding measurements to spanId (${spanId}).`,\n      );\n      return event;\n    }\n\n    logger.log(\n      `[${INTEGRATION_NAME}] Adding measurements to ${traceOp} transaction ${event.transaction}: ${JSON.stringify(\n        measurements,\n        undefined,\n        2,\n      )}`,\n    );\n    event.measurements = {\n      ...(event.measurements ?? {}),\n      ...measurements,\n    };\n    return event;\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup,\n    processEvent,\n  };\n};\n\nfunction fetchNativeFrames(): Promise<NativeFramesResponse> {\n  return new Promise<NativeFramesResponse>((resolve, reject) => {\n    NATIVE.fetchNativeFrames()\n      .then(value => {\n        if (!value) {\n          reject('Native frames response is null.');\n          return;\n        }\n        resolve(value);\n      })\n      .then(undefined, error => {\n        reject(error);\n      });\n\n    setTimeout(() => {\n      reject('Fetching native frames took too long. Dropping frames.');\n    }, FETCH_FRAMES_TIMEOUT_MS);\n  });\n}\n\nfunction isClose(t1: number, t2: number): boolean {\n  return Math.abs(t1 - t2) < MARGIN_OF_ERROR_SECONDS;\n}\n"]}