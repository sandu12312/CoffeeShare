{"version":3,"file":"userInteraction.js","sourceRoot":"","sources":["../../../../src/js/tracing/integrations/userInteraction.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Integration, Span, StartSpanOptions } from '@sentry/core';\nimport {\n  getActiveSpan,\n  getClient,\n  getCurrentScope,\n  logger,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  spanToJSON,\n} from '@sentry/core';\n\nimport type { ReactNativeClientOptions } from '../../options';\nimport { onlySampleIfChildSpans } from '../onSpanEndUtils';\nimport { SPAN_ORIGIN_MANUAL_INTERACTION } from '../origin';\nimport { getCurrentReactNativeTracingIntegration } from '../reactnativetracing';\nimport { clearActiveSpanFromScope, isSentryInteractionSpan, startIdleSpan } from '../span';\n\nconst INTEGRATION_NAME = 'UserInteraction';\n\nexport const userInteractionIntegration = (): Integration => {\n  return {\n    name: INTEGRATION_NAME,\n  };\n};\n\n/**\n * Starts a new transaction for a user interaction.\n * @param userInteractionId Consists of `op` representation UI Event and `elementId` unique element identifier on current screen.\n */\nexport const startUserInteractionSpan = (userInteractionId: {\n  elementId: string | undefined;\n  op: string;\n}): Span | undefined => {\n  const client = getClient();\n  if (!client) {\n    return undefined;\n  }\n\n  const tracing = getCurrentReactNativeTracingIntegration();\n  if (!tracing) {\n    logger.log(`[${INTEGRATION_NAME}] Tracing integration is not available. Can not start user interaction span.`);\n    return undefined;\n  }\n\n  const options = client.getOptions() as ReactNativeClientOptions;\n  const { elementId, op } = userInteractionId;\n  if (!options.enableUserInteractionTracing) {\n    logger.log(`[${INTEGRATION_NAME}] User Interaction Tracing is disabled.`);\n    return undefined;\n  }\n  if (!elementId) {\n    logger.log(`[${INTEGRATION_NAME}] User Interaction Tracing can not create transaction with undefined elementId.`);\n    return undefined;\n  }\n  if (!tracing.state.currentRoute) {\n    logger.log(`[${INTEGRATION_NAME}] User Interaction Tracing can not create transaction without a current route.`);\n    return undefined;\n  }\n\n  const activeTransaction = getActiveSpan();\n  const activeTransactionIsNotInteraction = activeTransaction && !isSentryInteractionSpan(activeTransaction);\n  if (activeTransaction && activeTransactionIsNotInteraction) {\n    logger.warn(\n      `[${INTEGRATION_NAME}] Did not create ${op} transaction because active transaction ${\n        spanToJSON(activeTransaction).description\n      } exists on the scope.`,\n    );\n    return undefined;\n  }\n\n  const name = `${tracing.state.currentRoute}.${elementId}`;\n  if (\n    activeTransaction &&\n    spanToJSON(activeTransaction).description === name &&\n    spanToJSON(activeTransaction).op === op\n  ) {\n    logger.warn(\n      `[${INTEGRATION_NAME}] Did not create ${op} transaction because it the same transaction ${\n        spanToJSON(activeTransaction).description\n      } already exists on the scope.`,\n    );\n    return undefined;\n  }\n\n  const scope = getCurrentScope();\n  const context: StartSpanOptions = {\n    name,\n    op,\n    scope,\n  };\n  clearActiveSpanFromScope(scope);\n  const newSpan = startIdleSpan(context, {\n    idleTimeout: tracing.options.idleTimeoutMs,\n    finalTimeout: tracing.options.finalTimeoutMs,\n  });\n  newSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SPAN_ORIGIN_MANUAL_INTERACTION);\n  onlySampleIfChildSpans(client, newSpan);\n  logger.log(`[${INTEGRATION_NAME}] User Interaction Tracing Created ${op} transaction ${name}.`);\n  return newSpan;\n};\n"]}