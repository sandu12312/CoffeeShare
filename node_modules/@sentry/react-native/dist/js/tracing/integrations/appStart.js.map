{"version":3,"file":"appStart.js","sourceRoot":"","sources":["../../../../src/js/tracing/integrations/appStart.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable complexity, max-lines */\nimport type { Client, Event, Integration, Span, SpanJSON, TransactionEvent } from '@sentry/core';\nimport {\n  getCapturedScopesOnSpan,\n  getClient,\n  getCurrentScope,\n  logger,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SentryNonRecordingSpan,\n  startInactiveSpan,\n  timestampInSeconds,\n} from '@sentry/core';\n\nimport { getAppRegistryIntegration } from '../../integrations/appRegistry';\nimport {\n  APP_START_COLD as APP_START_COLD_MEASUREMENT,\n  APP_START_WARM as APP_START_WARM_MEASUREMENT,\n} from '../../measurements';\nimport type { NativeAppStartResponse } from '../../NativeRNSentry';\nimport type { ReactNativeClientOptions } from '../../options';\nimport { convertSpanToTransaction, isRootSpan, setEndTimeValue } from '../../utils/span';\nimport { NATIVE } from '../../wrapper';\nimport {\n  APP_START_COLD as APP_START_COLD_OP,\n  APP_START_WARM as APP_START_WARM_OP,\n  UI_LOAD as UI_LOAD_OP,\n} from '../ops';\nimport { SPAN_ORIGIN_AUTO_APP_START, SPAN_ORIGIN_MANUAL_APP_START } from '../origin';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_OP } from '../semanticAttributes';\nimport { setMainThreadInfo } from '../span';\nimport { createChildSpanJSON, createSpanJSON, getBundleStartTimestampMs } from '../utils';\n\nconst INTEGRATION_NAME = 'AppStart';\n\nexport type AppStartIntegration = Integration & {\n  captureStandaloneAppStart: () => Promise<void>;\n};\n\n/**\n * We filter out app start more than 60s.\n * This could be due to many different reasons.\n * We've seen app starts with hours, days and even months.\n */\nconst MAX_APP_START_DURATION_MS = 60_000;\n\n/** We filter out App starts which timestamp is 60s and more before the transaction start */\nconst MAX_APP_START_AGE_MS = 60_000;\n\n/** App Start transaction name */\nconst APP_START_TX_NAME = 'App Start';\n\nlet recordedAppStartEndTimestampMs: number | undefined = undefined;\nlet isRecordedAppStartEndTimestampMsManual = false;\n\nlet rootComponentCreationTimestampMs: number | undefined = undefined;\nlet isRootComponentCreationTimestampMsManual = false;\n\n/**\n * Records the application start end.\n * Used automatically by `Sentry.wrap` and `Sentry.ReactNativeProfiler`.\n */\nexport function captureAppStart(): Promise<void> {\n  return _captureAppStart({ isManual: true });\n}\n\n/**\n * For internal use only.\n *\n * @private\n */\nexport async function _captureAppStart({ isManual }: { isManual: boolean }): Promise<void> {\n  const client = getClient();\n  if (!client) {\n    logger.warn('[AppStart] Could not capture App Start, missing client.');\n    return;\n  }\n\n  isRecordedAppStartEndTimestampMsManual = isManual;\n  _setAppStartEndTimestampMs(timestampInSeconds() * 1000);\n  await client.getIntegrationByName<AppStartIntegration>(INTEGRATION_NAME)?.captureStandaloneAppStart();\n}\n\n/**\n * Sets the root component first constructor call timestamp.\n * Used automatically by `Sentry.wrap` and `Sentry.ReactNativeProfiler`.\n */\nexport function setRootComponentCreationTimestampMs(timestampMs: number): void {\n  recordedAppStartEndTimestampMs &&\n    logger.warn('Setting Root component creation timestamp after app start end is set.');\n  rootComponentCreationTimestampMs && logger.warn('Overwriting already set root component creation timestamp.');\n  rootComponentCreationTimestampMs = timestampMs;\n  isRootComponentCreationTimestampMsManual = true;\n}\n\n/**\n * For internal use only.\n *\n * @private\n */\nexport function _setRootComponentCreationTimestampMs(timestampMs: number): void {\n  setRootComponentCreationTimestampMs(timestampMs);\n  isRootComponentCreationTimestampMsManual = false;\n}\n\n/**\n * For internal use only.\n *\n * @private\n */\nexport const _setAppStartEndTimestampMs = (timestampMs: number): void => {\n  recordedAppStartEndTimestampMs && logger.warn('Overwriting already set app start.');\n  recordedAppStartEndTimestampMs = timestampMs;\n};\n\n/**\n * For testing purposes only.\n *\n * @private\n */\nexport function _clearRootComponentCreationTimestampMs(): void {\n  rootComponentCreationTimestampMs = undefined;\n}\n\n/**\n * Adds AppStart spans from the native layer to the transaction event.\n */\nexport const appStartIntegration = ({\n  standalone = false,\n}: {\n  /**\n   * Should the integration send App Start as a standalone root span (transaction)?\n   * If false, App Start will be added as a child span to the first transaction.\n   *\n   * @default false\n   */\n  standalone?: boolean;\n} = {}): AppStartIntegration => {\n  let _client: Client | undefined = undefined;\n  let isEnabled = true;\n  let appStartDataFlushed = false;\n  let afterAllSetupCalled = false;\n  let firstStartedActiveRootSpanId: string | undefined = undefined;\n\n  const setup = (client: Client): void => {\n    _client = client;\n    const { enableAppStartTracking } = client.getOptions() as ReactNativeClientOptions;\n\n    if (!enableAppStartTracking) {\n      isEnabled = false;\n      logger.warn('[AppStart] App start tracking is disabled.');\n    }\n\n    client.on('spanStart', recordFirstStartedActiveRootSpanId);\n  };\n\n  const afterAllSetup = (client: Client): void => {\n    if (afterAllSetupCalled) {\n      return;\n    }\n    afterAllSetupCalled = true;\n\n    // TODO: automatically set standalone based on the presence of the native layer navigation integration\n\n    getAppRegistryIntegration(client)?.onRunApplication(() => {\n      if (appStartDataFlushed) {\n        logger.log('[AppStartIntegration] Resetting app start data flushed flag based on runApplication call.');\n        appStartDataFlushed = false;\n        firstStartedActiveRootSpanId = undefined;\n      } else {\n        logger.log(\n          '[AppStartIntegration] Waiting for initial app start was flush, before updating based on runApplication call.',\n        );\n      }\n    });\n  };\n\n  const processEvent = async (event: Event): Promise<Event> => {\n    if (!isEnabled || standalone) {\n      return event;\n    }\n\n    if (event.type !== 'transaction') {\n      // App start data is only relevant for transactions\n      return event;\n    }\n\n    await attachAppStartToTransactionEvent(event as TransactionEvent);\n\n    return event;\n  };\n\n  const recordFirstStartedActiveRootSpanId = (rootSpan: Span): void => {\n    if (firstStartedActiveRootSpanId) {\n      return;\n    }\n\n    if (!isRootSpan(rootSpan)) {\n      return;\n    }\n\n    setFirstStartedActiveRootSpanId(rootSpan.spanContext().spanId);\n  };\n\n  /**\n   * For testing purposes only.\n   * @private\n   */\n  const setFirstStartedActiveRootSpanId = (spanId: string | undefined): void => {\n    firstStartedActiveRootSpanId = spanId;\n    logger.debug('[AppStart] First started active root span id recorded.', firstStartedActiveRootSpanId);\n  };\n\n  async function captureStandaloneAppStart(): Promise<void> {\n    if (!standalone) {\n      logger.debug(\n        '[AppStart] App start tracking is enabled. App start will be added to the first transaction as a child span.',\n      );\n      return;\n    }\n\n    logger.debug('[AppStart] App start tracking standalone root span (transaction).');\n\n    const span = startInactiveSpan({\n      forceTransaction: true,\n      name: APP_START_TX_NAME,\n      op: UI_LOAD_OP,\n    });\n    if (span instanceof SentryNonRecordingSpan) {\n      // Tracing is disabled or the transaction was sampled\n      return;\n    }\n\n    setEndTimeValue(span, timestampInSeconds());\n    _client.emit('spanEnd', span);\n\n    const event = convertSpanToTransaction(span);\n    if (!event) {\n      logger.warn('[AppStart] Failed to convert App Start span to transaction.');\n      return;\n    }\n\n    await attachAppStartToTransactionEvent(event);\n    if (!event.spans || event.spans.length === 0) {\n      // No spans were added to the transaction, so we don't need to send it\n      return;\n    }\n\n    const scope = getCapturedScopesOnSpan(span).scope || getCurrentScope();\n    scope.captureEvent(event);\n  }\n\n  async function attachAppStartToTransactionEvent(event: TransactionEvent): Promise<void> {\n    if (appStartDataFlushed) {\n      // App start data is only relevant for the first transaction of the app run\n      return;\n    }\n\n    if (!firstStartedActiveRootSpanId) {\n      logger.warn('[AppStart] No first started active root span id recorded. Can not attach app start.');\n      return;\n    }\n\n    if (!event.contexts || !event.contexts.trace) {\n      logger.warn('[AppStart] Transaction event is missing trace context. Can not attach app start.');\n      return;\n    }\n\n    if (firstStartedActiveRootSpanId !== event.contexts.trace.span_id) {\n      logger.warn(\n        '[AppStart] First started active root span id does not match the transaction event span id. Can not attached app start.',\n      );\n      return;\n    }\n\n    const appStart = await NATIVE.fetchNativeAppStart();\n    if (!appStart) {\n      logger.warn('[AppStart] Failed to retrieve the app start metrics from the native layer.');\n      return;\n    }\n    if (appStart.has_fetched) {\n      logger.warn('[AppStart] Measured app start metrics were already reported from the native layer.');\n      return;\n    }\n\n    const appStartTimestampMs = appStart.app_start_timestamp_ms;\n    if (!appStartTimestampMs) {\n      logger.warn('[AppStart] App start timestamp could not be loaded from the native layer.');\n      return;\n    }\n\n    const appStartEndTimestampMs = recordedAppStartEndTimestampMs || getBundleStartTimestampMs();\n    if (!appStartEndTimestampMs) {\n      logger.warn(\n        '[AppStart] Javascript failed to record app start end. `setAppStartEndTimestampMs` was not called nor could the bundle start be found.',\n      );\n      return;\n    }\n\n    const isAppStartWithinBounds =\n      !!event.start_timestamp && appStartTimestampMs >= event.start_timestamp * 1_000 - MAX_APP_START_AGE_MS;\n    if (!__DEV__ && !isAppStartWithinBounds) {\n      logger.warn('[AppStart] App start timestamp is too far in the past to be used for app start span.');\n      return;\n    }\n\n    const appStartDurationMs = appStartEndTimestampMs - appStartTimestampMs;\n    if (!__DEV__ && appStartDurationMs >= MAX_APP_START_DURATION_MS) {\n      // Dev builds can have long app start waiting over minute for the first bundle to be produced\n      logger.warn('[AppStart] App start duration is over a minute long, not adding app start span.');\n      return;\n    }\n\n    if (appStartDurationMs < 0) {\n      // This can happen when MainActivity on Android is recreated,\n      // and the app start end timestamp is not updated, for example\n      // due to missing `Sentry.wrap(RootComponent)` call.\n      logger.warn(\n        '[AppStart] Last recorded app start end timestamp is before the app start timestamp.',\n        'This is usually caused by missing `Sentry.wrap(RootComponent)` call.',\n      );\n      return;\n    }\n\n    appStartDataFlushed = true;\n\n    event.contexts.trace.data = event.contexts.trace.data || {};\n    event.contexts.trace.data[SEMANTIC_ATTRIBUTE_SENTRY_OP] = UI_LOAD_OP;\n    event.contexts.trace.op = UI_LOAD_OP;\n\n    const origin = isRecordedAppStartEndTimestampMsManual ? SPAN_ORIGIN_MANUAL_APP_START : SPAN_ORIGIN_AUTO_APP_START;\n    event.contexts.trace.data[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] = origin;\n    event.contexts.trace.origin = origin;\n\n    const appStartTimestampSeconds = appStartTimestampMs / 1000;\n    event.start_timestamp = appStartTimestampSeconds;\n\n    event.spans = event.spans || [];\n    /** event.spans reference */\n    const children: SpanJSON[] = event.spans;\n\n    const maybeTtidSpan = children.find(({ op }) => op === 'ui.load.initial_display');\n    if (maybeTtidSpan) {\n      maybeTtidSpan.start_timestamp = appStartTimestampSeconds;\n      setSpanDurationAsMeasurementOnTransactionEvent(event, 'time_to_initial_display', maybeTtidSpan);\n    }\n\n    const maybeTtfdSpan = children.find(({ op }) => op === 'ui.load.full_display');\n    if (maybeTtfdSpan) {\n      maybeTtfdSpan.start_timestamp = appStartTimestampSeconds;\n      setSpanDurationAsMeasurementOnTransactionEvent(event, 'time_to_full_display', maybeTtfdSpan);\n    }\n\n    const appStartEndTimestampSeconds = appStartEndTimestampMs / 1000;\n    if (event.timestamp && event.timestamp < appStartEndTimestampSeconds) {\n      logger.debug(\n        '[AppStart] Transaction event timestamp is before app start end. Adjusting transaction event timestamp.',\n      );\n      event.timestamp = appStartEndTimestampSeconds;\n    }\n\n    const op = appStart.type === 'cold' ? APP_START_COLD_OP : APP_START_WARM_OP;\n    const appStartSpanJSON: SpanJSON = createSpanJSON({\n      op,\n      description: appStart.type === 'cold' ? 'Cold App Start' : 'Warm App Start',\n      start_timestamp: appStartTimestampSeconds,\n      timestamp: appStartEndTimestampSeconds,\n      trace_id: event.contexts.trace.trace_id,\n      parent_span_id: event.contexts.trace.span_id,\n      origin,\n    });\n    const jsExecutionSpanJSON = createJSExecutionStartSpan(appStartSpanJSON, rootComponentCreationTimestampMs);\n\n    const appStartSpans = [\n      appStartSpanJSON,\n      ...(jsExecutionSpanJSON ? [jsExecutionSpanJSON] : []),\n      ...convertNativeSpansToSpanJSON(appStartSpanJSON, appStart.spans),\n    ];\n\n    children.push(...appStartSpans);\n    logger.debug('[AppStart] Added app start spans to transaction event.', JSON.stringify(appStartSpans, undefined, 2));\n\n    const measurementKey = appStart.type === 'cold' ? APP_START_COLD_MEASUREMENT : APP_START_WARM_MEASUREMENT;\n    const measurementValue = {\n      value: appStartDurationMs,\n      unit: 'millisecond',\n    };\n    event.measurements = event.measurements || {};\n    event.measurements[measurementKey] = measurementValue;\n    logger.debug(\n      `[AppStart] Added app start measurement to transaction event.`,\n      JSON.stringify(measurementValue, undefined, 2),\n    );\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    setup,\n    afterAllSetup,\n    processEvent,\n    captureStandaloneAppStart,\n    setFirstStartedActiveRootSpanId,\n  } as AppStartIntegration;\n};\n\nfunction setSpanDurationAsMeasurementOnTransactionEvent(event: TransactionEvent, label: string, span: SpanJSON): void {\n  if (!span.timestamp || !span.start_timestamp) {\n    logger.warn('Span is missing start or end timestamp. Cam not set measurement on transaction event.');\n    return;\n  }\n\n  event.measurements = event.measurements || {};\n  event.measurements[label] = {\n    value: (span.timestamp - span.start_timestamp) * 1000,\n    unit: 'millisecond',\n  };\n}\n\n/**\n * Adds JS Execution before React Root. If `Sentry.wrap` is not used, create a span for the start of JS Bundle execution.\n */\nfunction createJSExecutionStartSpan(\n  parentSpan: SpanJSON,\n  rootComponentCreationTimestampMs: number | undefined,\n): SpanJSON | undefined {\n  const bundleStartTimestampMs = getBundleStartTimestampMs();\n  if (!bundleStartTimestampMs) {\n    return undefined;\n  }\n\n  const bundleStartTimestampSeconds = bundleStartTimestampMs / 1000;\n  if (bundleStartTimestampSeconds < parentSpan.start_timestamp) {\n    logger.warn('Bundle start timestamp is before the app start span start timestamp. Skipping JS execution span.');\n    return undefined;\n  }\n\n  if (!rootComponentCreationTimestampMs) {\n    logger.warn('Missing the root component first constructor call timestamp.');\n    return createChildSpanJSON(parentSpan, {\n      description: 'JS Bundle Execution Start',\n      start_timestamp: bundleStartTimestampSeconds,\n      timestamp: bundleStartTimestampSeconds,\n      origin: SPAN_ORIGIN_AUTO_APP_START,\n    });\n  }\n\n  return createChildSpanJSON(parentSpan, {\n    description: 'JS Bundle Execution Before React Root',\n    start_timestamp: bundleStartTimestampSeconds,\n    timestamp: rootComponentCreationTimestampMs / 1000,\n    origin: isRootComponentCreationTimestampMsManual ? SPAN_ORIGIN_MANUAL_APP_START : SPAN_ORIGIN_AUTO_APP_START,\n  });\n}\n\n/**\n * Adds native spans to the app start span.\n */\nfunction convertNativeSpansToSpanJSON(parentSpan: SpanJSON, nativeSpans: NativeAppStartResponse['spans']): SpanJSON[] {\n  return nativeSpans\n    .filter(span => span.start_timestamp_ms / 1000 >= parentSpan.start_timestamp)\n    .map(span => {\n      if (span.description === 'UIKit init') {\n        return setMainThreadInfo(createUIKitSpan(parentSpan, span));\n      }\n\n      return setMainThreadInfo(\n        createChildSpanJSON(parentSpan, {\n          description: span.description,\n          start_timestamp: span.start_timestamp_ms / 1000,\n          timestamp: span.end_timestamp_ms / 1000,\n          origin: SPAN_ORIGIN_AUTO_APP_START,\n        }),\n      );\n    });\n}\n\n/**\n * UIKit init is measured by the native layers till the native SDK start\n * RN initializes the native SDK later, the end timestamp would be wrong\n */\nfunction createUIKitSpan(parentSpan: SpanJSON, nativeUIKitSpan: NativeAppStartResponse['spans'][number]): SpanJSON {\n  const bundleStart = getBundleStartTimestampMs();\n\n  // If UIKit init ends after the bundle start, the native SDK was auto-initialized\n  // and so the end timestamp is incorrect.\n  // The timestamps can't equal, as RN initializes after UIKit.\n  if (bundleStart && bundleStart < nativeUIKitSpan.end_timestamp_ms) {\n    return createChildSpanJSON(parentSpan, {\n      description: 'UIKit Init to JS Exec Start',\n      start_timestamp: nativeUIKitSpan.start_timestamp_ms / 1000,\n      timestamp: bundleStart / 1000,\n      origin: SPAN_ORIGIN_AUTO_APP_START,\n    });\n  } else {\n    return createChildSpanJSON(parentSpan, {\n      description: 'UIKit Init',\n      start_timestamp: nativeUIKitSpan.start_timestamp_ms / 1000,\n      timestamp: nativeUIKitSpan.end_timestamp_ms / 1000,\n      origin: SPAN_ORIGIN_AUTO_APP_START,\n    });\n  }\n}\n"]}