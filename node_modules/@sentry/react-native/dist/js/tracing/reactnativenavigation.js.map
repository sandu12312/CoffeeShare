{"version":3,"file":"reactnativenavigation.js","sourceRoot":"","sources":["../../../src/js/tracing/reactnativenavigation.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Client, Integration, Span } from '@sentry/core';\nimport {\n  addBreadcrumb,\n  getClient,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  spanToJSON,\n} from '@sentry/core';\n\nimport type { EmitterSubscription } from '../utils/rnlibrariesinterface';\nimport { isSentrySpan } from '../utils/span';\nimport { ignoreEmptyBackNavigation } from './onSpanEndUtils';\nimport { SPAN_ORIGIN_AUTO_NAVIGATION_REACT_NATIVE_NAVIGATION } from './origin';\nimport type { ReactNativeTracingIntegration } from './reactnativetracing';\nimport { getReactNativeTracingIntegration } from './reactnativetracing';\nimport {\n  DEFAULT_NAVIGATION_SPAN_NAME,\n  defaultIdleOptions,\n  getDefaultIdleNavigationSpanOptions,\n  startIdleNavigationSpan as startGenericIdleNavigationSpan,\n} from './span';\n\nexport const INTEGRATION_NAME = 'ReactNativeNavigation';\n\nconst NAVIGATION_HISTORY_MAX_SIZE = 200;\n\ninterface ReactNativeNavigationOptions {\n  /**\n   * How long the instrumentation will wait for the route to mount after a change has been initiated,\n   * before the transaction is discarded.\n   *\n   * @default 1_000 (ms)\n   */\n  routeChangeTimeoutMs?: number;\n\n  /**\n   * Instrumentation will create a transaction on tab change.\n   * By default only navigation commands create transactions.\n   *\n   * @default false\n   */\n  enableTabsInstrumentation?: boolean;\n\n  /**\n   * Does not sample transactions that are from routes that have been seen any more and don't have any spans.\n   * This removes a lot of the clutter as most back navigation transactions are now ignored.\n   *\n   * @default true\n   */\n  ignoreEmptyBackNavigationTransactions?: boolean;\n\n  /** The React Native Navigation `NavigationDelegate`.\n   *\n   * ```js\n   * import { Navigation } from 'react-native-navigation';\n   * ```\n   */\n  navigation: unknown;\n}\n\ninterface ComponentEvent {\n  componentId: string;\n}\n\ntype ComponentType = 'Component' | 'TopBarTitle' | 'TopBarBackground' | 'TopBarButton';\n\nexport interface ComponentWillAppearEvent extends ComponentEvent {\n  componentName: string;\n  passProps?: Record<string | number | symbol, unknown>;\n  componentType: ComponentType;\n}\n\nexport interface EventSubscription {\n  remove(): void;\n}\n\nexport interface BottomTabPressedEvent {\n  tabIndex: number;\n}\n\nexport interface EventsRegistry {\n  registerComponentWillAppearListener(callback: (event: ComponentWillAppearEvent) => void): EmitterSubscription;\n  registerCommandListener(callback: (name: string, params: unknown) => void): EventSubscription;\n  registerBottomTabPressedListener(callback: (event: BottomTabPressedEvent) => void): EmitterSubscription;\n}\n\nexport interface NavigationDelegate {\n  events: () => EventsRegistry;\n}\n\n/**\n * Instrumentation for React Native Navigation. See docs or sample app for usage.\n *\n * How this works:\n * - `_onCommand` is called every time a commands happens and sets an IdleTransaction on the scope without any route context.\n * - `_onComponentWillAppear` is then called AFTER the state change happens due to a dispatch and sets the route context onto the active transaction.\n * - If `_onComponentWillAppear` isn't called within `options.routeChangeTimeoutMs` of the dispatch, then the transaction is not sampled and finished.\n */\nexport const reactNativeNavigationIntegration = ({\n  navigation: optionsNavigation,\n  routeChangeTimeoutMs = 1_000,\n  enableTabsInstrumentation = false,\n  ignoreEmptyBackNavigationTransactions = true,\n}: ReactNativeNavigationOptions): Integration => {\n  const navigation = optionsNavigation as NavigationDelegate;\n  let recentComponentIds: string[] = [];\n\n  let tracing: ReactNativeTracingIntegration | undefined;\n  let idleSpanOptions: Parameters<typeof startGenericIdleNavigationSpan>[1] = defaultIdleOptions;\n\n  let stateChangeTimeout: ReturnType<typeof setTimeout> | undefined;\n  let prevComponentEvent: ComponentWillAppearEvent | null = null;\n  let latestNavigationSpan: Span | undefined;\n\n  const afterAllSetup = (client: Client): void => {\n    tracing = getReactNativeTracingIntegration(client);\n    if (tracing) {\n      idleSpanOptions = {\n        finalTimeout: tracing.options.finalTimeoutMs,\n        idleTimeout: tracing.options.idleTimeoutMs,\n      };\n    }\n  };\n\n  const startIdleNavigationSpan = (): void => {\n    if (latestNavigationSpan) {\n      discardLatestNavigationSpan();\n    }\n\n    latestNavigationSpan = startGenericIdleNavigationSpan(\n      tracing && tracing.options.beforeStartSpan\n        ? tracing.options.beforeStartSpan(getDefaultIdleNavigationSpanOptions())\n        : getDefaultIdleNavigationSpanOptions(),\n      idleSpanOptions,\n    );\n    latestNavigationSpan?.setAttribute(\n      SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n      SPAN_ORIGIN_AUTO_NAVIGATION_REACT_NATIVE_NAVIGATION,\n    );\n    if (ignoreEmptyBackNavigationTransactions) {\n      ignoreEmptyBackNavigation(getClient(), latestNavigationSpan);\n    }\n\n    stateChangeTimeout = setTimeout(discardLatestNavigationSpan.bind(this), routeChangeTimeoutMs);\n  };\n\n  const updateLatestNavigationSpanWithCurrentComponent = (event: ComponentWillAppearEvent): void => {\n    if (!latestNavigationSpan) {\n      return;\n    }\n\n    // We ignore actions that pertain to the same screen.\n    const isSameComponent = prevComponentEvent && event.componentId === prevComponentEvent.componentId;\n    if (isSameComponent) {\n      discardLatestNavigationSpan();\n      return;\n    }\n\n    clearStateChangeTimeout();\n\n    const routeHasBeenSeen = recentComponentIds.includes(event.componentId);\n\n    if (spanToJSON(latestNavigationSpan).description === DEFAULT_NAVIGATION_SPAN_NAME) {\n      latestNavigationSpan.updateName(event.componentName);\n    }\n    latestNavigationSpan.setAttributes({\n      // TODO: Should we include pass props? I don't know exactly what it contains, cant find it in the RNavigation docs\n      'route.name': event.componentName,\n      'route.component_id': event.componentId,\n      'route.component_type': event.componentType,\n      'route.has_been_seen': routeHasBeenSeen,\n      'previous_route.name': prevComponentEvent?.componentName,\n      'previous_route.component_id': prevComponentEvent?.componentId,\n      'previous_route.component_type': prevComponentEvent?.componentType,\n      [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n      [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'navigation',\n    });\n\n    tracing?.setCurrentRoute(event.componentName);\n\n    addBreadcrumb({\n      category: 'navigation',\n      type: 'navigation',\n      message: `Navigation to ${event.componentName}`,\n      data: {\n        from: prevComponentEvent?.componentName,\n        to: event.componentName,\n      },\n    });\n\n    pushRecentComponentId(event.componentId);\n    prevComponentEvent = event;\n    latestNavigationSpan = undefined;\n  };\n\n  navigation.events().registerCommandListener(startIdleNavigationSpan);\n  if (enableTabsInstrumentation) {\n    navigation.events().registerBottomTabPressedListener(startIdleNavigationSpan);\n  }\n  navigation.events().registerComponentWillAppearListener(updateLatestNavigationSpanWithCurrentComponent);\n\n  const pushRecentComponentId = (id: string): void => {\n    recentComponentIds.push(id);\n\n    if (recentComponentIds.length > NAVIGATION_HISTORY_MAX_SIZE) {\n      recentComponentIds = recentComponentIds.slice(recentComponentIds.length - NAVIGATION_HISTORY_MAX_SIZE);\n    }\n  };\n\n  const discardLatestNavigationSpan = (): void => {\n    if (latestNavigationSpan) {\n      if (isSentrySpan(latestNavigationSpan)) {\n        latestNavigationSpan['_sampled'] = false;\n      }\n      // TODO: What if it's not SentrySpan?\n      latestNavigationSpan.end();\n      latestNavigationSpan = undefined;\n    }\n\n    clearStateChangeTimeout();\n  };\n\n  const clearStateChangeTimeout = (): void => {\n    if (typeof stateChangeTimeout !== 'undefined') {\n      clearTimeout(stateChangeTimeout);\n      stateChangeTimeout = undefined;\n    }\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    afterAllSetup,\n  };\n};\n"]}