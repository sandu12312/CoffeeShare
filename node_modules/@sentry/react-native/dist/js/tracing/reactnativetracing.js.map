{"version":3,"file":"reactnativetracing.js","sourceRoot":"","sources":["../../../src/js/tracing/reactnativetracing.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport { instrumentOutgoingRequests } from '@sentry/browser';\nimport type { Client, Event, Integration, StartSpanOptions } from '@sentry/core';\nimport { getClient } from '@sentry/core';\n\nimport { isWeb } from '../utils/environment';\nimport { getDevServer } from './../integrations/debugsymbolicatorutils';\nimport { addDefaultOpForSpanFrom, addThreadInfoToSpan, defaultIdleOptions } from './span';\n\nexport const INTEGRATION_NAME = 'ReactNativeTracing';\n\nexport interface ReactNativeTracingOptions {\n  /**\n   * The time that has to pass without any span being created.\n   * If this time is exceeded, the idle span will finish.\n   *\n   * @default 1_000 (ms)\n   */\n  idleTimeoutMs?: number;\n\n  /**\n   * The max. time an idle span may run.\n   * If this time is exceeded, the idle span will finish no matter what.\n   *\n   * @default 60_0000 (ms)\n   */\n  finalTimeoutMs?: number;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Fetch in React Native is a `whatwg-fetch` polyfill which uses XHR under the hood.\n   * This causes duplicates when both `traceFetch` and `traceXHR` are enabled at the same time.\n   *\n   * @default false\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * @default true\n   */\n  traceXHR: boolean;\n\n  /**\n   * If true, Sentry will capture http timings and add them to the corresponding http spans.\n   *\n   * @default true\n   */\n  enableHTTPTimings: boolean;\n\n  /**\n   * A callback which is called before a span for a navigation is started.\n   * It receives the options passed to `startSpan`, and expects to return an updated options object.\n   */\n  beforeStartSpan?: (options: StartSpanOptions) => StartSpanOptions;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * @default (url: string) => true\n   */\n  shouldCreateSpanForRequest?(this: void, url: string): boolean;\n}\n\nfunction getDefaultTracePropagationTargets(): RegExp[] | undefined {\n  if (isWeb()) {\n    return undefined;\n  }\n  return [/.*/];\n}\n\nexport const defaultReactNativeTracingOptions: ReactNativeTracingOptions = {\n  // Fetch in React Native is a `whatwg-fetch` polyfill which uses XHR under the hood.\n  // This causes duplicates when both `traceFetch` and `traceXHR` are enabled at the same time.\n  // https://github.com/facebook/react-native/blob/28945c68da056ab2ac01de7e542a845b2bca6096/packages/react-native/Libraries/Network/fetch.js\n  // (RN Web uses browsers native fetch implementation)\n  traceFetch: isWeb() ? true : false,\n  traceXHR: true,\n  enableHTTPTimings: true,\n};\n\nexport type ReactNativeTracingState = {\n  currentRoute: string | undefined;\n};\n\nexport const reactNativeTracingIntegration = (\n  options: Partial<ReactNativeTracingOptions> = {},\n): Integration & {\n  options: ReactNativeTracingOptions;\n  state: ReactNativeTracingState;\n  setCurrentRoute: (route: string) => void;\n} => {\n  const state: ReactNativeTracingState = {\n    currentRoute: undefined,\n  };\n\n  const finalOptions = {\n    ...defaultReactNativeTracingOptions,\n    ...options,\n    beforeStartSpan: options.beforeStartSpan ?? ((options: StartSpanOptions) => options),\n    finalTimeoutMs: options.finalTimeoutMs ?? defaultIdleOptions.finalTimeout,\n    idleTimeoutMs: options.idleTimeoutMs ?? defaultIdleOptions.idleTimeout,\n  };\n\n  const userShouldCreateSpanForRequest = finalOptions.shouldCreateSpanForRequest;\n\n  // Drop Dev Server Spans\n  const devServerUrl = getDevServer()?.url;\n  const finalShouldCreateSpanForRequest =\n    devServerUrl === undefined\n      ? userShouldCreateSpanForRequest\n      : (url: string): boolean => {\n          if (url.startsWith(devServerUrl)) {\n            return false;\n          }\n          if (userShouldCreateSpanForRequest) {\n            return userShouldCreateSpanForRequest(url);\n          }\n          return true;\n        };\n\n  finalOptions.shouldCreateSpanForRequest = finalShouldCreateSpanForRequest;\n\n  const setup = (client: Client): void => {\n    addDefaultOpForSpanFrom(client);\n    addThreadInfoToSpan(client);\n\n    instrumentOutgoingRequests(client, {\n      traceFetch: finalOptions.traceFetch,\n      traceXHR: finalOptions.traceXHR,\n      shouldCreateSpanForRequest: finalOptions.shouldCreateSpanForRequest,\n      tracePropagationTargets: client.getOptions().tracePropagationTargets || getDefaultTracePropagationTargets(),\n    });\n  };\n\n  const processEvent = (event: Event): Event => {\n    if (event.contexts && state.currentRoute) {\n      event.contexts.app = { view_names: [state.currentRoute], ...event.contexts.app };\n    }\n    return event;\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup,\n    processEvent,\n    options: finalOptions,\n    state,\n    setCurrentRoute: (route: string) => {\n      state.currentRoute = route;\n    },\n  };\n};\n\nexport type ReactNativeTracingIntegration = ReturnType<typeof reactNativeTracingIntegration>;\n\n/**\n * Returns the current React Native Tracing integration.\n */\nexport function getCurrentReactNativeTracingIntegration(): ReactNativeTracingIntegration | undefined {\n  const client = getClient();\n  if (!client) {\n    return undefined;\n  }\n\n  return getReactNativeTracingIntegration(client);\n}\n\n/**\n * Returns React Native Tracing integration of given client.\n */\nexport function getReactNativeTracingIntegration(client: Client): ReactNativeTracingIntegration | undefined {\n  return client.getIntegrationByName(INTEGRATION_NAME) as ReactNativeTracingIntegration | undefined;\n}\n"]}