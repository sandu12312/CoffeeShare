{"version":3,"file":"appRegistry.js","sourceRoot":"","sources":["../../../src/js/integrations/appRegistry.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AAEjD,OAAO,EAAE,KAAK,EAAE,MAAM,sBAAsB,CAAC;AAC7C,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAE,oBAAoB,EAAE,MAAM,sBAAsB,CAAC;AAE5D,MAAM,CAAC,MAAM,gBAAgB,GAAG,aAAa,CAAC;AAE9C,MAAM,CAAC,MAAM,sBAAsB,GAAG,GAEpC,EAAE;IACF,MAAM,SAAS,GAAmB,EAAE,CAAC;IAErC,OAAO;QACL,IAAI,EAAE,gBAAgB;QACtB,SAAS,EAAE,GAAG,EAAE;YACd,IAAI,KAAK,EAAE,EAAE;gBACX,OAAO;aACR;YAED,8BAA8B,CAAC,SAAS,CAAC,CAAC;QAC5C,CAAC;QACD,gBAAgB,EAAE,CAAC,QAAoB,EAAE,EAAE;YACzC,IAAI,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;gBAChC,MAAM,CAAC,KAAK,CAAC,uDAAuD,CAAC,CAAC;gBACtE,OAAO;aACR;YACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3B,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAAC,SAAyB,EAAQ,EAAE;IAChF,MAAM,EAAE,WAAW,EAAE,GAAG,oBAAoB,CAAC;IAC7C,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO;KACR;IAED,SAAS,CAAC,WAAW,EAAE,gBAAgB,EAAE,sBAAsB,CAAC,EAAE;QAChE,OAAO,CAAC,GAAG,IAAI,EAAE,EAAE;YACjB,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC1C,OAAO,sBAAsB,CAAC,GAAG,IAAI,CAAC,CAAC;QACzC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,yBAAyB,GAAG,CACvC,SAA6B,SAAS,EAAE,EACe,EAAE;IACzD,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,SAAS,CAAC;KAClB;IAED,OAAO,MAAM,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;AACvD,CAAC,CAAC","sourcesContent":["import type { Client, Integration } from '@sentry/core';\nimport { getClient, logger } from '@sentry/core';\n\nimport { isWeb } from '../utils/environment';\nimport { fillTyped } from '../utils/fill';\nimport { ReactNativeLibraries } from '../utils/rnlibraries';\n\nexport const INTEGRATION_NAME = 'AppRegistry';\n\nexport const appRegistryIntegration = (): Integration & {\n  onRunApplication: (callback: () => void) => void;\n} => {\n  const callbacks: (() => void)[] = [];\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce: () => {\n      if (isWeb()) {\n        return;\n      }\n\n      patchAppRegistryRunApplication(callbacks);\n    },\n    onRunApplication: (callback: () => void) => {\n      if (callbacks.includes(callback)) {\n        logger.debug('[AppRegistryIntegration] Callback already registered.');\n        return;\n      }\n      callbacks.push(callback);\n    },\n  };\n};\n\nexport const patchAppRegistryRunApplication = (callbacks: (() => void)[]): void => {\n  const { AppRegistry } = ReactNativeLibraries;\n  if (!AppRegistry) {\n    return;\n  }\n\n  fillTyped(AppRegistry, 'runApplication', originalRunApplication => {\n    return (...args) => {\n      callbacks.forEach(callback => callback());\n      return originalRunApplication(...args);\n    };\n  });\n};\n\nexport const getAppRegistryIntegration = (\n  client: Client | undefined = getClient(),\n): ReturnType<typeof appRegistryIntegration> | undefined => {\n  if (!client) {\n    return undefined;\n  }\n\n  return client.getIntegrationByName(INTEGRATION_NAME);\n};\n"]}