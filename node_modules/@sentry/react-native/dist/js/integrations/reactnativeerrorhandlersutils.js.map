{"version":3,"file":"reactnativeerrorhandlersutils.js","sourceRoot":"","sources":["../../../src/js/integrations/reactnativeerrorhandlersutils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AAEtC,OAAO,EAAE,oBAAoB,EAAE,MAAM,sBAAsB,CAAC;AAC5D,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAEnD;;;;;;;;GAQG;AACH,MAAM,UAAU,eAAe;IAC7B,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE;QACnC,MAAM,CAAC,IAAI,CAAC,yEAAyE,CAAC,CAAC;QACvF,OAAO;KACR;IAED,MAAM,OAAO,GAAG,kBAAkB,EAAE,CAAC;IAErC,+CAA+C;IAC/C,6DAA6D;IAC7D,OAAO,CAAC,2BAA2B,CAAC,CAAC;IACrC,6DAA6D;IAC7D,OAAO,CAAC,8BAA8B,CAAC,CAAC;IAExC,oBAAoB,CAAC,SAAS,CAAC,cAAc,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;AAC1E,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,kBAAkB;IAChC,yFAAyF;IACzF,2GAA2G;IAC3G,OAAO,OAAO,CAAC,qCAAqC,CAAC,CAAC;AACxD,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,wBAAwB;IAItC,gGAAgG;IAChG,OAAO,OAAO,CAAC,yCAAyC,CAAC,CAAC;AAC5D,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,mBAAmB;IACjC,IAAI;QACF,uFAAuF;QACvF,gFAAgF;QAChF,+CAA+C;QAC/C,+GAA+G;QAC/G,0FAA0F;QAC1F,MAAM,kBAAkB,GAAG,oBAAoB,CAAC,OAAO,CAAC;QACxD,gGAAgG;QAChG,MAAM,qBAAqB,GAAG,OAAO,CAAC,qCAAqC,CAAC,CAAC;QAC7E,MAAM,mBAAmB,GAAG,kBAAkB,EAAE,CAAC;QAEjD,IAAI,kBAAkB,KAAK,qBAAqB,EAAE;YAChD,MAAM,CAAC,IAAI,CACT,2EAA2E;gBACzE,0EAA0E;gBAC1E,qGAAqG;gBACrG,sFAAsF,CACzF,CAAC;SACH;QAED,qEAAqE;QACrE,IAAI,mBAAmB,KAAK,aAAa,CAAC,OAAO,EAAE;YACjD,MAAM,CAAC,IAAI,CACT,6DAA6D;gBAC3D,sFAAsF,CACzF,CAAC;SACH;aAAM;YACL,MAAM,CAAC,GAAG,CAAC,wDAAwD,CAAC,CAAC;SACtE;KACF;IAAC,OAAO,CAAC,EAAE;QACV,aAAa;QACb,MAAM,CAAC,IAAI,CACT,6DAA6D;YAC3D,sFAAsF,CACzF,CAAC;KACH;AACH,CAAC","sourcesContent":["import { logger } from '@sentry/core';\n\nimport { ReactNativeLibraries } from '../utils/rnlibraries';\nimport { RN_GLOBAL_OBJ } from '../utils/worldwide';\n\n/**\n * Polyfill the global promise instance with one we can be sure that we can attach the tracking to.\n *\n * In newer RN versions >=0.63, the global promise is not the same reference as the one imported from the promise library.\n * This is due to a version mismatch between promise versions.\n * Originally we tried a solution where we would have you put a package resolution to ensure the promise instances match. However,\n * - Using a package resolution requires the you to manually troubleshoot.\n * - The package resolution fix no longer works with 0.67 on iOS Hermes.\n */\nexport function polyfillPromise(): void {\n  if (!ReactNativeLibraries.Utilities) {\n    logger.warn('Could not polyfill Promise. React Native Libraries Utilities not found.');\n    return;\n  }\n\n  const Promise = getPromisePolyfill();\n\n  // As of RN 0.67 only done and finally are used\n  // eslint-disable-next-line import/no-extraneous-dependencies\n  require('promise/setimmediate/done');\n  // eslint-disable-next-line import/no-extraneous-dependencies\n  require('promise/setimmediate/finally');\n\n  ReactNativeLibraries.Utilities.polyfillGlobal('Promise', () => Promise);\n}\n\n/**\n * Single source of truth for the Promise implementation we want to use.\n * This is important for verifying that the rejected promise tracing will work as expected.\n */\nexport function getPromisePolyfill(): unknown {\n  /* eslint-disable import/no-extraneous-dependencies,@typescript-eslint/no-var-requires */\n  // Below, we follow the exact way React Native initializes its promise library, and we globally replace it.\n  return require('promise/setimmediate/es6-extensions');\n}\n\n/**\n * Lazy require the rejection tracking module\n */\nexport function requireRejectionTracking(): {\n  disable: () => void;\n  enable: (arg: unknown) => void;\n} {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires,import/no-extraneous-dependencies\n  return require('promise/setimmediate/rejection-tracking');\n}\n\n/**\n * Checks if the promise is the same one or not, if not it will warn the user\n */\nexport function checkPromiseAndWarn(): void {\n  try {\n    // `promise` package is a dependency of react-native, therefore it is always available.\n    // but it is possible that the user has installed a different version of promise\n    // or dependency that uses a different version.\n    // We have to check if the React Native Promise and the `promise` package Promise are using the same reference.\n    // If they are not, likely there are multiple versions of the `promise` package installed.\n    const ReactNativePromise = ReactNativeLibraries.Promise;\n    // eslint-disable-next-line @typescript-eslint/no-var-requires,import/no-extraneous-dependencies\n    const PromisePackagePromise = require('promise/setimmediate/es6-extensions');\n    const UsedPromisePolyfill = getPromisePolyfill();\n\n    if (ReactNativePromise !== PromisePackagePromise) {\n      logger.warn(\n        'You appear to have multiple versions of the \"promise\" package installed. ' +\n          'This may cause unexpected behavior like undefined `Promise.allSettled`. ' +\n          'Please install the `promise` package manually using the exact version as the React Native package. ' +\n          'See https://docs.sentry.io/platforms/react-native/troubleshooting/ for more details.',\n      );\n    }\n\n    // This only make sense if the user disabled the integration Polyfill\n    if (UsedPromisePolyfill !== RN_GLOBAL_OBJ.Promise) {\n      logger.warn(\n        'Unhandled promise rejections will not be caught by Sentry. ' +\n          'See https://docs.sentry.io/platforms/react-native/troubleshooting/ for more details.',\n      );\n    } else {\n      logger.log('Unhandled promise rejections will be caught by Sentry.');\n    }\n  } catch (e) {\n    // Do Nothing\n    logger.warn(\n      'Unhandled promise rejections will not be caught by Sentry. ' +\n        'See https://docs.sentry.io/platforms/react-native/troubleshooting/ for more details.',\n    );\n  }\n}\n"]}