{"version":3,"file":"nativelinkederrors.js","sourceRoot":"","sources":["../../../src/js/integrations/nativelinkederrors.ts"],"names":[],"mappings":"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","sourcesContent":["import { exceptionFromError } from '@sentry/browser';\nimport type {\n  Client,\n  DebugImage,\n  Event,\n  EventHint,\n  Exception,\n  ExtendedError,\n  Integration,\n  StackFrame,\n  StackParser,\n} from '@sentry/core';\nimport { isInstanceOf, isPlainObject, isString } from '@sentry/core';\n\nimport type { NativeStackFrames } from '../NativeRNSentry';\nimport { NATIVE } from '../wrapper';\n\nconst INTEGRATION_NAME = 'NativeLinkedErrors';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\ninterface LinkedErrorsOptions {\n  key: string;\n  limit: number;\n}\n\n/**\n * Processes JS and RN native linked errors.\n */\nexport const nativeLinkedErrorsIntegration = (options: Partial<LinkedErrorsOptions> = {}): Integration => {\n  const key = options.key || DEFAULT_KEY;\n  const limit = options.limit || DEFAULT_LIMIT;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce: (): void => {\n      // noop\n    },\n    preprocessEvent: (event: Event, hint: EventHint, client: Client): void =>\n      preprocessEvent(event, hint, client, limit, key),\n  };\n};\n\nfunction preprocessEvent(event: Event, hint: EventHint | undefined, client: Client, limit: number, key: string): void {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  const parser = client.getOptions().stackParser;\n\n  const { exceptions: linkedErrors, debugImages } = walkErrorTree(\n    parser,\n    limit,\n    hint.originalException as ExtendedError,\n    key,\n  );\n  event.exception.values = [...event.exception.values, ...linkedErrors];\n\n  event.debug_meta = event.debug_meta || {};\n  event.debug_meta.images = event.debug_meta.images || [];\n  event.debug_meta.images.push(...(debugImages || []));\n}\n\n/**\n * Walks linked errors and created Sentry exceptions chain.\n * Collects debug images from native errors stack frames.\n */\nfunction walkErrorTree(\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  exceptions: Exception[] = [],\n  debugImages: DebugImage[] = [],\n): {\n  exceptions: Exception[];\n  debugImages?: DebugImage[];\n} {\n  const linkedError = error[key];\n  if (!linkedError || exceptions.length + 1 >= limit) {\n    return {\n      exceptions,\n      debugImages,\n    };\n  }\n\n  let exception: Exception;\n  let exceptionDebugImages: DebugImage[] | undefined;\n  if (isString(linkedError)) {\n    exception = {\n      value: linkedError,\n    };\n  } else if ('stackElements' in linkedError) {\n    // isJavaException\n    exception = exceptionFromJavaStackElements(linkedError);\n  } else if ('stackReturnAddresses' in linkedError) {\n    // isObjCException\n    const { appleException, appleDebugImages } = exceptionFromAppleStackReturnAddresses(linkedError);\n    exception = appleException;\n    exceptionDebugImages = appleDebugImages;\n  } else if (isInstanceOf(linkedError, Error)) {\n    exception = exceptionFromError(parser, error[key]);\n  } else if (isPlainObject(linkedError)) {\n    exception = {\n      type: typeof linkedError.name === 'string' ? linkedError.name : undefined,\n      value: typeof linkedError.message === 'string' ? linkedError.message : undefined,\n    };\n  } else {\n    return {\n      exceptions,\n      debugImages,\n    };\n  }\n\n  return walkErrorTree(\n    parser,\n    limit,\n    linkedError,\n    key,\n    [...exceptions, exception],\n    [...debugImages, ...(exceptionDebugImages || [])],\n  );\n}\n\n/**\n * Converts a Java Throwable to an SentryException\n */\nfunction exceptionFromJavaStackElements(javaThrowable: {\n  name: string;\n  message: string;\n  stackElements: {\n    className: string;\n    fileName: string;\n    methodName: string;\n    lineNumber: number;\n  }[];\n}): Exception {\n  const nativePackage = fetchNativePackage();\n  return {\n    type: javaThrowable.name,\n    value: javaThrowable.message,\n    stacktrace: {\n      frames: javaThrowable.stackElements\n        .map(\n          stackElement =>\n            <StackFrame>{\n              platform: 'java',\n              module: stackElement.className,\n              filename: stackElement.fileName,\n              lineno: stackElement.lineNumber >= 0 ? stackElement.lineNumber : undefined,\n              function: stackElement.methodName,\n              in_app: nativePackage !== null && stackElement.className.startsWith(nativePackage) ? true : undefined,\n            },\n        )\n        .reverse(),\n    },\n  };\n}\n\n/**\n * Converts StackAddresses to a SentryException with DebugMetaImages\n */\nfunction exceptionFromAppleStackReturnAddresses(objCException: {\n  name: string;\n  message: string;\n  stackReturnAddresses: number[];\n}): {\n  appleException: Exception;\n  appleDebugImages: DebugImage[];\n} {\n  const nativeStackFrames = fetchNativeStackFrames(objCException.stackReturnAddresses);\n\n  return {\n    appleException: {\n      type: objCException.name,\n      value: objCException.message,\n      stacktrace: {\n        frames: (nativeStackFrames && nativeStackFrames.frames.reverse()) || [],\n      },\n    },\n    appleDebugImages: (nativeStackFrames && (nativeStackFrames.debugMetaImages as DebugImage[])) || [],\n  };\n}\n\nlet nativePackage: string | null = null;\n/**\n * Fetches the native package/image name from the native layer\n */\nfunction fetchNativePackage(): string | null {\n  if (nativePackage === null) {\n    nativePackage = NATIVE.fetchNativePackageName();\n  }\n  return nativePackage;\n}\n\n/**\n * Fetches native debug image information on iOS\n */\nfunction fetchNativeStackFrames(instructionsAddr: number[]): NativeStackFrames | null {\n  return NATIVE.fetchNativeStackFramesBy(instructionsAddr);\n}\n"]}