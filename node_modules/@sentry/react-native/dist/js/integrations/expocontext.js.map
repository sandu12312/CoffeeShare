{"version":3,"file":"expocontext.js","sourceRoot":"","sources":["../../../src/js/integrations/expocontext.ts"],"names":[],"mappings":"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","sourcesContent":["import { type DeviceContext, type Event, type Integration, type OsContext, logger } from '@sentry/core';\n\nimport type { ReactNativeClient } from '../client';\nimport { isExpo, isExpoGo } from '../utils/environment';\nimport { getExpoDevice, getExpoUpdates } from '../utils/expomodules';\nimport { NATIVE } from '../wrapper';\n\nconst INTEGRATION_NAME = 'ExpoContext';\n\nexport const OTA_UPDATES_CONTEXT_KEY = 'ota_updates';\n\n/** Load device context from expo modules. */\nexport const expoContextIntegration = (): Integration => {\n  let _expoUpdatesContextCached: ExpoUpdatesContext | undefined;\n\n  function setup(client: ReactNativeClient): void {\n    client.on('afterInit', () => {\n      if (!client.getOptions().enableNative) {\n        return;\n      }\n\n      setExpoUpdatesNativeContext();\n    });\n  }\n\n  function setExpoUpdatesNativeContext(): void {\n    if (!isExpo() || isExpoGo()) {\n      return;\n    }\n\n    const expoUpdates = getExpoUpdatesContextCached();\n\n    try {\n      // Ensures native errors and crashes have the same context as JS errors\n      NATIVE.setContext(OTA_UPDATES_CONTEXT_KEY, expoUpdates);\n    } catch (error) {\n      logger.error('Error setting Expo updates context:', error);\n    }\n  }\n\n  function processEvent(event: Event): Event {\n    if (!isExpo()) {\n      return event;\n    }\n\n    addExpoGoContext(event);\n    addExpoUpdatesContext(event);\n    return event;\n  }\n\n  function addExpoUpdatesContext(event: Event): void {\n    event.contexts = event.contexts || {};\n    event.contexts[OTA_UPDATES_CONTEXT_KEY] = {\n      ...getExpoUpdatesContextCached(),\n    };\n  }\n\n  function getExpoUpdatesContextCached(): ExpoUpdatesContext {\n    if (_expoUpdatesContextCached) {\n      return _expoUpdatesContextCached;\n    }\n\n    return (_expoUpdatesContextCached = getExpoUpdatesContext());\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    setup,\n    processEvent,\n  };\n};\n\n/**\n * @internal Exposed for testing purposes\n */\nexport function getExpoUpdatesContext(): ExpoUpdatesContext {\n  const expoUpdates = getExpoUpdates();\n  if (!expoUpdates) {\n    return {\n      is_enabled: false,\n    };\n  }\n\n  const updatesContext: ExpoUpdatesContext = {\n    is_enabled: !!expoUpdates.isEnabled,\n    is_embedded_launch: !!expoUpdates.isEmbeddedLaunch,\n    is_emergency_launch: !!expoUpdates.isEmergencyLaunch,\n    is_using_embedded_assets: !!expoUpdates.isUsingEmbeddedAssets,\n  };\n\n  if (typeof expoUpdates.updateId === 'string' && expoUpdates.updateId) {\n    updatesContext.update_id = expoUpdates.updateId.toLowerCase();\n  }\n  if (typeof expoUpdates.channel === 'string' && expoUpdates.channel) {\n    updatesContext.channel = expoUpdates.channel.toLowerCase();\n  }\n  if (typeof expoUpdates.runtimeVersion === 'string' && expoUpdates.runtimeVersion) {\n    updatesContext.runtime_version = expoUpdates.runtimeVersion.toLowerCase();\n  }\n  if (typeof expoUpdates.checkAutomatically === 'string' && expoUpdates.checkAutomatically) {\n    updatesContext.check_automatically = expoUpdates.checkAutomatically.toLowerCase();\n  }\n  if (typeof expoUpdates.emergencyLaunchReason === 'string' && expoUpdates.emergencyLaunchReason) {\n    updatesContext.emergency_launch_reason = expoUpdates.emergencyLaunchReason;\n  }\n  if (typeof expoUpdates.launchDuration === 'number') {\n    updatesContext.launch_duration = expoUpdates.launchDuration;\n  }\n  if (expoUpdates.createdAt instanceof Date) {\n    updatesContext.created_at = expoUpdates.createdAt.toISOString();\n  }\n  return updatesContext;\n}\n\nfunction addExpoGoContext(event: Event): void {\n  if (!isExpoGo()) {\n    return;\n  }\n\n  const expoDeviceContext = getExpoDeviceContext();\n  if (expoDeviceContext) {\n    event.contexts = event.contexts || {};\n    event.contexts.device = { ...expoDeviceContext, ...event.contexts.device };\n  }\n\n  const expoOsContext = getExpoOsContext();\n  if (expoOsContext) {\n    event.contexts = event.contexts || {};\n    event.contexts.os = { ...expoOsContext, ...event.contexts.os };\n  }\n}\n\n/**\n * Returns the Expo Device context if present\n */\nfunction getExpoDeviceContext(): DeviceContext | undefined {\n  const expoDevice = getExpoDevice();\n\n  if (!expoDevice) {\n    return undefined;\n  }\n\n  return {\n    name: expoDevice.deviceName,\n    simulator: !expoDevice?.isDevice,\n    model: expoDevice.modelName,\n    manufacturer: expoDevice.manufacturer,\n    memory_size: expoDevice.totalMemory,\n  };\n}\n\n/**\n * Returns the Expo OS context if present\n */\nfunction getExpoOsContext(): OsContext | undefined {\n  const expoDevice = getExpoDevice();\n\n  if (!expoDevice) {\n    return undefined;\n  }\n\n  return {\n    build: expoDevice.osBuildId,\n    version: expoDevice.osVersion,\n    name: expoDevice.osName,\n  };\n}\n\ntype ExpoUpdatesContext = Partial<{\n  is_enabled: boolean;\n  is_embedded_launch: boolean;\n  is_emergency_launch: boolean;\n  is_using_embedded_assets: boolean;\n  update_id: string;\n  channel: string;\n  runtime_version: string;\n  check_automatically: string;\n  emergency_launch_reason: string;\n  launch_duration: number;\n  created_at: string;\n}>;\n"]}