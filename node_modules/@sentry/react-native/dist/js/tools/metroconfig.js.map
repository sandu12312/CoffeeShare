{"version":3,"file":"metroconfig.js","sourceRoot":"","sources":["../../../src/js/tools/metroconfig.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '@sentry/core';\nimport type { MetroConfig, MixedOutput, Module, ReadOnlyGraph } from 'metro';\nimport type { CustomResolutionContext, CustomResolver, Resolution } from 'metro-resolver';\nimport * as process from 'process';\nimport { env } from 'process';\n\nimport { enableLogger } from './enableLogger';\nimport {\n  setSentryBabelTransformerOptions,\n  setSentryDefaultBabelTransformerPathEnv,\n} from './sentryBabelTransformerUtils';\nimport { createSentryMetroSerializer, unstable_beforeAssetSerializationPlugin } from './sentryMetroSerializer';\nimport type { DefaultConfigOptions } from './vendor/expo/expoconfig';\nexport * from './sentryMetroSerializer';\nimport { withSentryMiddleware } from './metroMiddleware';\n\nenableLogger();\n\nexport interface SentryMetroConfigOptions {\n  /**\n   * Annotates React components with Sentry data.\n   * @default false\n   */\n  annotateReactComponents?:\n    | boolean\n    | {\n        ignoredComponents?: string[];\n      };\n  /**\n   * Adds the Sentry replay package for web.\n   * @default true\n   */\n  includeWebReplay?: boolean;\n  /**\n   * Add Sentry Metro Server Middleware which\n   * enables the app to fetch stack frames source context.\n   * @default true\n   */\n  enableSourceContextInDevelopment?: boolean;\n}\n\nexport interface SentryExpoConfigOptions {\n  /**\n   * Pass a custom `getDefaultConfig` function to override the default Expo configuration getter.\n   */\n  getDefaultConfig?: typeof getSentryExpoConfig;\n}\n\n/**\n * Adds Sentry to the Metro config.\n *\n * Adds Debug ID to the output bundle and source maps.\n * Collapses Sentry frames from the stack trace view in LogBox.\n */\nexport function withSentryConfig(\n  config: MetroConfig,\n  {\n    annotateReactComponents = false,\n    includeWebReplay = true,\n    enableSourceContextInDevelopment = true,\n  }: SentryMetroConfigOptions = {},\n): MetroConfig {\n  setSentryMetroDevServerEnvFlag();\n\n  let newConfig = config;\n\n  newConfig = withSentryDebugId(newConfig);\n  newConfig = withSentryFramesCollapsed(newConfig);\n  if (annotateReactComponents) {\n    newConfig = withSentryBabelTransformer(newConfig, annotateReactComponents);\n  }\n  if (includeWebReplay === false) {\n    newConfig = withSentryResolver(newConfig, includeWebReplay);\n  }\n  if (enableSourceContextInDevelopment) {\n    newConfig = withSentryMiddleware(newConfig);\n  }\n\n  return newConfig;\n}\n\n/**\n * This function returns Default Expo configuration with Sentry plugins.\n */\nexport function getSentryExpoConfig(\n  projectRoot: string,\n  options: DefaultConfigOptions & SentryExpoConfigOptions & SentryMetroConfigOptions = {},\n): MetroConfig {\n  setSentryMetroDevServerEnvFlag();\n\n  const getDefaultConfig = options.getDefaultConfig || loadExpoMetroConfigModule().getDefaultConfig;\n  const config = getDefaultConfig(projectRoot, {\n    ...options,\n    unstable_beforeAssetSerializationPlugins: [\n      ...(options.unstable_beforeAssetSerializationPlugins || []),\n      unstable_beforeAssetSerializationPlugin,\n    ],\n  });\n\n  let newConfig = withSentryFramesCollapsed(config);\n  if (options.annotateReactComponents) {\n    newConfig = withSentryBabelTransformer(newConfig, options.annotateReactComponents);\n  }\n\n  if (options.includeWebReplay === false) {\n    newConfig = withSentryResolver(newConfig, options.includeWebReplay);\n  }\n\n  if (options.enableSourceContextInDevelopment ?? true) {\n    newConfig = withSentryMiddleware(newConfig);\n  }\n\n  return newConfig;\n}\n\nfunction loadExpoMetroConfigModule(): {\n  getDefaultConfig: (\n    projectRoot: string,\n    options: {\n      unstable_beforeAssetSerializationPlugins?: ((serializationInput: {\n        graph: ReadOnlyGraph<MixedOutput>;\n        premodules: Module[];\n        debugId?: string;\n      }) => Module[])[];\n    },\n  ) => MetroConfig;\n} {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    return require('expo/metro-config');\n  } catch (e) {\n    throw new Error('Unable to load `expo/metro-config`. Make sure you have Expo installed.');\n  }\n}\n\n/**\n * Adds Sentry Babel transformer to the Metro config.\n */\nexport function withSentryBabelTransformer(\n  config: MetroConfig,\n  annotateReactComponents: true | { ignoredComponents?: string[] },\n): MetroConfig {\n  const defaultBabelTransformerPath = config.transformer && config.transformer.babelTransformerPath;\n  logger.debug('Default Babel transformer path from `config.transformer`:', defaultBabelTransformerPath);\n\n  if (!defaultBabelTransformerPath) {\n    // This has to be console.warn because the options is enabled but won't be used\n    // eslint-disable-next-line no-console\n    console.warn('`transformer.babelTransformerPath` is undefined.');\n    // eslint-disable-next-line no-console\n    console.warn('Sentry Babel transformer cannot be used. Not adding it...');\n    return config;\n  }\n\n  if (defaultBabelTransformerPath) {\n    setSentryDefaultBabelTransformerPathEnv(defaultBabelTransformerPath);\n  }\n\n  if (typeof annotateReactComponents === 'object') {\n    setSentryBabelTransformerOptions({\n      annotateReactComponents,\n    });\n  }\n\n  return {\n    ...config,\n    transformer: {\n      ...config.transformer,\n      babelTransformerPath: require.resolve('./sentryBabelTransformer'),\n    },\n  };\n}\n\ntype MetroCustomSerializer = Required<Required<MetroConfig>['serializer']>['customSerializer'] | undefined;\n\nfunction withSentryDebugId(config: MetroConfig): MetroConfig {\n  const customSerializer = createSentryMetroSerializer(\n    config.serializer?.customSerializer || undefined,\n  ) as MetroCustomSerializer;\n  // MetroConfig types customSerializers as async only, but sync returns are also supported\n  // The default serializer is sync\n\n  return {\n    ...config,\n    serializer: {\n      ...config.serializer,\n      customSerializer,\n    },\n  };\n}\n\n// Based on: https://github.com/facebook/metro/blob/c21daba415ea26511e157f794689caab9abe8236/packages/metro-resolver/src/resolve.js#L86-L91\ntype CustomResolverBeforeMetro068 = (\n  context: CustomResolutionContext,\n  realModuleName: string,\n  platform: string | null,\n  moduleName?: string,\n) => Resolution;\n\n/**\n * Includes `@sentry/replay` packages based on the `includeWebReplay` flag and current bundle `platform`.\n */\nexport function withSentryResolver(config: MetroConfig, includeWebReplay: boolean | undefined): MetroConfig {\n  const originalResolver = config.resolver?.resolveRequest as CustomResolver | CustomResolverBeforeMetro068 | undefined;\n\n  const sentryResolverRequest: CustomResolver = (\n    context: CustomResolutionContext,\n    moduleName: string,\n    platform: string | null,\n    oldMetroModuleName?: string,\n  ) => {\n    if (\n      (includeWebReplay === false ||\n        (includeWebReplay === undefined && (platform === 'android' || platform === 'ios'))) &&\n      !!(oldMetroModuleName ?? moduleName).match(/@sentry(?:-internal)?\\/replay/)\n    ) {\n      return { type: 'empty' } as Resolution;\n    }\n    if (originalResolver) {\n      return oldMetroModuleName\n        ? originalResolver(context, moduleName, platform, oldMetroModuleName)\n        : originalResolver(context, moduleName, platform);\n    }\n\n    // Prior 0.68, resolve context.resolveRequest is sentryResolver itself, where on later version it is the default resolver.\n    if (context.resolveRequest === sentryResolverRequest) {\n      // eslint-disable-next-line no-console\n      console.error(\n        `Error: [@sentry/react-native/metro] Can not resolve the defaultResolver on Metro older than 0.68.\nPlease follow one of the following options:\n- Include your resolverRequest on your metroconfig.\n- Update your Metro version to 0.68 or higher.\n- Set includeWebReplay as true on your metro config.\n- If you are still facing issues, report the issue at http://www.github.com/getsentry/sentry-react-native/issues`,\n      );\n      // Return required for test.\n      return process.exit(-1);\n    }\n\n    return context.resolveRequest(context, moduleName, platform);\n  };\n\n  return {\n    ...config,\n    resolver: {\n      ...config.resolver,\n      resolveRequest: sentryResolverRequest,\n    },\n  };\n}\n\ntype MetroFrame = Parameters<Required<Required<MetroConfig>['symbolicator']>['customizeFrame']>[0];\ntype MetroCustomizeFrame = { readonly collapse?: boolean };\ntype MetroCustomizeFrameReturnValue =\n  | ReturnType<Required<Required<MetroConfig>['symbolicator']>['customizeFrame']>\n  | undefined;\n\n/**\n * Collapses Sentry internal frames from the stack trace view in LogBox.\n */\nexport function withSentryFramesCollapsed(config: MetroConfig): MetroConfig {\n  const originalCustomizeFrame = config.symbolicator?.customizeFrame;\n  const collapseSentryInternalFrames = (frame: MetroFrame): boolean =>\n    typeof frame.file === 'string' &&\n    (frame.file.includes('node_modules/@sentry/core/cjs/instrument.js') ||\n      frame.file.includes('node_modules/@sentry/core/cjs/logger.js'));\n\n  const customizeFrame = (frame: MetroFrame): MetroCustomizeFrameReturnValue => {\n    const originalOrSentryCustomizeFrame = (\n      originalCustomization: MetroCustomizeFrame | undefined,\n    ): MetroCustomizeFrame => ({\n      ...originalCustomization,\n      collapse: (originalCustomization && originalCustomization.collapse) || collapseSentryInternalFrames(frame),\n    });\n\n    const maybePromiseCustomization = (originalCustomizeFrame && originalCustomizeFrame(frame)) || undefined;\n\n    if (maybePromiseCustomization !== undefined && 'then' in maybePromiseCustomization) {\n      return maybePromiseCustomization.then<MetroCustomizeFrame>(originalCustomization =>\n        originalOrSentryCustomizeFrame(originalCustomization),\n      );\n    }\n\n    return originalOrSentryCustomizeFrame(maybePromiseCustomization);\n  };\n\n  return {\n    ...config,\n    symbolicator: {\n      ...config.symbolicator,\n      customizeFrame,\n    },\n  };\n}\n\n/**\n * Sets the `___SENTRY_METRO_DEV_SERVER___` environment flag.\n * This is used to determine if the SDK is running in Node in Metro Dev Server.\n * For example during static routes generation in `expo-router`.\n */\nfunction setSentryMetroDevServerEnvFlag(): void {\n  env.___SENTRY_METRO_DEV_SERVER___ = 'true';\n}\n"]}